/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { ReplaySubject, of } from "rxjs";
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var LazyLoadService = /** @class */ (function () {
    function LazyLoadService() {
        this._loadedLibraries = {};
    }
    /**
     * @param {?} url
     * @param {?} type
     * @return {?}
     */
    LazyLoadService.prototype.load = /**
     * @param {?} url
     * @param {?} type
     * @return {?}
     */
    function (url, type) {
        var _this = this;
        if (!url)
            return of(null);
        /** @type {?} */
        var key = url.slice(url.lastIndexOf("/") + 1);
        if (this._loadedLibraries[key]) {
            return this._loadedLibraries[key].asObservable();
        }
        this._loadedLibraries[key] = new ReplaySubject();
        /** @type {?} */
        var library = document.createElement(type === "script" ? "script" : "link");
        if (type === "script") {
            library.type = "text/javascript";
            ((/** @type {?} */ (library))).src = url;
        }
        else {
            library.type = "text/css";
            ((/** @type {?} */ (library))).rel = "stylesheet";
            ((/** @type {?} */ (library))).href = url;
        }
        library.onload = (/**
         * @return {?}
         */
        function () {
            _this._loadedLibraries[key].next();
            _this._loadedLibraries[key].complete();
        });
        document.body.appendChild(library);
        return this._loadedLibraries[key].asObservable();
    };
    /** @nocollapse */ LazyLoadService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LazyLoadService_Factory() { return new LazyLoadService(); }, token: LazyLoadService, providedIn: "root" });
LazyLoadService.ɵfac = function LazyLoadService_Factory(t) { return new (t || LazyLoadService)(); };
LazyLoadService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LazyLoadService, factory: function (t) { return LazyLoadService.ɵfac(t); }, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LazyLoadService, [{
        type: Injectable,
        args: [{
                providedIn: "root"
            }]
    }], function () { return []; }, null); })();
    return LazyLoadService;
}());
export { LazyLoadService };
if (false) {
    /** @type {?} */
    LazyLoadService.prototype._loadedLibraries;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1sb2FkLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtc2xpY2tqcy9saWIvc2VydmljZXMvbGF6eS1sb2FkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBVSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFjLGFBQWEsRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDckQ7O0FBQ0E7QUFHWSxJQUhaO0FBQ2UsUUFHYixxQkFBZ0IsR0FBMkMsRUFBRSxDQUFDO0FBQ2hFLEtBZ0NDO0FBQ0Q7QUFBUTtBQUFzQjtBQUF1QjtBQUFtQjtBQUFRLElBaEM5RSw4QkFBSTtBQUFPO0FBQXNCO0FBQXVCO0FBQy9DO0FBQVEsSUFEakIsVUFBSyxHQUFXLEVBQUUsSUFBd0I7QUFBSSxRQUE5QyxpQkE4QkM7QUFDSCxRQTlCSSxJQUFJLENBQUMsR0FBRztBQUFFLFlBQUEsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUI7QUFBeUIsWUFBZixHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuRCxRQUNJLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQ3BDLFlBQU0sT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDdkQsU0FBSztBQUNMLFFBQ0ksSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7QUFDckQ7QUFDd0IsWUFBZCxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FDcEMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQ3RDO0FBQ0wsUUFBSSxJQUFJLElBQUksS0FBSyxRQUFRLEVBQUU7QUFDM0IsWUFBTSxPQUFPLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO0FBQ3ZDLFlBQU0sQ0FBQyxtQkFBQSxPQUFPLEVBQXFCLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQy9DLFNBQUs7QUFBQyxhQUFLO0FBQ1gsWUFBTSxPQUFPLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztBQUNoQyxZQUFNLENBQUMsbUJBQUEsT0FBTyxFQUFtQixDQUFDLENBQUMsR0FBRyxHQUFHLFlBQVksQ0FBQztBQUN0RCxZQUFNLENBQUMsbUJBQUEsT0FBTyxFQUFtQixDQUFDLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztBQUM5QyxTQUFLO0FBQ0wsUUFDSSxPQUFPLENBQUMsTUFBTTtBQUFRO0FBQ047QUFBWSxRQURYO0FBQ2YsWUFBQSxLQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDeEMsWUFBTSxLQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDNUMsUUFBSSxDQUFDLENBQUEsQ0FBQztBQUNOLFFBQ0ksUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdkMsUUFDSSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNyRCxJQUFFLENBQUMsQ0FqQ007bURBSFIsVUFBVSxTQUFDLHNCQUNWLFVBQVUsRUFBRSxNQUFNLG1CQUNuQixqSUFDUzs7Ozs7Ozs7Z0RBS1k7QUFBQywwQkFYdkI7QUFBRSxDQXdDRCxBQXJDRCxJQXFDQztBQUNELFNBbkNhLGVBQWU7QUFDM0I7QUFBYTtBQUFxQixJQUFqQywyQ0FBOEQ7QUFDaEU7QUFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0LCBvZiB9IGZyb20gXCJyeGpzXCI7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogXCJyb290XCIsXG59KVxuZXhwb3J0IGNsYXNzIExhenlMb2FkU2VydmljZSB7XG4gIF9sb2FkZWRMaWJyYXJpZXM6IHsgW3VybDogc3RyaW5nXTogUmVwbGF5U3ViamVjdDx2b2lkPiB9ID0ge307XG5cbiAgbG9hZCh1cmw6IHN0cmluZywgdHlwZTogXCJzY3JpcHRcIiB8IFwic3R5bGVcIik6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgIGlmICghdXJsKSByZXR1cm4gb2YobnVsbCk7XG4gICAgY29uc3Qga2V5ID0gdXJsLnNsaWNlKHVybC5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTtcblxuICAgIGlmICh0aGlzLl9sb2FkZWRMaWJyYXJpZXNba2V5XSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xvYWRlZExpYnJhcmllc1trZXldLmFzT2JzZXJ2YWJsZSgpO1xuICAgIH1cblxuICAgIHRoaXMuX2xvYWRlZExpYnJhcmllc1trZXldID0gbmV3IFJlcGxheVN1YmplY3QoKTtcblxuICAgIGNvbnN0IGxpYnJhcnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgdHlwZSA9PT0gXCJzY3JpcHRcIiA/IFwic2NyaXB0XCIgOiBcImxpbmtcIlxuICAgICk7XG4gICAgaWYgKHR5cGUgPT09IFwic2NyaXB0XCIpIHtcbiAgICAgIGxpYnJhcnkudHlwZSA9IFwidGV4dC9qYXZhc2NyaXB0XCI7XG4gICAgICAobGlicmFyeSBhcyBIVE1MU2NyaXB0RWxlbWVudCkuc3JjID0gdXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaWJyYXJ5LnR5cGUgPSBcInRleHQvY3NzXCI7XG4gICAgICAobGlicmFyeSBhcyBIVE1MTGlua0VsZW1lbnQpLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuICAgICAgKGxpYnJhcnkgYXMgSFRNTExpbmtFbGVtZW50KS5ocmVmID0gdXJsO1xuICAgIH1cblxuICAgIGxpYnJhcnkub25sb2FkID0gKCkgPT4ge1xuICAgICAgdGhpcy5fbG9hZGVkTGlicmFyaWVzW2tleV0ubmV4dCgpO1xuICAgICAgdGhpcy5fbG9hZGVkTGlicmFyaWVzW2tleV0uY29tcGxldGUoKTtcbiAgICB9O1xuXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaWJyYXJ5KTtcblxuICAgIHJldHVybiB0aGlzLl9sb2FkZWRMaWJyYXJpZXNba2V5XS5hc09ic2VydmFibGUoKTtcbiAgfVxufVxuIl19