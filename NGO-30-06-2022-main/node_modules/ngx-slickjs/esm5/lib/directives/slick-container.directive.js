/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Input, NgZone, Output, Inject } from '@angular/core';
import compare from 'just-compare';
import { take, map, filter, switchMap, takeUntil } from 'rxjs/operators';
import { timer, forkJoin, fromEvent, Subject } from 'rxjs';
import { LazyLoadService } from '../services/lazy-load.service';
import * as Éµngcc0 from '@angular/core';
var SlickContainerDirective = /** @class */ (function () {
    function SlickContainerDirective(elRef, zone, lazyLoadService, links) {
        this.elRef = elRef;
        this.zone = zone;
        this.lazyLoadService = lazyLoadService;
        this.links = links;
        this.config = (/** @type {?} */ ({}));
        this.afterChange = new EventEmitter();
        this.beforeChange = new EventEmitter();
        this.breakpoint = new EventEmitter();
        this.destroy = new EventEmitter();
        this.init = new EventEmitter();
        this.slides = [];
        this.initialize = false;
        this.slickCount = 0;
        this.destroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.lazyLoadService
            .load(this.links.jquery, 'script')
            .pipe(map((/**
         * @return {?}
         */
        function () { return 'jQuery is loaded'; })), filter((/**
         * @param {?} jquery
         * @return {?}
         */
        function (jquery) { return !!jquery; })), switchMap((/**
         * @return {?}
         */
        function () {
            return forkJoin(_this.lazyLoadService.load(_this.links.slickJs, 'script'), _this.lazyLoadService.load(_this.links.slickCss, 'style'), _this.lazyLoadService.load(_this.links.slickThemeCss, 'style'));
        })), take(1))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this.initSlick();
        }));
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unslick();
        this.slides = [];
        this.destroy$.next();
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.initSlick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var that = this;
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            $(_this.elRef.nativeElement)[0].innerHTML = '';
            _this.jQueryElement = $(_this.elRef.nativeElement);
            _this.jQueryElement.on('init', (/**
             * @param {?} event
             * @param {?} slick
             * @return {?}
             */
            function (event, slick) {
                _this.zone.run((/**
                 * @return {?}
                 */
                function () {
                    timer(0).subscribe((/**
                     * @return {?}
                     */
                    function () {
                        _this.init.emit({ event: event, slick: slick });
                        if (_this.config && _this.config.initialSlide && _this.config.initialSlide <= _this.slides.length) {
                            _this.goTo(_this.config.initialSlide);
                        }
                    }));
                }));
            }));
            _this.jQueryElement.slick(_this.config);
            _this.initialize = true;
            _this.listenMouseWheel();
            _this.jQueryElement.on('afterChange', (/**
             * @param {?} event
             * @param {?} slick
             * @param {?} currentSlide
             * @return {?}
             */
            function (event, slick, currentSlide) {
                that.zone.run((/**
                 * @return {?}
                 */
                function () {
                    that.afterChange.emit({ event: event, slick: slick, currentSlide: currentSlide });
                }));
            }));
            _this.jQueryElement.on('beforeChange', (/**
             * @param {?} event
             * @param {?} slick
             * @param {?} currentSlide
             * @param {?} nextSlide
             * @return {?}
             */
            function (event, slick, currentSlide, nextSlide) {
                that.zone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.slickCount = slick.slideCount;
                    that.beforeChange.emit({ event: event, slick: slick, currentSlide: currentSlide, nextSlide: nextSlide });
                }));
            }));
            _this.jQueryElement.on('breakpoint', (/**
             * @param {?} event
             * @param {?} slick
             * @param {?} breakpoint
             * @return {?}
             */
            function (event, slick, breakpoint) {
                that.zone.run((/**
                 * @return {?}
                 */
                function () {
                    that.breakpoint.emit({ event: event, slick: slick, breakpoint: breakpoint });
                }));
            }));
            _this.jQueryElement.on('destroy', (/**
             * @param {?} event
             * @param {?} slick
             * @return {?}
             */
            function (event, slick) {
                that.zone.run((/**
                 * @return {?}
                 */
                function () {
                    that.destroy.emit({ event: event, slick: slick });
                }));
            }));
        }));
        this.syncSlides();
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.syncSlides = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.slickCount >= this.slides.length)
            return;
        this.slides.forEach((/**
         * @param {?} slide
         * @return {?}
         */
        function (slide) {
            _this.zone.run((/**
             * @return {?}
             */
            function () {
                _this.jQueryElement.slick('slickAdd', slide);
            }));
        }));
    };
    /**
     * @param {?} slide
     * @return {?}
     */
    SlickContainerDirective.prototype.addSlide = /**
     * @param {?} slide
     * @return {?}
     */
    function (slide) {
        var _this = this;
        this.slides = tslib_1.__spread(this.slides, [slide]);
        if (!this.initialize)
            return;
        this.zone.run((/**
         * @return {?}
         */
        function () {
            _this.jQueryElement.slick('slickAdd', slide);
        }));
    };
    /**
     * @param {?} slide
     * @return {?}
     */
    SlickContainerDirective.prototype.removeSlide = /**
     * @param {?} slide
     * @return {?}
     */
    function (slide) {
        var _this = this;
        this.slides = this.slides.filter((/**
         * @param {?} slide
         * @return {?}
         */
        function (slide) { return compare(slide, slide); }));
        if (!this.initialize)
            return;
        this.zone.run((/**
         * @return {?}
         */
        function () {
            _this.jQueryElement.slick('slickRemove', _this.slides.indexOf(slide));
        }));
    };
    /**
     * @param {?} index
     * @return {?}
     */
    SlickContainerDirective.prototype.goTo = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        this.zone.run((/**
         * @return {?}
         */
        function () {
            _this.jQueryElement.slick('slickGoTo', index);
        }));
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.next = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.run((/**
         * @return {?}
         */
        function () {
            _this.jQueryElement.slick('slickNext');
        }));
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.prev = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.run((/**
         * @return {?}
         */
        function () {
            _this.jQueryElement.slick('slickPrev');
        }));
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.pause = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.run((/**
         * @return {?}
         */
        function () {
            _this.jQueryElement.slick('slickPause');
        }));
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.play = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.run((/**
         * @return {?}
         */
        function () {
            _this.jQueryElement.slick('slickPlay');
        }));
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.unslick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.jQueryElement) {
            this.zone.run((/**
             * @return {?}
             */
            function () {
                _this.jQueryElement.slick('unslick');
            }));
        }
        this.initialize = false;
    };
    /**
     * @return {?}
     */
    SlickContainerDirective.prototype.listenMouseWheel = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.config.mouseWheelMove === false)
            return;
        fromEvent(this.elRef.nativeElement, 'wheel')
            .pipe(takeUntil(this.destroy$))
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            event.preventDefault();
            if (event.deltaX > 0 || event.deltaY < 0) {
                _this.prev();
            }
            else if (event.deltaX < 0 || event.deltaY > 0) {
                _this.next();
            }
        }));
    };
    /** @nocollapse */
    SlickContainerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: LazyLoadService },
        { type: undefined, decorators: [{ type: Inject, args: ['slick-links',] }] }
    ]; };
    SlickContainerDirective.propDecorators = {
        config: [{ type: Input, args: ['slickConfig',] }],
        afterChange: [{ type: Output, args: ['slickAfterChange',] }],
        beforeChange: [{ type: Output, args: ['slickBeforeChange',] }],
        breakpoint: [{ type: Output, args: ['slickBreakpoint',] }],
        destroy: [{ type: Output, args: ['slickDestroy',] }],
        init: [{ type: Output, args: ['slickInit',] }]
    };
SlickContainerDirective.Éµfac = function SlickContainerDirective_Factory(t) { return new (t || SlickContainerDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone), Éµngcc0.ÉµÉµdirectiveInject(LazyLoadService), Éµngcc0.ÉµÉµdirectiveInject('slick-links')); };
SlickContainerDirective.Éµdir = Éµngcc0.ÉµÉµdefineDirective({ type: SlickContainerDirective, selectors: [["", "slickContainer", ""]], inputs: { config: ["slickConfig", "config"] }, outputs: { afterChange: "slickAfterChange", beforeChange: "slickBeforeChange", breakpoint: "slickBreakpoint", destroy: "slickDestroy", init: "slickInit" }, exportAs: ["slick"] });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(SlickContainerDirective, [{
        type: Directive,
        args: [{
                selector: '[slickContainer]',
                exportAs: 'slick'
            }]
    }], function () { return [{ type: Éµngcc0.ElementRef }, { type: Éµngcc0.NgZone }, { type: LazyLoadService }, { type: undefined, decorators: [{
                type: Inject,
                args: ['slick-links']
            }] }]; }, { config: [{
            type: Input,
            args: ['slickConfig']
        }], afterChange: [{
            type: Output,
            args: ['slickAfterChange']
        }], beforeChange: [{
            type: Output,
            args: ['slickBeforeChange']
        }], breakpoint: [{
            type: Output,
            args: ['slickBreakpoint']
        }], destroy: [{
            type: Output,
            args: ['slickDestroy']
        }], init: [{
            type: Output,
            args: ['slickInit']
        }] }); })();
    return SlickContainerDirective;
}());
export { SlickContainerDirective };
if (false) {
    /** @type {?} */
    SlickContainerDirective.prototype.config;
    /** @type {?} */
    SlickContainerDirective.prototype.afterChange;
    /** @type {?} */
    SlickContainerDirective.prototype.beforeChange;
    /** @type {?} */
    SlickContainerDirective.prototype.breakpoint;
    /** @type {?} */
    SlickContainerDirective.prototype.destroy;
    /** @type {?} */
    SlickContainerDirective.prototype.init;
    /** @type {?} */
    SlickContainerDirective.prototype.slides;
    /** @type {?} */
    SlickContainerDirective.prototype.jQueryElement;
    /** @type {?} */
    SlickContainerDirective.prototype.initialize;
    /** @type {?} */
    SlickContainerDirective.prototype.slickCount;
    /**
     * @type {?}
     * @private
     */
    SlickContainerDirective.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    SlickContainerDirective.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    SlickContainerDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    SlickContainerDirective.prototype.lazyLoadService;
    /**
     * @type {?}
     * @private
     */
    SlickContainerDirective.prototype.links;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,