/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Host } from "@angular/core";
import { SlickContainerDirective } from "./slick-container.directive";
import * as ɵngcc0 from '@angular/core';
export class SlickItemDirective {
    /**
     * @param {?} elRef
     * @param {?} slickRef
     */
    constructor(elRef, slickRef) {
        this.elRef = elRef;
        this.slickRef = slickRef;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.slickRef.addSlide(this.elRef.nativeElement);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.slickRef.removeSlide(this.elRef.nativeElement);
    }
}
SlickItemDirective.ɵfac = function SlickItemDirective_Factory(t) { return new (t || SlickItemDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(SlickContainerDirective, 1)); };
SlickItemDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SlickItemDirective, selectors: [["", "slickItem", ""]] });
/** @nocollapse */
SlickItemDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: SlickContainerDirective, decorators: [{ type: Host }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SlickItemDirective, [{
        type: Directive,
        args: [{
                selector: "[slickItem]"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: SlickContainerDirective, decorators: [{
                type: Host
            }] }]; }, null); })();
if (false) {
    /** @type {?} */
    SlickItemDirective.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    SlickItemDirective.prototype.slickRef;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpY2staXRlbS5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtc2xpY2tqcy9saWIvZGlyZWN0aXZlcy9zbGljay1pdGVtLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFHVCxVQUFVLEVBQ1YsSUFBSSxFQUNMLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztBQUt0RSxNQUFNLE9BQU8sa0JBQWtCO0FBQUc7QUFBUTtBQUF3QjtBQUUxRDtBQUFRLElBRGQsWUFDUyxLQUFpQixFQUNSLFFBQWlDO0FBQ2xELFFBRlEsVUFBSyxHQUFMLEtBQUssQ0FBWTtBQUFDLFFBQ1QsYUFBUSxHQUFSLFFBQVEsQ0FBeUI7QUFDckQsSUFBSyxDQUFDO0FBQ047QUFDTztBQUNIO0FBQVEsSUFEVixlQUFlO0FBQ2pCLFFBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNyRCxJQUFFLENBQUM7QUFDSDtBQUNPO0FBQ0M7QUFBUSxJQURkLFdBQVc7QUFDYixRQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDeEQsSUFBRSxDQUFDO0FBQ0g7OENBaEJDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsYUFBYSxjQUN4QjtxSEFDSTtBQUFDO0FBQW1CO0FBQTRDLFlBUm5FLFVBQVU7QUFDVixZQUVPLHVCQUF1Qix1QkFRM0IsSUFBSTtBQUFNOzs7Ozs7OztrQ0FBRTtBQUFDO0FBQWE7QUFBcUIsSUFEaEQsbUNBQXdCO0FBQUM7QUFDdEI7QUFBaUI7QUFBZ0I7QUFBUSxJQUE1QyxzQ0FBaUQ7QUFDckQ7QUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgT25EZXN0cm95LFxuICBFbGVtZW50UmVmLFxuICBIb3N0XG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBTbGlja0NvbnRhaW5lckRpcmVjdGl2ZSB9IGZyb20gXCIuL3NsaWNrLWNvbnRhaW5lci5kaXJlY3RpdmVcIjtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiBcIltzbGlja0l0ZW1dXCJcbn0pXG5leHBvcnQgY2xhc3MgU2xpY2tJdGVtRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGVsUmVmOiBFbGVtZW50UmVmLFxuICAgIEBIb3N0KCkgcHJpdmF0ZSBzbGlja1JlZjogU2xpY2tDb250YWluZXJEaXJlY3RpdmVcbiAgKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNsaWNrUmVmLmFkZFNsaWRlKHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnNsaWNrUmVmLnJlbW92ZVNsaWRlKHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudCk7XG4gIH1cbn1cbiJdfQ==