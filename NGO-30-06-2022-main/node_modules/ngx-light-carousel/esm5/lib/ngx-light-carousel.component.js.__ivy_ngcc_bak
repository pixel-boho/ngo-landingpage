import { __decorate, __metadata, __param } from "tslib";
import { isPlatformBrowser } from '@angular/common';
import { AfterViewInit, Component, ContentChild, ContentChildren, ElementRef, EmbeddedViewRef, EventEmitter, HostListener, Inject, Input, NgZone, OnChanges, OnDestroy, OnInit, Output, PLATFORM_ID, QueryList, Renderer2, TemplateRef, ViewChild, ViewContainerRef, ViewEncapsulation, } from '@angular/core';
import * as Hammer from 'hammerjs';
import { interval, Subject } from 'rxjs';
import { throttle } from 'rxjs/operators';
import { NgxCarouselItemDirective } from './ngx-light-carousel-item.directive';
import { ngxLightOptions } from './ngx-light-carousel.model';
var NgxCarouselComponent = /** @class */ (function () {
    function NgxCarouselComponent(platformId, _renderer, zone) {
        var _this = this;
        this.platformId = platformId;
        this._renderer = _renderer;
        this.zone = zone;
        this.current = 0;
        this.currentChange = new EventEmitter();
        this.infiniteElmRefs = [];
        this.timeLeft = 2000;
        this.dotsLoading = true;
        this.loading = true;
        this.grabbing = false;
        this.arrowsVisible = true;
        this.initialized = false;
        this.addPanningClass = function () {
            _this.grabbing = true;
            _this._renderer.addClass(_this.elements().rootElement, 'grabbing');
            _this._renderer.addClass(_this.elements().containerElement, 'panning');
        };
        this.removePanningClass = function () {
            _this.grabbing = false;
            _this._renderer.removeClass(_this.elements().rootElement, 'grabbing');
            _this._renderer.removeClass(_this.elements().containerElement, 'panning');
        };
        this.addAnimationClass = function () {
            if (_this.options.animation.animationClass !== '') {
                _this._renderer.addClass(_this.elements().containerElement, _this.options.animation.animationClass);
            }
        };
        this.removeAnimationClass = function () {
            if (_this.options.animation.animationClass !== '') {
                _this._renderer.removeClass(_this.elements().containerElement, _this.options.animation.animationClass);
            }
        };
        this.panTo = function (value) {
            if (isPlatformBrowser(_this.platformId)) {
                _this._renderer.setStyle(_this.elements().containerElement, 'transform', "translate3d(" + value + "px, 0,0)");
            }
            else {
                _this._renderer.setStyle(_this.elements().containerElement, 'transform', "translate3d(" + value + "%, 0,0)");
            }
        };
        this.currentIndex = function (number) {
            if (!_this.infiniteMode() && number !== undefined) {
                if (number >= 0) {
                    if (number < 0) {
                        _this.current = 0;
                        // } else if (this.currentBreakpoint().number % 1 != 0 && this.current - 1 > this.data.length) {
                        // 	this.current = this.data.length + 1 - this.currentBreakpoint().number
                    }
                    else if (number > _this.data.length - _this.currentBreakpoint().number) {
                        _this.current = _this.data.length - _this.currentBreakpoint().number;
                    }
                    else {
                        _this.current = number;
                    }
                }
            }
            else if (number != undefined) {
                _this.current = number;
            }
            _this.zone.run(function () {
                _this.current = _this.current;
            });
            return _this.current;
        };
        this.slowOnOutOfBounds = function (e) {
            if (!_this.options.infinite && _this.outOfBound()) {
                e.deltaX *= 0.2;
                e.deltaY *= 0.2;
            }
            return e;
        };
        this.scrollBackToEdge = function () {
            var root = _this.elements().rootElement.getBoundingClientRect();
            var container = _this.elements().containerElement.getBoundingClientRect();
            if (container.right < root.right) {
                _this.goToIndex(_this.visibleElements());
            }
            if (root.left - container.left < 0) {
                _this.goToIndex(0);
            }
        };
        this.outOfBound = function () {
            var root = _this.elements().rootElement.getBoundingClientRect();
            var container = _this.elements().containerElement.getBoundingClientRect();
            if (root.right - container.right > 0) {
                _this.currentIndex(_this.data.length - 1);
                return true;
            }
            if (root.left - container.left < 0) {
                _this.currentIndex(0);
                return true;
            }
            return false;
        };
        this.detectSwipingLeft = function (e) {
            return e.velocityX < -_this.options.swipe.swipeVelocity;
        };
        this.detectSwipingRight = function (e) {
            return e.velocityX > _this.options.swipe.swipeVelocity;
        };
        this.detectPanningLeft = function (e) {
            return e.velocityX < 1 && e.distance < -_this.carouselItemWidthVar * 1.5;
        };
        this.detectPanningRight = function (e) {
            return e.velocityX > 1 && e.distance < _this.carouselItemWidthVar * 1.5;
        };
        this.nextSlide = function () {
            _this.addAnimationClass();
            if (_this.data.length > 1) {
                if (!_this.infiniteMode() && _this.visibleElements() < _this.currentIndex()) {
                    _this.goToIndex(_this.visibleElements());
                }
                else {
                    _this.goToIndex(_this.currentIndex() + 1);
                }
            }
            setTimeout(function () {
                _this.removeAnimationClass();
                _this.infiniteHandler();
            }, _this.options.animation.animationTime + 40);
        };
        this.prevSlide = function () {
            _this.addAnimationClass();
            if (_this.data.length > 1) {
                if (!_this.infiniteMode() && 0 >= _this.currentIndex()) {
                    _this.goToIndex(_this.currentIndex(0));
                }
                else {
                    _this.goToIndex(_this.currentIndex() - 1);
                }
            }
            setTimeout(function () {
                _this.removeAnimationClass();
                _this.infiniteHandler();
            }, _this.options.animation.animationTime + 40);
        };
        this.startTimer = function () {
            _this.zone.runOutsideAngular(function () {
                var autoplay = _this.autoplayMode();
                if (autoplay && autoplay.enabled) {
                    _this.interval = setInterval(function () {
                        if (_this.timeLeft > 0) {
                            _this.timeLeft = _this.timeLeft - 100;
                        }
                        else {
                            _this.timeLeft = JSON.parse(JSON.stringify(autoplay.delay));
                            _this.actionDelay.next(autoplay.direction == 'left' ? _this.prevSlide : _this.nextSlide);
                        }
                    }, 100);
                }
            });
        };
        this.pauseTimer = function () {
            _this.zone.runOutsideAngular(function () {
                try {
                    var autoplay = _this.autoplayMode();
                    if (autoplay && autoplay.enabled) {
                        _this.timeLeft = JSON.parse(JSON.stringify(autoplay.delay));
                        clearInterval(_this.interval);
                    }
                    _this.timeLeft = JSON.parse(JSON.stringify(autoplay.delay));
                    delete _this.interval;
                }
                catch (_a) { }
            });
        };
        this.goToIndex = function (number) {
            if (_this.infiniteMode()) {
                _this.panTo(-_this.carouselItemWidth() * number);
            }
            else {
                if (number > -1 && number <= _this.data.length - _this.currentBreakpoint().number) {
                    _this.currentIndex(number);
                    _this.panTo(-_this.carouselItemWidth() * number);
                }
                if (number <= -1) {
                    _this.currentIndex(0);
                    _this.goToIndex(0);
                }
            }
            _this.currentIndex(number);
        };
        this.calculateMoved = function (e) {
            var moved = Math.round(Math.abs(e.deltaX) / _this.carouselItemWidth());
            return moved > 0 ? moved : 1;
        };
        this.loading = true;
        this.actionDelay = new Subject();
        this.throttleSub = this.actionDelay.asObservable();
        this.subRef = this.throttleSub.pipe(throttle(function (val) { return interval(_this.options.animation.animationTime + 100); })).subscribe(function (data) {
            data();
        });
    }
    NgxCarouselComponent.prototype.click = function (fn) {
        this.actionDelay.next(fn);
    };
    NgxCarouselComponent.prototype.ngOnInit = function () {
        this.dots = [];
    };
    NgxCarouselComponent.prototype.ngAfterViewInit = function () {
        this.init();
        this.loading = false;
        if (this.sufficientSlides()) {
            if (this.infiniteMode()) {
                this.addInfiniteElm();
            }
            if (this.autoplayMode()) {
                this.startTimer();
            }
        }
        this.goToIndex(this.current);
        this.rootElmWidth;
        this.setViewWidth();
        this.calculateDots();
    };
    NgxCarouselComponent.prototype.ngOnChanges = function () {
        if (this.sliderElement) {
            this.goToIndex(this.currentIndex());
        }
        if (this.elements()) {
            this.onResize();
        }
    };
    NgxCarouselComponent.prototype.ngOnDestroy = function () {
        this.pauseTimer();
        this.subRef.unsubscribe();
    };
    NgxCarouselComponent.prototype.onResize = function () {
        this.rootElmWidth;
        this.setViewWidth();
        this.calculateDots();
        if (this.sufficientSlides()) {
            if (this.infiniteMode()) {
                this.addInfiniteElm();
            }
        }
        this.goToIndex(this.currentIndex());
    };
    NgxCarouselComponent.prototype.sufficientSlides = function () {
        this.showArrows(this.data.length > this.currentBreakpoint().number);
        return this.data.length > this.currentBreakpoint().number;
    };
    NgxCarouselComponent.prototype.showArrows = function (state) {
        this.arrowsVisible = state;
    };
    NgxCarouselComponent.prototype.rootElmWidth = function () {
        return isPlatformBrowser(this.platformId) ? this.elements().rootElement.getBoundingClientRect().width : 100;
    };
    NgxCarouselComponent.prototype.carouselItemWidth = function () {
        if (this.data.length > this.currentBreakpoint().number) {
            return (this.carouselItemWidthVar = this.rootElmWidth() / this.currentBreakpoint().number);
        }
        else {
            return (this.carouselItemWidthVar = this.rootElmWidth() / this.data.length);
        }
    };
    NgxCarouselComponent.prototype.currentBreakpoint = function () {
        for (var i = 0; i < this.options.breakpoints.length; i++) {
            if (this.options.breakpoints[i].width > this.rootElmWidth()) {
                return this.options.breakpoints[i];
            }
        }
    };
    NgxCarouselComponent.prototype.elements = function () {
        if (this.sliderElement) {
            return {
                rootElement: this.sliderElement.nativeElement,
                containerElement: this.sliderElement.nativeElement.children[0],
                carouselItems: this.carouselItems.toArray().map(function (x) { return x.nativeElement; }),
            };
        }
        return;
    };
    NgxCarouselComponent.prototype.setViewWidth = function () {
        var _this = this;
        this._renderer.setStyle(this.elements().containerElement, 'display', 'inline-flex');
        this._renderer.setStyle(this.elements().containerElement, 'position', 'relative');
        this.elements().carouselItems.forEach(function (element) {
            _this._renderer.addClass(element, 'slide');
            _this._renderer.setStyle(element, 'width', _this.carouselItemWidth() + 'px');
            _this._renderer.setStyle(element, 'display', 'inline-flex');
        });
        if (this.infiniteMode()) {
            this.infiniteElmRefs.forEach(function (ref) {
                _this._renderer.addClass(ref.rootNodes[0], 'slide');
                _this._renderer.setStyle(ref.rootNodes[0], 'width', _this.carouselItemWidth() + 'px');
            });
        }
    };
    NgxCarouselComponent.prototype.hover = function () {
        if (this.autoplayMode()) {
            if (this.autoplayMode().stopOnHover) {
                this.pauseTimer();
            }
        }
    };
    NgxCarouselComponent.prototype.unhover = function () {
        if (this.autoplayMode()) {
            this.pauseTimer();
            this.startTimer();
        }
    };
    NgxCarouselComponent.prototype.calculateDots = function () {
        var _this = this;
        this.dots = [];
        if (this.infiniteMode()) {
            var number = this.data.length;
        }
        else {
            var number = this.data.length - this.currentBreakpoint().number + 1;
        }
        var results;
        if (number > 1) {
            var results_1 = Array.from(Array(Number(number.toFixed(0))).keys());
            this.dots = results_1;
        }
        else {
            results = [];
            this.dots = [];
        }
        if (!this.initialized) {
            this.zone.run(function () {
                setTimeout(function () {
                    _this.initialized = true;
                }, 100);
            });
        }
        return results;
    };
    NgxCarouselComponent.prototype.visibleElements = function () {
        return this.data.length - this.currentBreakpoint().number;
    };
    NgxCarouselComponent.prototype.addInfiniteElm = function () {
        this.infiniteElmRefs = [];
        if (this.infiniteContainer) {
            this.infiniteContainer.clear();
            for (var i = 1; i <= this.data.length; i++) {
                var elm = this.infiniteContainer.createEmbeddedView(this.contentContent, {
                    $implicit: this.data[this.data.length - i],
                    index: this.data.length - i,
                });
                this._renderer.setStyle(elm.rootNodes[0], 'position', 'absolute');
                this._renderer.setStyle(elm.rootNodes[0], 'transform', "translate3d(-" + 100 * i + "%, 0,0)");
                this._renderer.setStyle(elm.rootNodes[0], 'display', 'inline-flex');
                this._renderer.setStyle(elm.rootNodes[0], 'visibility', 'visible');
                this._renderer.setStyle(elm.rootNodes[0], 'width', this.carouselItemWidthVar + 'px');
                this._renderer.addClass(elm.rootNodes[0], 'slide');
                var elm2 = this.infiniteContainer.createEmbeddedView(this.contentContent, {
                    $implicit: this.data[i - 1],
                    index: i - 1,
                });
                this._renderer.setStyle(elm2.rootNodes[0], 'position', 'absolute');
                this._renderer.setStyle(elm2.rootNodes[0], 'right', 0);
                this._renderer.setStyle(elm2.rootNodes[0], 'top', 0);
                this._renderer.setStyle(elm2.rootNodes[0], 'transform', "translate3d(" + 100 * i + "%, 0,0)");
                this._renderer.setStyle(elm2.rootNodes[0], 'display', 'inline-flex');
                this._renderer.setStyle(elm2.rootNodes[0], 'visibility', 'visible');
                this._renderer.setStyle(elm2.rootNodes[0], 'width', this.carouselItemWidthVar + 'px');
                this._renderer.addClass(elm2.rootNodes[0], 'slide');
                elm.detectChanges();
                elm2.detectChanges();
                this.infiniteElmRefs.push(elm);
                this.infiniteElmRefs.push(elm2);
            }
        }
    };
    NgxCarouselComponent.prototype.infiniteHandler = function () {
        var _this = this;
        // this.removePanningClass()
        this.addAnimationClass();
        setTimeout(function () {
            _this.goToIndex(_this.currentIndex());
            _this.removeAnimationClass();
        }, this.options.animation.animationTime);
        if (0 > this.currentIndex()) {
            this.currentIndex(this.data.length - 1);
            setTimeout(function () {
                _this.removeAnimationClass();
                _this.goToIndex(_this.currentIndex(_this.data.length - 1));
            }, this.options.animation.animationTime + 40);
        }
        else if (this.data.length - 1 < this.currentIndex()) {
            this.currentIndex(0);
            setTimeout(function () {
                _this.removeAnimationClass();
                _this.goToIndex(_this.currentIndex(0));
            }, this.options.animation.animationTime + 40);
        }
        return;
    };
    NgxCarouselComponent.prototype.scrollToIndex = function (number) {
        this.addAnimationClass();
        this.goToIndex(number);
    };
    NgxCarouselComponent.prototype.infiniteMode = function () {
        return this.options.infinite;
    };
    NgxCarouselComponent.prototype.autoplayMode = function () {
        if (this.options.autoplay && this.options.autoplay.enabled) {
            return this.options.autoplay;
        }
        else {
            return false;
        }
    };
    NgxCarouselComponent.prototype.moveIndex = function (move) {
        return this.currentIndex() + move;
    };
    NgxCarouselComponent.prototype.init = function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            if (_this.data.length > 1 && _this.sufficientSlides()) {
                var sliderManager = new Hammer.Manager(_this.elements().containerElement);
                sliderManager.add(new Hammer.Pan({ threshold: 0, pointers: 0 }));
                sliderManager.on('panleft panright panend pancancel', function (e) {
                    switch (e.type) {
                        case 'panleft':
                        case 'panright':
                            _this.pauseTimer();
                            if (!_this.grabbing) {
                                _this.removeAnimationClass();
                                _this.addPanningClass();
                            }
                            if (_this.options.drag.draggable) {
                                _this.panTo(-_this.current * _this.carouselItemWidthVar + 0 + e.deltaX);
                            }
                            break;
                        case 'pancancel':
                            _this.removePanningClass();
                            _this.addAnimationClass();
                            _this.goToIndex(_this.currentIndex());
                            break;
                        case 'panend':
                            // e.gesture.srcEvent.preventDefault()
                            _this.pauseTimer();
                            _this.removePanningClass();
                            _this.addAnimationClass();
                            var moved = _this.calculateMoved(e);
                            if (!_this.infiniteMode()) {
                                if (_this.outOfBound()) {
                                    _this.scrollBackToEdge();
                                    setTimeout(function () {
                                        _this.removeAnimationClass();
                                    }, _this.options.animation.animationTime);
                                    break;
                                }
                            }
                            if (_this.options.drag.draggable) {
                                if (_this.detectPanningLeft(e)) {
                                    _this.addAnimationClass();
                                    _this.goToIndex(_this.moveIndex(+moved));
                                    _this.infiniteHandler();
                                    setTimeout(function () {
                                        _this.removeAnimationClass();
                                    }, _this.options.animation.animationTime);
                                    break;
                                }
                                if (_this.detectPanningRight(e)) {
                                    _this.addAnimationClass();
                                    if (1.00000001 < _this.currentIndex() && _this.currentIndex() < 1.999999999999) {
                                        _this.goToIndex(Math.ceil(_this.moveIndex(-moved)));
                                    }
                                    else {
                                        _this.goToIndex(_this.moveIndex(-moved));
                                    }
                                    _this.infiniteHandler();
                                    setTimeout(function () {
                                        _this.removeAnimationClass();
                                    }, _this.options.animation.animationTime);
                                    break;
                                }
                            }
                            if (_this.options.swipe.swipeable) {
                                if (_this.detectSwipingLeft(e)) {
                                    _this.nextSlide();
                                    _this.infiniteHandler();
                                    if (!_this.infiniteMode()) {
                                        _this.addAnimationClass();
                                        if (0.00000001 < _this.currentIndex() && _this.currentIndex() < 0.999999999999) {
                                            _this.removeAnimationClass();
                                            _this.goToIndex(0);
                                        }
                                    }
                                    break;
                                }
                                if (_this.detectSwipingRight(e)) {
                                    _this.prevSlide();
                                    _this.infiniteHandler();
                                    if (!_this.infiniteMode()) {
                                        if (0.00000001 < _this.currentIndex() && _this.currentIndex() < 0.999999999999) {
                                            _this.addAnimationClass();
                                            _this.goToIndex(0);
                                            _this.removeAnimationClass();
                                        }
                                    }
                                    break;
                                }
                            }
                        // this.addAnimationClass()
                        // this.goToIndex(this.currentIndex())
                        // setTimeout(() => {
                        // 	this.removeAnimationClass()
                        // }, this.options.animation.animationTime)
                        // e.gesture.srcEvent.preventDefault()
                    }
                });
                return sliderManager;
            }
        });
    };
    NgxCarouselComponent.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: Renderer2 },
        { type: NgZone }
    ]; };
    __decorate([
        ViewChild('sliderElement', { static: false }),
        __metadata("design:type", ElementRef)
    ], NgxCarouselComponent.prototype, "sliderElement", void 0);
    __decorate([
        ViewChild('prevElement', { static: false }),
        __metadata("design:type", ElementRef)
    ], NgxCarouselComponent.prototype, "btnPrevElement", void 0);
    __decorate([
        ViewChild('nextElement', { static: false }),
        __metadata("design:type", ElementRef)
    ], NgxCarouselComponent.prototype, "btnNextElement", void 0);
    __decorate([
        ViewChild('progressElement', { static: false }),
        __metadata("design:type", ElementRef)
    ], NgxCarouselComponent.prototype, "progressContainerElement", void 0);
    __decorate([
        ContentChildren(NgxCarouselItemDirective, { read: ElementRef, descendants: true }),
        __metadata("design:type", QueryList)
    ], NgxCarouselComponent.prototype, "carouselItems", void 0);
    __decorate([
        ContentChild('carouselPrev', { static: false }),
        __metadata("design:type", TemplateRef)
    ], NgxCarouselComponent.prototype, "contentPrev", void 0);
    __decorate([
        ContentChild('carouselNext', { static: false }),
        __metadata("design:type", TemplateRef)
    ], NgxCarouselComponent.prototype, "contentNext", void 0);
    __decorate([
        ContentChild('carouselDot', { static: false }),
        __metadata("design:type", TemplateRef)
    ], NgxCarouselComponent.prototype, "dotElm", void 0);
    __decorate([
        ContentChild('carouselProgress', { static: false }),
        __metadata("design:type", TemplateRef)
    ], NgxCarouselComponent.prototype, "progressElm", void 0);
    __decorate([
        ContentChild('infiniteContainer', { static: false, read: ViewContainerRef }),
        __metadata("design:type", ViewContainerRef)
    ], NgxCarouselComponent.prototype, "infiniteContainer", void 0);
    __decorate([
        ContentChild('carouselContent', { static: false }),
        __metadata("design:type", TemplateRef)
    ], NgxCarouselComponent.prototype, "contentContent", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], NgxCarouselComponent.prototype, "current", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], NgxCarouselComponent.prototype, "currentChange", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], NgxCarouselComponent.prototype, "data", void 0);
    __decorate([
        Input(),
        __metadata("design:type", ngxLightOptions)
    ], NgxCarouselComponent.prototype, "options", void 0);
    __decorate([
        HostListener('window:resize'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], NgxCarouselComponent.prototype, "onResize", null);
    __decorate([
        HostListener('mouseover'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], NgxCarouselComponent.prototype, "hover", null);
    __decorate([
        HostListener('mouseout'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], NgxCarouselComponent.prototype, "unhover", null);
    NgxCarouselComponent = __decorate([
        Component({
            selector: 'ngx-light-carousel',
            template: "<div #sliderElement class=\"carousel\">\n\t<!-- Carousel Content -->\n\t<ng-content class=\"content\" select=\"[ngx-light-carousel-container]\"> </ng-content>\n</div>\n<!-- Previous Slide -->\n<div *ngIf=\"options.arrows\" #prevElement (click)=\"click(prevSlide)\" class=\"direction left\">\n\t<ng-container *ngTemplateOutlet=\"contentPrev\"></ng-container>\n</div>\n<!-- Next Slide -->\n<div *ngIf=\"options.arrows\" #nextElement (click)=\"click(nextSlide)\" class=\"direction right\">\n\t<ng-container *ngTemplateOutlet=\"contentNext\"></ng-container>\n</div>\n<!-- Dots -->\n<div *ngIf=\"initialized && options.indicators && dots?.length > 1\" class=\"indicators\">\n\t<li *ngFor=\"let dot of dots; let i = index\" (click)=\"scrollToIndex(i)\" [ngClass]=\"{ active: current == i }\">\n\t\t<ng-container *ngTemplateOutlet=\"dotElm\"> </ng-container>\n\t</li>\n</div>\n<!-- Progress -->\n<div *ngIf=\"progressElm && options.autoplay\" #progressElement>\n\t<ng-container *ngTemplateOutlet=\"progressElm\"> </ng-container>\n</div>\n<!-- Mask -->\n<div class=\"mask\">\n\t<ng-container></ng-container>\n</div>\n",
            encapsulation: ViewEncapsulation.None,
            styles: [".transition *{transition:transform .2s ease-out!important}:host{position:relative}.wrapper{position:relative;overflow-x:hidden;overflow-y:auto}.panning img{pointer-events:none}.carousel{overflow-x:hidden;position:relative;width:100%;height:100%;padding-bottom:30px}.carousel .content{display:-ms-inline-flexbox;display:inline-flex}.content{-ms-touch-action:pan-y!important;touch-action:pan-y!important;-webkit-backface-visibility:hidden;backface-visibility:hidden;will-change:transform,opacity;transform:translate3d();perspective:1000;transform:translateZ(0)}.content article{width:100%;display:block}.content article img{width:100%;display:block;background-size:cover;background-position:center}.slide{will-change:transform,opacity;transform:translate3d();-webkit-backface-visibility:hidden;backface-visibility:hidden;transform:translateZ(0);perspective:1000}.direction{background-repeat:no-repeat;width:5%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:absolute;height:100%;cursor:pointer;background-size:50%;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;top:0;background-position:center center}.direction.left{left:0;background-image:url(\"data:image/svg+xml,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20x%3D%220px%22%20y%3D%220px%22%20style%3D%22transform%3A%20scale(-1%2C1)%22%20viewBox%3D%220%200%201000%201000%22%20enable-background%3D%22new%200%200%201000%201000%22%20xml%3Aspace%3D%22preserve%22%3E%0A%3Cmetadata%3E%20Svg%20Vector%20Icons%20%3A%20http%3A%2F%2Fwww.onlinewebfonts.com%2Ficon%20%3C%2Fmetadata%3E%0A%3Cg%3E%3Cpath%20d%3D%22M767.9%2C499.9L291.6%2C10l-59.4%2C61.3l416.6%2C428.7L232.1%2C928.7l59.5%2C61.3L767.9%2C499.9z%22%2F%3E%3C%2Fg%3E%0A%3C%2Fsvg%3E\")}.direction.right{right:0;background-image:url(data:image/svg+xml,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20x%3D%220px%22%20y%3D%220px%22%20viewBox%3D%220%200%201000%201000%22%20enable-background%3D%22new%200%200%201000%201000%22%20xml%3Aspace%3D%22preserve%22%3E%0A%3Cmetadata%3E%20Svg%20Vector%20Icons%20%3A%20http%3A%2F%2Fwww.onlinewebfonts.com%2Ficon%20%3C%2Fmetadata%3E%0A%3Cg%3E%3Cpath%20d%3D%22M767.9%2C499.9L291.6%2C10l-59.4%2C61.3l416.6%2C428.7L232.1%2C928.7l59.5%2C61.3L767.9%2C499.9z%22%2F%3E%3C%2Fg%3E%0A%3C%2Fsvg%3E)}.indicators{bottom:0;left:0;margin:0;padding:0;position:absolute;text-align:center;width:100%}.indicators li{cursor:pointer;display:inline-block;position:relative;margin:0 5px}.indicators li.active *{color:#000}.active .ball{background:#000;color:#000;opacity:1}.ball{width:10px;height:10px;border-radius:50%;background:#fff;border:2px solid #000}.grab{cursor:-webkit-grab;cursor:grab}.grabbing{cursor:-webkit-grabbing;cursor:grabbing}.mask{pointer-events:none;position:absolute;left:0;top:0;right:0;bottom:0}"]
        }),
        __param(0, Inject(PLATFORM_ID)),
        __metadata("design:paramtypes", [Object, Renderer2, NgZone])
    ], NgxCarouselComponent);
    return NgxCarouselComponent;
}());
export { NgxCarouselComponent };
//# sourceMappingURL=data:application/json;base64,