export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"pdf-viewer-application.js","sourceRoot":"","sources":["../../../../../projects/ngx-extended-pdf-viewer/src/lib/options/pdf-viewer-application.ts"],"names":[],"mappings":"","sourcesContent":["import { OptionalContentConfig } from './optional_content_config';\nimport { PasswordPrompt } from './password-prompt';\nimport { AnnotationStorage, PrintAnnotationStorage } from './pdf-annotation-storage';\nimport { IEventBus } from './pdf-event-bus';\nimport { PageViewport } from './pdf-page-view-port';\nimport { IPDFViewer, PageViewModeType } from './pdf-viewer';\nimport { IPDFViewerAppConfig } from './pdf-viewer-app-config';\n\nexport interface IWebL10n {\n  get(key: string, args: any, fallbackString: string): string;\n}\n\nexport interface ViewHistory {\n  get(name: string, defaultValue?: string): Promise<string>;\n}\n\n/**\n * Page text content.\n */\nexport type TextContent = {\n  /**\n   * - Array of\n   * {@link TextItem } and {@link TextMarkedContent } objects. TextMarkedContent\n   * items are included when includeMarkedContent is true.\n   */\n  items: Array<TextItem | TextMarkedContent>;\n};\n\nexport interface FindController {\n  _pageMatches: Array<any>;\n  _pageMatchesColor: Array<number>;\n  _pageMatchesLength: Array<number>;\n  pageViewMode: PageViewModeType;\n}\n\nexport interface Metadata {\n  getRaw(): any;\n  get(name: any): any;\n  getAll(): any;\n  has(name: any): any;\n}\n\nexport interface MessageHandler {\n  sourceName: any;\n  targetName: any;\n  comObj: any;\n  callbackId: number;\n  streamId: number;\n  streamSinks: any;\n  streamControllers: any;\n  callbackCapabilities: any;\n  actionHandler: any;\n  on(actionName: any, handler: any): void;\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   */\n  send(actionName: string, data: JSON, transfers?: any[] | undefined): void;\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expects that the other side will callback with the response.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {Promise} Promise to be resolved with response data.\n   */\n  sendWithPromise(actionName: string, data: JSON, transfers?: any[] | undefined): Promise<any>;\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expect that the other side will callback to signal 'start_complete'.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Object} queueingStrategy - Strategy to signal backpressure based on\n   *                 internal queue.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {ReadableStream} ReadableStream to read data in chunks.\n   */\n  sendWithStream(actionName: string, data: JSON, queueingStrategy: Object, transfers?: any[] | undefined): ReadableStream;\n\n  destroy(): void;\n}\n\nexport interface PDFWorker {\n  name: any;\n  destroyed: boolean;\n  verbosity: number;\n\n  /**\n   * Promise for worker initialization completion.\n   * @type {Promise<void>}\n   */\n  get promise(): Promise<void>;\n  /**\n   * The current `workerPort`, when it exists.\n   * @type {Worker}\n   */\n  get port(): Worker;\n  /**\n   * The current MessageHandler-instance.\n   * @type {MessageHandler}\n   */\n  get messageHandler(): MessageHandler;\n  _initializeFromPort(port: any): void;\n  _initialize(): void;\n  _setupFakeWorker(): void;\n  /**\n   * Destroys the worker instance.\n   */\n  destroy(): void;\n}\n\n/**\n * Document initialization / loading parameters object.\n */\nexport type DocumentInitParameters = {\n  /**\n   * - The URL of the PDF.\n   */\n  url?: string | URL | undefined;\n  /**\n   * - Binary PDF data.\n   * Use TypedArrays (Uint8Array) to improve the memory usage. If PDF data is\n   * BASE64-encoded, use `atob()` to convert it to a binary string first.\n   *\n   * NOTE: If TypedArrays are used they will generally be transferred to the\n   * worker-thread. This will help reduce main-thread memory usage, however\n   * it will take ownership of the TypedArrays.\n   */\n  data?: ArrayBuffer | ArrayBufferView | undefined;\n  /**\n   * - Basic authentication headers.\n   */\n  httpHeaders?: Object | undefined;\n  /**\n   * - Indicates whether or not\n   * cross-site Access-Control requests should be made using credentials such\n   * as cookies or authorization headers. The default is `false`.\n   */\n  withCredentials?: boolean | undefined;\n  /**\n   * - For decrypting password-protected PDFs.\n   */\n  password?: string | undefined;\n  /**\n   * - The PDF file length. It's used for progress\n   * reports and range requests operations.\n   */\n  length?: number | undefined;\n  /**\n   * - Allows for using a custom range\n   * transport implementation.\n   */\n  range?: any | undefined;\n  /**\n   * - Specify maximum number of bytes fetched\n   * per range request. The default value is {@link DEFAULT_RANGE_CHUNK_SIZE }.\n   */\n  rangeChunkSize?: number | undefined;\n  /**\n   * - The worker that will be used for loading and\n   * parsing the PDF data.\n   */\n  worker?: PDFWorker | undefined;\n  /**\n   * - Controls the logging level; the constants\n   * from {@link VerbosityLevel } should be used.\n   */\n  verbosity?: number | undefined;\n  /**\n   * - The base URL of the document, used when\n   * attempting to recover valid absolute URLs for annotations, and outline\n   * items, that (incorrectly) only specify relative URLs.\n   */\n  docBaseUrl?: string | undefined;\n  /**\n   * - The URL where the predefined Adobe CMaps are\n   * located. Include the trailing slash.\n   */\n  cMapUrl?: string | undefined;\n  /**\n   * - Specifies if the Adobe CMaps are binary\n   * packed or not. The default value is `true`.\n   */\n  cMapPacked?: boolean | undefined;\n  /**\n   * - The factory that will be used when\n   * reading built-in CMap files. Providing a custom factory is useful for\n   * environments without Fetch API or `XMLHttpRequest` support, such as\n   * Node.js. The default value is {DOMCMapReaderFactory}.\n   */\n  CMapReaderFactory?: Object | undefined;\n  /**\n   * - When `true`, fonts that aren't\n   * embedded in the PDF document will fallback to a system font.\n   * The default value is `true` in web environments and `false` in Node.js;\n   * unless `disableFontFace === true` in which case this defaults to `false`\n   * regardless of the environment (to prevent completely broken fonts).\n   */\n  useSystemFonts?: boolean | undefined;\n  /**\n   * - The URL where the standard font\n   * files are located. Include the trailing slash.\n   */\n  standardFontDataUrl?: string | undefined;\n  /**\n   * - The factory that will be used\n   * when reading the standard font files. Providing a custom factory is useful\n   * for environments without Fetch API or `XMLHttpRequest` support, such as\n   * Node.js. The default value is {DOMStandardFontDataFactory}.\n   */\n  StandardFontDataFactory?: Object | undefined;\n  /**\n   * - Enable using the Fetch API in the\n   * worker-thread when reading CMap and standard font files. When `true`,\n   * the `CMapReaderFactory` and `StandardFontDataFactory` options are ignored.\n   * The default value is `true` in web environments and `false` in Node.js.\n   */\n  useWorkerFetch?: boolean | undefined;\n  /**\n   * - Reject certain promises, e.g.\n   * `getOperatorList`, `getTextContent`, and `RenderTask`, when the associated\n   * PDF data cannot be successfully parsed, instead of attempting to recover\n   * whatever possible of the data. The default value is `false`.\n   */\n  stopAtErrors?: boolean | undefined;\n  /**\n   * - The maximum allowed image size in total\n   * pixels, i.e. width * height. Images above this value will not be rendered.\n   * Use -1 for no limit, which is also the default value.\n   */\n  maxImageSize?: number | undefined;\n  /**\n   * - Determines if we can evaluate strings\n   * as JavaScript. Primarily used to improve performance of font rendering, and\n   * when parsing PDF functions. The default value is `true`.\n   */\n  isEvalSupported?: boolean | undefined;\n  /**\n   * - Determines if we can use\n   * `OffscreenCanvas` in the worker. Primarily used to improve performance of\n   * image conversion/rendering.\n   * The default value is `true` in web environments and `false` in Node.js.\n   */\n  isOffscreenCanvasSupported?: boolean | undefined;\n  /**\n   * - By default fonts are converted to\n   * OpenType fonts and loaded via the Font Loading API or `@font-face` rules.\n   * If disabled, fonts will be rendered using a built-in font renderer that\n   * constructs the glyphs with primitive path commands.\n   * The default value is `false` in web environments and `true` in Node.js.\n   */\n  disableFontFace?: boolean | undefined;\n  /**\n   * - Include additional properties,\n   * which are unused during rendering of PDF documents, when exporting the\n   * parsed font data from the worker-thread. This may be useful for debugging\n   * purposes (and backwards compatibility), but note that it will lead to\n   * increased memory usage. The default value is `false`.\n   */\n  fontExtraProperties?: boolean | undefined;\n  /**\n   * - Render Xfa forms if any.\n   * The default value is `false`.\n   */\n  enableXfa?: boolean | undefined;\n  /**\n   * - Specify an explicit document\n   * context to create elements with and to load resources, such as fonts,\n   * into. Defaults to the current document.\n   */\n  ownerDocument?: HTMLDocument | undefined;\n  /**\n   * - Disable range request loading of PDF\n   * files. When enabled, and if the server supports partial content requests,\n   * then the PDF will be fetched in chunks. The default value is `false`.\n   */\n  disableRange?: boolean | undefined;\n  /**\n   * - Disable streaming of PDF file data.\n   * By default PDF.js attempts to load PDF files in chunks. The default value\n   * is `false`.\n   */\n  disableStream?: boolean | undefined;\n  /**\n   * - Disable pre-fetching of PDF file\n   * data. When range requests are enabled PDF.js will automatically keep\n   * fetching more data even if it isn't needed to display the current page.\n   * The default value is `false`.\n   *\n   * NOTE: It is also necessary to disable streaming, see above, in order for\n   * disabling of pre-fetching to work correctly.\n   */\n  disableAutoFetch?: boolean | undefined;\n  /**\n   * - Enables special hooks for debugging PDF.js\n   * (see `web/debugger.js`). The default value is `false`.\n   */\n  pdfBug?: boolean | undefined;\n};\nexport type OnProgressParameters = {\n  /**\n   * - Currently loaded number of bytes.\n   */\n  loaded: number;\n  /**\n   * - Total number of bytes in the PDF file.\n   */\n  total: number;\n};\n\n/**\n * Page annotation parameters.\n */\nexport type GetAnnotationsParameters = {\n  /**\n   * - Determines the annotations that are fetched,\n   * can be 'display' (viewable annotations), 'print' (printable annotations),\n   * or 'any' (all annotations). The default value is 'display'.\n   */\n  intent?: string | undefined;\n};\n\nexport type TextItem = {\n  /**\n   * - Text content.\n   */\n  str: string;\n  /**\n   * - Text direction: 'ttb', 'ltr' or 'rtl'.\n   */\n  dir: string;\n  /**\n   * - Transformation matrix.\n   */\n  transform: Array<any>;\n  /**\n   * - Width in device space.\n   */\n  width: number;\n  /**\n   * - Height in device space.\n   */\n  height: number;\n  /**\n   * - Font name used by PDF.js for converted font.\n   */\n  fontName: string;\n  /**\n   * - Indicating if the text content is followed by a\n   * line-break.\n   */\n  hasEOL: boolean;\n};\n\n/**\n * Page text marked content part.\n */\nexport type TextMarkedContent = {\n  /**\n   * - Either 'beginMarkedContent',\n   * 'beginMarkedContentProps', or 'endMarkedContent'.\n   */\n  type: string;\n  /**\n   * - The marked content identifier. Only used for type\n   * 'beginMarkedContentProps'.\n   */\n  id: string;\n};\n\n/**\n * A PDF document and page is built of many objects. E.g. there are objects for\n * fonts, images, rendering code, etc. These objects may get processed inside of\n * a worker. This class implements some basic methods to manage these objects.\n */\ndeclare interface PDFObjects {\n  /**\n   * If called *without* callback, this returns the data of `objId` but the\n   * object needs to be resolved. If it isn't, this method throws.\n   *\n   * If called *with* a callback, the callback is called with the data of the\n   * object once the object is resolved. That means, if you call this method\n   * and the object is already resolved, the callback gets called right away.\n   *\n   * @param {string} objId\n   * @param {function} [callback]\n   * @returns {any}\n   */\n  get(objId: string, callback?: Function | undefined): any;\n  /**\n   * @param {string} objId\n   * @returns {boolean}\n   */\n  has(objId: string): boolean;\n  /**\n   * Resolves the object `objId` with optional `data`.\n   *\n   * @param {string} objId\n   * @param {any} [data]\n   */\n  resolve(objId: string, data?: any): void;\n  clear(): void;\n}\n\nexport type RefProxy = {\n  num: number;\n  gen: number;\n};\n\n/**\n * Page getViewport parameters.\n */\nexport type GetViewportParameters = {\n  /**\n   * - The desired scale of the viewport.\n   */\n  scale: number;\n  /**\n   * - The desired rotation, in degrees, of\n   * the viewport. If omitted it defaults to the page rotation.\n   */\n  rotation?: number | undefined;\n  /**\n   * - The horizontal, i.e. x-axis, offset.\n   * The default value is `0`.\n   */\n  offsetX?: number | undefined;\n  /**\n   * - The vertical, i.e. y-axis, offset.\n   * The default value is `0`.\n   */\n  offsetY?: number | undefined;\n  /**\n   * - If true, the y-axis will not be\n   * flipped. The default value is `false`.\n   */\n  dontFlip?: boolean | undefined;\n};\n\nexport interface PDFDateString {\n  /**\n   * Convert a PDF date string to a JavaScript `Date` object.\n   *\n   * The PDF date string format is described in section 7.9.4 of the official\n   * PDF 32000-1:2008 specification. However, in the PDF 1.7 reference (sixth\n   * edition) Adobe describes the same format including a trailing apostrophe.\n   * This syntax in incorrect, but Adobe Acrobat creates PDF files that contain\n   * them. We ignore all apostrophes as they are not necessary for date parsing.\n   *\n   * Moreover, Adobe Acrobat doesn't handle changing the date to universal time\n   * and doesn't use the user's time zone (effectively ignoring the HH' and mm'\n   * parts of the date string).\n   *\n   * @param {string} input\n   * @returns {Date|null}\n   */\n  // static toDateObject(input: string): Date | null;\n}\n\n/**\n * Page getTextContent parameters.\n */\nexport type getTextContentParameters = {\n  /**\n   * - Do not attempt to combine\n   * same line {@link TextItem }'s. The default value is `false`.\n   */\n  disableCombineTextItems: boolean;\n  /**\n   * - When true include marked\n   * content items in the items array of TextContent. The default is `false`.\n   */\n  includeMarkedContent?: boolean | undefined;\n};\n\n/**\n * Allows controlling of the rendering tasks.\n */\nexport interface RenderTask {\n  /**\n   * Callback for incremental rendering -- a function that will be called\n   * each time the rendering is paused.  To continue rendering call the\n   * function that is the first argument to the callback.\n   * @type {function}\n   */\n  onContinue: Function;\n  /**\n   * Promise for rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise(): Promise<void>;\n  /**\n   * Cancels the rendering task. If the task is currently rendering it will\n   * not be cancelled until graphics pauses with a timeout. The promise that\n   * this object extends will be rejected when cancelled.\n   *\n   * @param {number} [extraDelay]\n   */\n  cancel(extraDelay?: number | undefined): void;\n  /**\n   * Whether form fields are rendered separately from the main operatorList.\n   * @type {boolean}\n   */\n  get separateAnnots(): boolean;\n}\n\n/**\n * Page render parameters.\n */\nexport type RenderParameters = {\n  /**\n   * - A 2D context of a DOM Canvas object.\n   */\n  canvasContext: Object;\n  /**\n   * - Rendering viewport obtained by calling\n   * the `PDFPageProxy.getViewport` method.\n   */\n  viewport: PageViewport;\n  /**\n   * - Rendering intent, can be 'display', 'print',\n   * or 'any'. The default value is 'display'.\n   */\n  intent?: string | undefined;\n  /**\n   * Controls which annotations are rendered\n   * onto the canvas, for annotations with appearance-data; the values from\n   * {@link AnnotationMode } should be used. The following values are supported:\n   * - `AnnotationMode.DISABLE`, which disables all annotations.\n   * - `AnnotationMode.ENABLE`, which includes all possible annotations (thus\n   * it also depends on the `intent`-option, see above).\n   * - `AnnotationMode.ENABLE_FORMS`, which excludes annotations that contain\n   * interactive form elements (those will be rendered in the display layer).\n   * - `AnnotationMode.ENABLE_STORAGE`, which includes all possible annotations\n   * (as above) but where interactive form elements are updated with data\n   * from the {@link AnnotationStorage }-instance; useful e.g. for printing.\n   * The default value is `AnnotationMode.ENABLE`.\n   */\n  annotationMode?: number | undefined;\n  /**\n   * - Additional transform, applied just\n   * before viewport transform.\n   */\n  transform?: any[] | undefined;\n  /**\n   * - The factory instance that will be used\n   * when creating canvases. The default value is {new DOMCanvasFactory()}.\n   */\n  canvasFactory?: Object | undefined;\n  /**\n   * - Background to use for the canvas.\n   * Any valid `canvas.fillStyle` can be used: a `DOMString` parsed as CSS\n   * <color> value, a `CanvasGradient` object (a linear or radial gradient) or\n   * a `CanvasPattern` object (a repetitive image). The default value is\n   * 'rgb(255,255,255)'.\n   *\n   * NOTE: This option may be partially, or completely, ignored when the\n   * `pageColors`-option is used.\n   */\n  background?: string | Object | undefined;\n  /**\n   * - Overwrites background and foreground colors\n   * with user defined ones in order to improve readability in high contrast\n   * mode.\n   */\n  pageColors?: Object | undefined;\n  /**\n   * - Map some\n   * annotation ids with canvases used to render them.\n   */\n  annotationCanvasMap?: Map<string, HTMLCanvasElement> | undefined;\n  printAnnotationStorage?: PrintAnnotationStorage | undefined;\n\n  backgroundColorToReplace: string | undefined; // added by ngx-extended-pdf-viewer\n  optionalContentConfigPromise: Promise<unknown> | undefined; // added by ngx-extended-pdf-viewer?\n};\n\n/**\n * Structure tree node. The root node will have a role \"Root\".\n */\nexport type StructTreeNode = {\n  /**\n   * - Array of\n   * {@link StructTreeNode } and {@link StructTreeContent } objects.\n   */\n  children: Array<StructTreeNode | StructTreeContent>;\n  /**\n   * - element's role, already mapped if a role map exists\n   * in the PDF.\n   */\n  role: string;\n};\n/**\n * Structure tree content.\n */\nexport type StructTreeContent = {\n  /**\n   * - either \"content\" for page and stream structure\n   * elements or \"object\" for object references.\n   */\n  type: string;\n  /**\n   * - unique id that will map to the text layer.\n   */\n  id: string;\n};\n\nexport interface PDFPageProxy {\n  /** @type {PDFObjects} */\n  commonObjs: PDFObjects;\n  objs: PDFObjects;\n  _bitmaps: Set<any>;\n  cleanupAfterRender: boolean;\n  pendingCleanup: boolean;\n  _intentStates: Map<any, any>;\n  destroyed: boolean;\n  /**\n   * @type {number} Page number of the page. First page is 1.\n   */\n  get pageNumber(): number;\n  /**\n   * @type {number} The number of degrees the page is rotated clockwise.\n   */\n  get rotate(): number;\n  /**\n   * @type {RefProxy | null} The reference that points to this page.\n   */\n  get ref(): RefProxy | null;\n  /**\n   * @type {number} The default size of units in 1/72nds of an inch.\n   */\n  get userUnit(): number;\n  /**\n   * @type {Array<number>} An array of the visible portion of the PDF page in\n   *   user space units [x1, y1, x2, y2].\n   */\n  get view(): number[];\n  /**\n   * @param {GetViewportParameters} params - Viewport parameters.\n   * @returns {PageViewport} Contains 'width' and 'height' properties\n   *   along with transforms required for rendering.\n   */\n  getViewport({ scale, rotation, offsetX, offsetY, dontFlip }?: GetViewportParameters): PageViewport;\n  /**\n   * @param {GetAnnotationsParameters} params - Annotation parameters.\n   * @returns {Promise<Array<any>>} A promise that is resolved with an\n   *   {Array} of the annotation objects.\n   */\n  getAnnotations({ intent }?: GetAnnotationsParameters): Promise<Array<any>>;\n  /**\n   * @returns {Promise<Object>} A promise that is resolved with an\n   *   {Object} with JS actions.\n   */\n  getJSActions(): Promise<Object>;\n  /**\n   * @type {boolean} True if only XFA form.\n   */\n  get isPureXfa(): boolean;\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with a fake DOM object (a tree structure where elements\n   *   are {Object} with a name, attributes (class, style, ...), value and\n   *   children, very similar to a HTML DOM tree), or `null` if no XFA exists.\n   */\n  getXfa(): Promise<Object | null>;\n  /**\n   * Begins the process of rendering a page to the desired context.\n   *\n   * @param {RenderParameters} params - Page render parameters.\n   * @returns {RenderTask} An object that contains a promise that is\n   *   resolved when the page finishes rendering.\n   */\n  render({\n    canvasContext,\n    viewport,\n    intent,\n    annotationMode,\n    transform,\n    canvasFactory,\n    background,\n    backgroundColorToReplace,\n    optionalContentConfigPromise,\n    annotationCanvasMap,\n    pageColors,\n    printAnnotationStorage,\n  }: RenderParameters): RenderTask;\n\n  /**\n   * NOTE: All occurrences of whitespace will be replaced by\n   * standard spaces (0x20).\n   *\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {ReadableStream} Stream for reading text content chunks.\n   */\n  streamTextContent({ disableCombineTextItems, includeMarkedContent }?: getTextContentParameters): ReadableStream;\n  /**\n   * NOTE: All occurrences of whitespace will be replaced by\n   * standard spaces (0x20).\n   *\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {Promise<TextContent>} A promise that is resolved with a\n   *   {@link TextContent} object that represents the page's text content.\n   */\n  getTextContent(params?: getTextContentParameters): Promise<TextContent>;\n  /**\n   * @returns {Promise<StructTreeNode>} A promise that is resolved with a\n   *   {@link StructTreeNode} object that represents the page's structure tree,\n   *   or `null` when no structure tree is present for the current page.\n   */\n  getStructTree(): Promise<StructTreeNode>;\n  /**\n   * Destroys the page object.\n   * @private\n   */\n  _destroy;\n  /**\n   * Cleans up resources allocated by the page.\n   *\n   * @param {boolean} [resetStats] - Reset page stats, if enabled.\n   *   The default value is `false`.\n   * @returns {boolean} Indicates if clean-up was successfully run.\n   */\n  cleanup(resetStats?: boolean | undefined): boolean;\n  /**\n   * Attempts to clean up if rendering is in a state where that's possible.\n   * @private\n   */\n  _tryCleanup;\n  /**\n   * @private\n   */\n  _startRenderPage;\n  /**\n   * @private\n   */\n  _renderPageChunk;\n  /**\n   * @private\n   */\n  _pumpOperatorList;\n  /**\n   * @private\n   */\n  _abortOperatorList;\n  /**\n   * @type {Object} Returns page stats, if enabled; returns `null` otherwise.\n   */\n  get stats(): Object;\n}\n\n/**\n * The loading task controls the operations required to load a PDF document\n * (such as network requests) and provides a way to listen for completion,\n * after which individual pages can be rendered.\n */\nexport interface PDFDocumentLoadingTask {\n  /**\n   * Unique identifier for the document loading task.\n   * @type {string}\n   */\n  docId: string;\n  /**\n   * Whether the loading task is destroyed or not.\n   * @type {boolean}\n   */\n  destroyed: boolean;\n  /**\n   * Callback to request a password if a wrong or no password was provided.\n   * The callback receives two parameters: a function that should be called\n   * with the new password, and a reason (see {@link PasswordResponses}).\n   * @type {function}\n   */\n  onPassword: Function;\n  /**\n   * Callback to be able to monitor the loading progress of the PDF file\n   * (necessary to implement e.g. a loading bar).\n   * The callback receives an {@link OnProgressParameters} argument.\n   * @type {function}\n   */\n  onProgress: Function;\n  /**\n   * Callback for when an unsupported feature is used in the PDF document.\n   * The callback receives an {@link UNSUPPORTED_FEATURES} argument.\n   * @type {function}\n   */\n  set onUnsupportedFeature(arg: Function | null);\n  /**\n   * @type {function | null} The current callback used with unsupported\n   * features.\n   */\n  get onUnsupportedFeature(): Function | null;\n  /**\n   * Promise for document loading task completion.\n   * @type {Promise<PDFDocumentProxy>}\n   */\n  get promise(): Promise<PDFDocumentProxy>;\n  /**\n   * Abort all network requests and destroy the worker.\n   * @returns {Promise<void>} A promise that is resolved when destruction is\n   *   completed.\n   */\n  destroy(): Promise<void>;\n}\nexport interface PDFDocumentProxy {\n  _pdfInfo: any;\n  _transport: any;\n  /**\n   * @type {AnnotationStorage} Storage for annotation data in forms.\n   */\n  get annotationStorage(): AnnotationStorage;\n  /**\n   * @type {number} Total number of pages in the PDF file.\n   */\n  get numPages(): number;\n  /**\n   * @type {Array<string, string|null>} A (not guaranteed to be) unique ID to\n   *   identify the PDF document.\n   *   NOTE: The first element will always be defined for all PDF documents,\n   *   whereas the second element is only defined for *modified* PDF documents.\n   */\n  get fingerprints(): string[];\n  /**\n   * @type {boolean} True if only XFA form.\n   */\n  get isPureXfa(): boolean;\n  /**\n   * NOTE: This is (mostly) intended to support printing of XFA forms.\n   *\n   * @type {Object | null} An object representing a HTML tree structure\n   *   to render the XFA, or `null` when no XFA form exists.\n   */\n  get allXfaHtml(): Object | null;\n  /**\n   * @param {number} pageNumber - The page number to get. The first page is 1.\n   * @returns {Promise<PDFPageProxy>} A promise that is resolved with\n   *   a {@link PDFPageProxy} object.\n   */\n  getPage(pageNumber: number): Promise<PDFPageProxy>;\n  /**\n   * @param {RefProxy} ref - The page reference.\n   * @returns {Promise<number>} A promise that is resolved with the page index,\n   *   starting from zero, that is associated with the reference.\n   */\n  getPageIndex(ref: RefProxy): Promise<number>;\n  /**\n   * @returns {Promise<Object<string, Array<any>>>} A promise that is resolved\n   *   with a mapping from named destinations to references.\n   *\n   * This can be slow for large documents. Use `getDestination` instead.\n   */\n  getDestinations(): Promise<{\n    [x: string]: Array<any>;\n  }>;\n  /**\n   * @param {string} id - The named destination to get.\n   * @returns {Promise<Array<any> | null>} A promise that is resolved with all\n   *   information of the given named destination, or `null` when the named\n   *   destination is not present in the PDF file.\n   */\n  getDestination(id: string): Promise<Array<any> | null>;\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} containing the page labels that correspond to the page\n   *   indexes, or `null` when no page labels are present in the PDF file.\n   */\n  getPageLabels(): Promise<Array<string> | null>;\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page layout name.\n   */\n  getPageLayout(): Promise<string>;\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page mode name.\n   */\n  getPageMode(): Promise<string>;\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with an\n   *   {Object} containing the viewer preferences, or `null` when no viewer\n   *   preferences are present in the PDF file.\n   */\n  getViewerPreferences(): Promise<Object | null>;\n  /**\n   * @returns {Promise<any | null>} A promise that is resolved with an {Array}\n   *   containing the destination, or `null` when no open action is present\n   *   in the PDF.\n   */\n  getOpenAction(): Promise<any | null>;\n  /**\n   * @returns {Promise<any>} A promise that is resolved with a lookup table\n   *   for mapping named attachments to their content.\n   */\n  getAttachments(): Promise<any>;\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} of all the JavaScript strings in the name tree, or `null`\n   *   if no JavaScript exists.\n   */\n  getJavaScript(): Promise<Array<string> | null>;\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with the JavaScript actions:\n   *     - from the name tree (like getJavaScript);\n   *     - from A or AA entries in the catalog dictionary.\n   *   , or `null` if no JavaScript exists.\n   */\n  getJSActions(): Promise<Object | null>;\n  /**\n   * @typedef {Object} OutlineNode\n   * @property {string} title\n   * @property {boolean} bold\n   * @property {boolean} italic\n   * @property {Uint8ClampedArray} color - The color in RGB format to use for\n   *   display purposes.\n   * @property {string | Array<any> | null} dest\n   * @property {string | null} url\n   * @property {string | undefined} unsafeUrl\n   * @property {boolean | undefined} newWindow\n   * @property {number | undefined} count\n   * @property {Array<OutlineNode>} items\n   */\n  /**\n   * @returns {Promise<Array<OutlineNode>>} A promise that is resolved with an\n   *   {Array} that is a tree outline (if it has one) of the PDF file.\n   */\n  getOutline(): Promise<\n    {\n      title: string;\n      bold: boolean;\n      italic: boolean;\n      /**\n       * - The color in RGB format to use for\n       * display purposes.\n       */\n      color: Uint8ClampedArray;\n      dest: string | Array<any> | null;\n      url: string | null;\n      unsafeUrl: string | undefined;\n      newWindow: boolean | undefined;\n      count: number | undefined;\n      items: any[];\n    }[]\n  >;\n  /**\n   * @returns {Promise<OptionalContentConfig>} A promise that is resolved with\n   *   an {@link OptionalContentConfig} that contains all the optional content\n   *   groups (assuming that the document has any).\n   */\n  getOptionalContentConfig(): Promise<OptionalContentConfig>;\n  /**\n   * @returns {Promise<Array<number> | null>} A promise that is resolved with\n   *   an {Array} that contains the permission flags for the PDF document, or\n   *   `null` when no permissions are present in the PDF file.\n   */\n  getPermissions(): Promise<Array<number> | null>;\n  /**\n   * @returns {Promise<{ info: Object, metadata: Metadata }>} A promise that is\n   *   resolved with an {Object} that has `info` and `metadata` properties.\n   *   `info` is an {Object} filled with anything available in the information\n   *   dictionary and similarly `metadata` is a {Metadata} object with\n   *   information from the metadata section of the PDF.\n   */\n  getMetadata(): Promise<{\n    info: Object;\n    metadata: Metadata;\n  }>;\n  /**\n   * @typedef {Object} MarkInfo\n   * Properties correspond to Table 321 of the PDF 32000-1:2008 spec.\n   * @property {boolean} Marked\n   * @property {boolean} UserProperties\n   * @property {boolean} Suspects\n   */\n  /**\n   * @returns {Promise<MarkInfo | null>} A promise that is resolved with\n   *   a {MarkInfo} object that contains the MarkInfo flags for the PDF\n   *   document, or `null` when no MarkInfo values are present in the PDF file.\n   */\n  getMarkInfo(): Promise<{\n    Marked: boolean;\n    UserProperties: boolean;\n    Suspects: boolean;\n  } | null>;\n  /**\n   * @returns {Promise<Uint8Array>} A promise that is resolved with a\n   *   {Uint8Array} containing the raw data of the PDF document.\n   */\n  getData(): Promise<Uint8Array>;\n  /**\n   * @returns {Promise<Uint8Array>} A promise that is resolved with a\n   *   {Uint8Array} containing the full data of the saved document.\n   */\n  saveDocument(): Promise<Uint8Array>;\n  /**\n   * @returns {Promise<{ length: number }>} A promise that is resolved when the\n   *   document's data is loaded. It is resolved with an {Object} that contains\n   *   the `length` property that indicates size of the PDF data in bytes.\n   */\n  getDownloadInfo(): Promise<{\n    length: number;\n  }>;\n  /**\n   * Cleans up resources allocated by the document on both the main and worker\n   * threads.\n   *\n   * NOTE: Do not, under any circumstances, call this method when rendering is\n   * currently ongoing since that may lead to rendering errors.\n   *\n   * @param {boolean} [keepLoadedFonts] - Let fonts remain attached to the DOM.\n   *   NOTE: This will increase persistent memory usage, hence don't use this\n   *   option unless absolutely necessary. The default value is `false`.\n   * @returns {Promise} A promise that is resolved when clean-up has finished.\n   */\n  cleanup(keepLoadedFonts?: boolean | undefined): Promise<any>;\n  /**\n   * Destroys the current document instance and terminates the worker.\n   */\n  destroy(): Promise<void>;\n  /**\n   * @type {DocumentInitParameters} A subset of the current\n   *   {DocumentInitParameters}, which are needed in the viewer.\n   */\n  get loadingParams(): DocumentInitParameters;\n  /**\n   * @type {PDFDocumentLoadingTask} The loadingTask for the current document.\n   */\n  get loadingTask(): PDFDocumentLoadingTask;\n  /**\n   * @returns {Promise<Object<string, Array<Object>> | null>} A promise that is\n   *   resolved with an {Object} containing /AcroForm field data for the JS\n   *   sandbox, or `null` when no field data is present in the PDF file.\n   */\n  getFieldObjects(): Promise<{\n    [x: string]: Array<Object>;\n  } | null>;\n  /**\n   * @returns {Promise<boolean>} A promise that is resolved with `true`\n   *   if some /AcroForm fields have JavaScript actions.\n   */\n  hasJSActions(): Promise<boolean>;\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with an\n   *   {Array<string>} containing IDs of annotations that have a calculation\n   *   action, or `null` when no such annotations are present in the PDF file.\n   */\n  getCalculationOrderIds(): Promise<Array<string> | null>;\n}\n\nexport interface IPDFViewerApplication {\n  pdfThumbnailViewer: any;\n  pdfDocumentProperties: any;\n  appConfig: IPDFViewerAppConfig;\n  _boundEvents: any;\n  enablePrint: boolean;\n  eventBus: IEventBus;\n  findBar: any;\n  findController: FindController;\n  isViewerEmbedded: boolean;\n  l10n: IWebL10n;\n  onError: (error: Error) => void;\n  page: number;\n  pagesCount: number;\n  passwordPrompt: PasswordPrompt;\n  pdfDocument: PDFDocumentProxy;\n  pdfLinkService: any /* PDFLinkService;*/;\n  pdfSidebar: any;\n  pdfViewer: IPDFViewer;\n  printKeyDownListener: undefined | ((this: Window, ev: KeyboardEvent) => any);\n  sidebarViewOnLoad: 0 | 1;\n  spreadModeOnLoad: 0 | 1 | 2;\n  secondaryToolbar: any;\n  store: ViewHistory;\n  toolbar: any;\n  viewer: HTMLDivElement;\n\n  _cleanup(): void;\n  close(): Promise<void>;\n  open(source: string | ArrayBuffer | { range: any } | any, options?: any): Promise<any>;\n  unbindEvents(): void;\n  unbindWindowEvents(): void;\n  export(): Promise<Blob>;\n}\n"]}