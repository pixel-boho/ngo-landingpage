import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import CONSTANTS from '../constants';
import { WINDOW_TOKEN } from './window.service';
import { ReplaySubject } from 'rxjs';
import { CheckoutOptions } from '../models';
import * as i0 from "@angular/core";
import * as i1 from "./window.service";
import * as i2 from "@angular/common";
export class CheckoutService {
    constructor(window, document) {
        this.window = window;
        this.document = document;
        this.openInPopup = true;
        this.isScriptLoaded = false;
        this.isScriptLoading = false;
        this.checkoutJsContainerId = CONSTANTS.IDS.CHECKOUT_ELEMENT + (new Date()).getTime();
        this.checkoutJsInstanceSource$ = new ReplaySubject(1);
        this.checkoutJsInstance$ = this.checkoutJsInstanceSource$.asObservable();
        this.setupCheckoutJs = () => {
            const checkoutJsInstance = this.getCheckoutJsObj();
            if (checkoutJsInstance && checkoutJsInstance.onLoad) {
                checkoutJsInstance.onLoad(() => {
                    this.isScriptLoaded = true;
                    this.isScriptLoading = false;
                    this.initializeCheckout();
                });
            }
        };
        this.initializeCheckout = () => {
            const checkoutJsInstance = this.getCheckoutJsObj();
            if (checkoutJsInstance && checkoutJsInstance.init && checkoutJsInstance.invoke) {
                checkoutJsInstance
                    .init(Object.assign({}, this.config, { root: this.openInPopup ? '' : `#${this.checkoutJsContainerId}` }))
                    .then(_ => {
                    this.checkoutJsInstanceSource$.next(checkoutJsInstance);
                })
                    .catch((error) => {
                    console.error(CONSTANTS.ERRORS.INIT, error);
                });
            }
            else {
                console.error(CONSTANTS.ERRORS.INVALID_CHECKOUT_JS_INSTANCE);
            }
        };
    }
    init(config, options) {
        options = CheckoutOptions.from(options);
        const merchantId = config && config.merchant && config.merchant.mid;
        if (merchantId) {
            const prevMerchantId = this.config && this.config.merchant && this.config.merchant.mid;
            this.config = config;
            this.openInPopup = options.openInPopup;
            if (options.checkoutJsInstance) {
                this.receivedCheckoutJsInstance = options.checkoutJsInstance;
                this.checkoutJsInstanceSource$.next(options.checkoutJsInstance);
            }
            if ((options.checkoutJsInstance || this.isScriptLoaded) && merchantId === prevMerchantId) {
                this.initializeCheckout();
                this.checkoutJsInstance$;
            }
            else if (!this.isScriptLoading || (prevMerchantId && merchantId !== prevMerchantId)) {
                this.loadCheckoutScript(merchantId, options.env);
            }
        }
        else {
            console.error(CONSTANTS.ERRORS.MERCHANT_ID_NOT_FOUND);
        }
    }
    loadCheckoutScript(merchantId, env) {
        this.isScriptLoaded = false;
        this.isScriptLoading = true;
        const scriptElement = this.document.createElement('script');
        scriptElement.async = true;
        scriptElement.src = CONSTANTS.HOSTS[env] + CONSTANTS.LINKS.CHECKOUT_JS_URL.concat(merchantId);
        scriptElement.type = 'application/javascript';
        scriptElement.onload = this.setupCheckoutJs;
        scriptElement.onError = () => {
            this.isScriptLoading = false;
        };
        this.document.body.appendChild(scriptElement);
    }
    getCheckoutJsObj() {
        const window = this.window;
        if (this.receivedCheckoutJsInstance) {
            return this.receivedCheckoutJsInstance;
        }
        if (window && window.Paytm && window.Paytm.CheckoutJS) {
            return window.Paytm.CheckoutJS;
        }
        console.warn(CONSTANTS.ERRORS.CHECKOUT_NOT_AVAILABLE);
        return null;
    }
    ngOnDestroy() {
        this.checkoutJsInstanceSource$.complete();
    }
}
CheckoutService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
CheckoutService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [WINDOW_TOKEN,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
CheckoutService.ngInjectableDef = i0.defineInjectable({ factory: function CheckoutService_Factory() { return new CheckoutService(i0.inject(i1.WINDOW_TOKEN), i0.inject(i2.DOCUMENT)); }, token: CheckoutService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,