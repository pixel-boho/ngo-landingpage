interface IStringDictionary {
    [key: string]: string;
}
export interface ICheckoutInstance {
    onLoad?: (fn: Function) => void;
    init?: (config: any) => Promise<any>;
    close?: () => void;
    invoke?: () => void;
    initLib?: (merchantId: string) => Promise<any>;
    PAYMODE?: IStringDictionary;
    FLOW?: IStringDictionary;
    TOKEN?: IStringDictionary;
    DEFERRED_EVENTS?: IStringDictionary;
    NOTIFY_MERCHANT_EVENTS?: IStringDictionary;
}
export declare type Env = 'STAGE' | 'PROD';
export declare class ICheckoutOptions {
    env?: Env;
    openInPopup?: boolean;
    checkoutJsInstance?: ICheckoutInstance;
}
export declare class CheckoutOptions implements ICheckoutOptions {
    env: Env;
    openInPopup?: boolean;
    checkoutJsInstance?: ICheckoutInstance;
    constructor(env: Env, openInPopup?: boolean, checkoutJsInstance?: ICheckoutInstance);
    static from(options: ICheckoutOptions): CheckoutOptions;
}
export {};
