(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('paytm-blink-checkout-angular', ['exports', 'rxjs', '@angular/core', '@angular/common'], factory) :
    (factory((global['paytm-blink-checkout-angular'] = {}),global.rxjs,global.ng.core,global.ng.common));
}(this, (function (exports,rxjs,i0,i2) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    var CONSTANTS = {
        PROJECT_NAME: 'Paytm Blink Checkout JS',
        ENV: {
            PROD: 'PROD',
            STAGE: 'STAGE'
        },
        HOSTS: {
            PROD: 'https://securegw.paytm.in',
            STAGE: 'https://securegw-stage.paytm.in'
        },
        LINKS: {
            CHECKOUT_JS_URL: '/merchantpgpui/checkoutjs/merchants/'
        },
        ERRORS: {
            INIT: 'An error during initialization!',
            INVOKE: 'An error during invoking!',
            MERCHANT_ID_NOT_FOUND: 'Please provide merchant id!',
            CHECKOUT_NOT_AVAILABLE: 'Checkout JS library not found. Please make sure you have included checkout js!',
            INVALID_CHECKOUT_JS_INSTANCE: 'Invalid instance provided!'
        },
        IDS: {
            CHECKOUT_ELEMENT: 'checkout-wrapper-'
        }
    };
    // Prefix error with project name
    Object.keys(CONSTANTS.ERRORS).forEach(function (errorCode) {
        CONSTANTS.ERRORS[errorCode] = CONSTANTS.PROJECT_NAME + ": " + CONSTANTS.ERRORS[errorCode];
    });

    var WINDOW_TOKEN = new i0.InjectionToken('Window', {
        providedIn: 'root',
        factory: function () { return window; }
    });

    var CheckoutOptions = /** @class */ (function () {
        function CheckoutOptions(env, openInPopup, checkoutJsInstance) {
            this.env = env;
            this.openInPopup = openInPopup;
            this.checkoutJsInstance = checkoutJsInstance;
        }
        CheckoutOptions.from = function (options) {
            options = options || {};
            var env = options.env || CONSTANTS.ENV.PROD;
            var openInPopup = typeof options.openInPopup === 'boolean' ? options.openInPopup : true;
            return new CheckoutOptions(env, openInPopup, options.checkoutJsInstance);
        };
        return CheckoutOptions;
    }());

    var CheckoutService = /** @class */ (function () {
        function CheckoutService(window, document) {
            var _this = this;
            this.window = window;
            this.document = document;
            this.openInPopup = true;
            this.isScriptLoaded = false;
            this.isScriptLoading = false;
            this.checkoutJsContainerId = CONSTANTS.IDS.CHECKOUT_ELEMENT + (new Date()).getTime();
            this.checkoutJsInstanceSource$ = new rxjs.ReplaySubject(1);
            this.checkoutJsInstance$ = this.checkoutJsInstanceSource$.asObservable();
            this.setupCheckoutJs = function () {
                var checkoutJsInstance = _this.getCheckoutJsObj();
                if (checkoutJsInstance && checkoutJsInstance.onLoad) {
                    checkoutJsInstance.onLoad(function () {
                        _this.isScriptLoaded = true;
                        _this.isScriptLoading = false;
                        _this.initializeCheckout();
                    });
                }
            };
            this.initializeCheckout = function () {
                var checkoutJsInstance = _this.getCheckoutJsObj();
                if (checkoutJsInstance && checkoutJsInstance.init && checkoutJsInstance.invoke) {
                    checkoutJsInstance
                        .init(__assign({}, _this.config, { root: _this.openInPopup ? '' : "#" + _this.checkoutJsContainerId }))
                        .then(function (_) {
                        _this.checkoutJsInstanceSource$.next(checkoutJsInstance);
                    })
                        .catch(function (error) {
                        console.error(CONSTANTS.ERRORS.INIT, error);
                    });
                }
                else {
                    console.error(CONSTANTS.ERRORS.INVALID_CHECKOUT_JS_INSTANCE);
                }
            };
        }
        CheckoutService.prototype.init = function (config, options) {
            options = CheckoutOptions.from(options);
            var merchantId = config && config.merchant && config.merchant.mid;
            if (merchantId) {
                var prevMerchantId = this.config && this.config.merchant && this.config.merchant.mid;
                this.config = config;
                this.openInPopup = options.openInPopup;
                if (options.checkoutJsInstance) {
                    this.receivedCheckoutJsInstance = options.checkoutJsInstance;
                    this.checkoutJsInstanceSource$.next(options.checkoutJsInstance);
                }
                if ((options.checkoutJsInstance || this.isScriptLoaded) && merchantId === prevMerchantId) {
                    this.initializeCheckout();
                    this.checkoutJsInstance$;
                }
                else if (!this.isScriptLoading || (prevMerchantId && merchantId !== prevMerchantId)) {
                    this.loadCheckoutScript(merchantId, options.env);
                }
            }
            else {
                console.error(CONSTANTS.ERRORS.MERCHANT_ID_NOT_FOUND);
            }
        };
        CheckoutService.prototype.loadCheckoutScript = function (merchantId, env) {
            var _this = this;
            this.isScriptLoaded = false;
            this.isScriptLoading = true;
            var scriptElement = this.document.createElement('script');
            scriptElement.async = true;
            scriptElement.src = CONSTANTS.HOSTS[env] + CONSTANTS.LINKS.CHECKOUT_JS_URL.concat(merchantId);
            scriptElement.type = 'application/javascript';
            scriptElement.onload = this.setupCheckoutJs;
            scriptElement.onError = function () {
                _this.isScriptLoading = false;
            };
            this.document.body.appendChild(scriptElement);
        };
        CheckoutService.prototype.getCheckoutJsObj = function () {
            var window = this.window;
            if (this.receivedCheckoutJsInstance) {
                return this.receivedCheckoutJsInstance;
            }
            if (window && window.Paytm && window.Paytm.CheckoutJS) {
                return window.Paytm.CheckoutJS;
            }
            console.warn(CONSTANTS.ERRORS.CHECKOUT_NOT_AVAILABLE);
            return null;
        };
        CheckoutService.prototype.ngOnDestroy = function () {
            this.checkoutJsInstanceSource$.complete();
        };
        CheckoutService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        CheckoutService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Inject, args: [WINDOW_TOKEN,] }] },
                { type: undefined, decorators: [{ type: i0.Inject, args: [i2.DOCUMENT,] }] }
            ];
        };
        CheckoutService.ngInjectableDef = i0.defineInjectable({ factory: function CheckoutService_Factory() { return new CheckoutService(i0.inject(WINDOW_TOKEN), i0.inject(i2.DOCUMENT)); }, token: CheckoutService, providedIn: "root" });
        return CheckoutService;
    }());

    var CheckoutComponent = /** @class */ (function () {
        function CheckoutComponent(checkoutService) {
            this.checkoutService = checkoutService;
        }
        CheckoutComponent.prototype.ngAfterViewInit = function () {
            this.subs = this.checkoutService
                .checkoutJsInstance$
                .subscribe(this.invoke);
        };
        CheckoutComponent.prototype.invoke = function (checkoutJsInstance) {
            if (checkoutJsInstance && checkoutJsInstance.invoke) {
                try {
                    checkoutJsInstance.invoke();
                }
                catch (error) {
                    console.error(CONSTANTS.ERRORS.INVOKE, error);
                }
            }
        };
        CheckoutComponent.prototype.ngOnDestroy = function () {
            if (this.subs) {
                this.subs.unsubscribe();
            }
        };
        CheckoutComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'paytm-checkout',
                        template: "<div [id]=\"checkoutService.checkoutJsContainerId\"><div>"
                    }] }
        ];
        /** @nocollapse */
        CheckoutComponent.ctorParameters = function () {
            return [
                { type: CheckoutService }
            ];
        };
        return CheckoutComponent;
    }());

    var CheckoutModule = /** @class */ (function () {
        function CheckoutModule() {
        }
        CheckoutModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [CheckoutComponent],
                        imports: [i2.CommonModule],
                        exports: [CheckoutComponent]
                    },] }
        ];
        return CheckoutModule;
    }());

    /*
     * Public API Surface of angular-checkout-js
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ɵb = WINDOW_TOKEN;
    exports.CheckoutService = CheckoutService;
    exports.CheckoutComponent = CheckoutComponent;
    exports.CheckoutModule = CheckoutModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=paytm-blink-checkout-angular.umd.js.map