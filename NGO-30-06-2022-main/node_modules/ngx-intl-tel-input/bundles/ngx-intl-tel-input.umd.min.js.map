{"version":3,"sources":["../../../projects/ngx-intl-tel-input/src/lib/enums/country-iso.enum.ts","../../../projects/ngx-intl-tel-input/src/lib/enums/search-country-field.enum.ts","../../../projects/ngx-intl-tel-input/src/lib/data/country-code.ts","../../../projects/ngx-intl-tel-input/src/lib/enums/phone-number-format.enum.ts","../../../projects/ngx-intl-tel-input/src/lib/ngx-intl-tel-input.validator.ts","../../../projects/ngx-intl-tel-input/src/lib/ngx-intl-tel-input.component.ts","../../../projects/ngx-intl-tel-input/src/lib/directives/native-element-injector.directive.ts","../../../projects/ngx-intl-tel-input/src/lib/ngx-intl-tel-input.module.ts"],"names":["CountryISO","SearchCountryField","this","allCountries","Afghanistan","Albania","Algeria","Andorra","Angola","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahrain","Bangladesh","Belarus","Belgium","Belize","Benin","Bhutan","Bolivia","BosniaAndHerzegovina","Botswana","Brazil","BritishIndianOceanTerritory","Brunei","Bulgaria","BurkinaFaso","Burundi","Cambodia","Cameroon","Canada","CapeVerde","CaribbeanNetherlands","CentralAfricanRepublic","Chad","Chile","China","ChristmasIsland","Cocos","Colombia","Comoros","CongoDRCJamhuriYaKidemokrasiaYaKongo","CongoRepublicCongoBrazzaville","CookIslands","CostaRica","CôteDIvoire","Croatia","Cuba","Curaçao","Cyprus","CzechRepublic","Denmark","Djibouti","Dominica","DominicanRepublic","Ecuador","Egypt","ElSalvador","EquatorialGuinea","Eritrea","Estonia","Ethiopia","FalklandIslands","FaroeIslands","Fiji","Finland","France","FrenchGuiana","FrenchPolynesia","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guadeloupe","Guatemala","Guernsey","Guinea","GuineaBissau","Guyana","Haiti","Honduras","HongKong","Hungary","Iceland","India","Indonesia","Iran","Iraq","Ireland","IsleOfMan","Israel","Italy","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","Kosovo","Kuwait","Kyrgyzstan","Laos","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Macau","Macedonia","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","MarshallIslands","Martinique","Mauritania","Mauritius","Mayotte","Mexico","Micronesia","Moldova","Monaco","Mongolia","Montenegro","Morocco","Mozambique","Myanmar","Namibia","Nauru","Nepal","Netherlands","NewCaledonia","NewZealand","Nicaragua","Niger","Nigeria","Niue","NorfolkIsland","NorthKorea","NorthernMarianaIslands","Norway","Oman","Pakistan","Palau","Palestine","Panama","PapuaNewGuinea","Paraguay","Peru","Philippines","Poland","Portugal","PuertoRico","Qatar","Réunion","Romania","Russia","Rwanda","SaintBarthélemy","SaintHelena","SaintKittsAndNevis","SaintMartin","SaintPierreAndMiquelon","Samoa","SanMarino","SãoToméAndPríncipe","SaudiArabia","Senegal","Serbia","Seychelles","SierraLeone","Singapore","Slovakia","Slovenia","SolomonIslands","Somalia","SouthAfrica","SouthKorea","SouthSudan","Spain","SriLanka","Sudan","Suriname","SvalbardAndJanMayen","Swaziland","Sweden","Switzerland","Syria","Taiwan","Tajikistan","Tanzania","Thailand","TimorLeste","Togo","Tokelau","Tonga","Tunisia","Turkey","Turkmenistan","TurksAndCaicosIslands","Tuvalu","Uganda","Ukraine","UnitedArabEmirates","UnitedKingdom","UnitedStates","Uruguay","Uzbekistan","Vanuatu","VaticanCity","Venezuela","Vietnam","WallisAndFutuna","WesternSahara","Yemen","Zambia","Zimbabwe","ÅlandIslands","Injectable","PhoneNumberFormat","phoneNumberValidator","control","value","el","nativeElement","inputBox","querySelector","undefined","id","isCheckValidation","getAttribute","isRequired","errors","required","error","validatePhoneNumber","valid","setCustomValidity","number","lpn.PhoneNumberUtil","getInstance","parse","countryCode","e","isValidNumberForRegion","clearValidators","NgxIntlTelInputComponent","countryCodeData","preferredCountries","enablePlaceholder","numberFormat","International","cssClass","onlyCountries","enableAutoCountrySelect","searchCountryFlag","searchCountryField","All","searchCountryPlaceholder","maxLength","selectFirstCountry","phoneValidation","inputId","separateDialCode","countryChange","EventEmitter","selectedCountry","areaCodes","dialCode","htmlId","flagClass","iso2","name","placeHolder","priority","phoneNumber","preferredCountriesInDropDown","phoneUtil","disabled","countrySearchText","onTouched","propagateChange","_","setTheme","prototype","ngOnInit","init","ngOnChanges","changes","selectedISO","currentValue","previousValue","updateSelectedCountry","updatePreferredCountries","checkSeparateDialCodeStyle","_this","fetchCountryData","length","filter","c","includes","setSelectedCountry","country","emit","searchCountry","countrySearchTextLower","toLowerCase","indexOf","startsWith","Iso2","Name","DialCode","countryList","scrollIntoView","behavior","block","inline","onPhoneNumberChange","numberObj","getParsedNumber","getCountryCode","getCountryIsoCode","newCountry","sort","a","b","find","intlNo","format","lpn.PhoneNumberFormat","INTERNATIONAL","removeDialCode","internationalNumber","nationalNumber","NATIONAL","e164Number","E164","toUpperCase","onCountrySelect","focus","onInputKeyPress","event","test","key","ctrlKey","preventDefault","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","writeValue","obj","setTimeout","resolvePlaceholder","placeholder","customPlaceholder","cntryCd","separateDialCodeClass","substr","rawNumber","toString","countries","mainCountry","secondaryCountries","matchedCountry","forEach","areaCode","getPhoneNumberPlaceHolder","getExampleNumber","toLocaleLowerCase","push","preferredCountry","selectedCountryISO","Component","args","selector","template","providers","CountryCode","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","useValue","ɵ0","Input","Output","ViewChild","NativeElementInjectorDirective","controlDir","host","Directive","NgControl","ElementRef","dropdownModuleForRoot","BsDropdownModule","forRoot","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","exports"],"mappings":"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AAA,KACAA,EAAA,QAAA,KACAA,EAAA,OAAA,KACAA,EAAA,aAAA,KACAA,EAAA,sBAAA,KACAA,EAAA,OAAA,KACAA,EAAA,gBAAA,KACAA,EAAA,OAAA,KACAA,EAAA,QAAA,KACAA,EAAA,mBAAA,KACAA,EAAA,cAAA,KACAA,EAAA,aAAA,KACAA,EAAA,QAAA,KACAA,EAAA,WAAA,KACAA,EAAA,QAAA,KACAA,EAAA,YAAA,KACAA,EAAA,UAAA,KACAA,EAAA,QAAA,KACAA,EAAA,gBAAA,KACAA,EAAA,cAAA,KACAA,EAAA,MAAA,KACAA,EAAA,OAAA,KACAA,EAAA,SAAA,KACAA,EAAA,gBAAA,SCnPWC,ICGZ,WAEQC,KAAAC,aAAe,CACrB,CACC,6BACAH,EAAAA,WAAWI,YACX,MAED,CACC,qBACAJ,EAAAA,WAAWK,QACX,OAED,CACC,uBACAL,EAAAA,WAAWM,QACX,OAED,CACC,iBACA,KACA,IACA,EACA,CACC,QAGF,CACC,UACAN,EAAAA,WAAWO,QACX,OAED,CACC,SACAP,EAAAA,WAAWQ,OACX,OAED,CACC,WACA,KACA,IACA,EACA,CACC,QAGF,CACC,sBACA,KACA,IACA,EACA,CACC,QAGF,CACC,YACAR,EAAAA,WAAWS,UACX,MAED,CACC,qBACAT,EAAAA,WAAWU,QACX,OAED,CACC,QACAV,EAAAA,WAAWW,MACX,OAED,CACC,YACAX,EAAAA,WAAWY,UACX,KACA,GAED,CACC,uBACAZ,EAAAA,WAAWa,QACX,MAED,CACC,0BACAb,EAAAA,WAAWc,WACX,OAED,CACC,UACA,KACA,IACA,EACA,CACC,QAGF,CACC,uBACAd,EAAAA,WAAWe,QACX,OAED,CACC,wBACAf,EAAAA,WAAWgB,WACX,OAED,CACC,WACA,KACA,IACA,EACA,CACC,QAGF,CACC,qBACAhB,EAAAA,WAAWiB,QACX,OAED,CACC,mBACAjB,EAAAA,WAAWkB,QACX,MAED,CACC,SACAlB,EAAAA,WAAWmB,OACX,OAED,CACC,gBACAnB,EAAAA,WAAWoB,MACX,OAED,CACC,UACA,KACA,IACA,EACA,CACC,QAGF,CACC,iBACApB,EAAAA,WAAWqB,OACX,OAED,CACC,UACArB,EAAAA,WAAWsB,QACX,OAED,CACC,+CACAtB,EAAAA,WAAWuB,qBACX,OAED,CACC,WACAvB,EAAAA,WAAWwB,SACX,OAED,CACC,kBACAxB,EAAAA,WAAWyB,OACX,MAED,CACC,iCACAzB,EAAAA,WAAW0B,4BACX,OAED,CACC,yBACA,KACA,IACA,EACA,CACC,QAGF,CACC,SACA1B,EAAAA,WAAW2B,OACX,OAED,CACC,sBACA3B,EAAAA,WAAW4B,SACX,OAED,CACC,eACA5B,EAAAA,WAAW6B,YACX,OAED,CACC,qBACA7B,EAAAA,WAAW8B,QACX,OAED,CACC,qBACA9B,EAAAA,WAAW+B,SACX,OAED,CACC,sBACA/B,EAAAA,WAAWgC,SACX,OAED,CACC,SACAhC,EAAAA,WAAWiC,OACX,IACA,EACA,CACC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC7E,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC7E,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC7E,MAAO,MAAO,MAAO,MAAO,MAAO,QAGrC,CACC,0BACAjC,EAAAA,WAAWkC,UACX,OAED,CACC,wBACAlC,EAAAA,WAAWmC,qBACX,MACA,GAED,CACC,iBACA,KACA,IACA,EACA,CACC,QAGF,CACC,uDACAnC,EAAAA,WAAWoC,uBACX,OAED,CACC,eACApC,EAAAA,WAAWqC,KACX,OAED,CACC,QACArC,EAAAA,WAAWsC,MACX,MAED,CACC,aACAtC,EAAAA,WAAWuC,MACX,MAED,CACC,mBACAvC,EAAAA,WAAWwC,gBACX,KACA,GAED,CACC,0BACAxC,EAAAA,WAAWyC,MACX,KACA,GAED,CACC,WACAzC,EAAAA,WAAW0C,SACX,MAED,CACC,yBACA1C,EAAAA,WAAW2C,QACX,OAED,CACC,iDACA3C,EAAAA,WAAW4C,qCACX,OAED,CACC,uCACA5C,EAAAA,WAAW6C,8BACX,OAED,CACC,eACA7C,EAAAA,WAAW8C,YACX,OAED,CACC,aACA9C,EAAAA,WAAW+C,UACX,OAED,CACC,gBACA/C,EAAAA,WAAWgD,YACX,OAED,CACC,qBACAhD,EAAAA,WAAWiD,QACX,OAED,CACC,OACAjD,EAAAA,WAAWkD,KACX,MAED,CACC,UACAlD,EAAAA,WAAWmD,QACX,MACA,GAED,CACC,kBACAnD,EAAAA,WAAWoD,OACX,OAED,CACC,mCACApD,EAAAA,WAAWqD,cACX,OAED,CACC,oBACArD,EAAAA,WAAWsD,QACX,MAED,CACC,WACAtD,EAAAA,WAAWuD,SACX,OAED,CACC,WACAvD,EAAAA,WAAWwD,SACX,QAED,CACC,4CACAxD,EAAAA,WAAWyD,kBACX,IACA,EACA,CAAC,MAAO,MAAO,QAEhB,CACC,UACAzD,EAAAA,WAAW0D,QACX,OAED,CACC,iBACA1D,EAAAA,WAAW2D,MACX,MAED,CACC,cACA3D,EAAAA,WAAW4D,WACX,OAED,CACC,wCACA5D,EAAAA,WAAW6D,iBACX,OAED,CACC,UACA7D,EAAAA,WAAW8D,QACX,OAED,CACC,kBACA9D,EAAAA,WAAW+D,QACX,OAED,CACC,WACA/D,EAAAA,WAAWgE,SACX,OAED,CACC,oCACAhE,EAAAA,WAAWiE,gBACX,OAED,CACC,0BACAjE,EAAAA,WAAWkE,aACX,OAED,CACC,OACAlE,EAAAA,WAAWmE,KACX,OAED,CACC,kBACAnE,EAAAA,WAAWoE,QACX,MACA,GAED,CACC,SACApE,EAAAA,WAAWqE,OACX,MAED,CACC,mCACArE,EAAAA,WAAWsE,aACX,OAED,CACC,yCACAtE,EAAAA,WAAWuE,gBACX,OAED,CACC,QACAvE,EAAAA,WAAWwE,MACX,OAED,CACC,SACAxE,EAAAA,WAAWyE,OACX,OAED,CACC,uBACAzE,EAAAA,WAAW0E,QACX,OAED,CACC,wBACA1E,EAAAA,WAAW2E,QACX,MAED,CACC,gBACA3E,EAAAA,WAAW4E,MACX,OAED,CACC,YACA5E,EAAAA,WAAW6E,UACX,OAED,CACC,kBACA7E,EAAAA,WAAW8E,OACX,MAED,CACC,+BACA9E,EAAAA,WAAW+E,UACX,OAED,CACC,UACA/E,EAAAA,WAAWgF,QACX,QAED,CACC,aACAhF,EAAAA,WAAWiF,WACX,MACA,GAED,CACC,OACA,KACA,IACA,EACA,CACC,QAGF,CACC,YACAjF,EAAAA,WAAWkF,UACX,OAED,CACC,WACAlF,EAAAA,WAAWmF,SACX,KACA,EACA,CAAC,OAEF,CACC,kBACAnF,EAAAA,WAAWoF,OACX,OAED,CACC,+BACApF,EAAAA,WAAWqF,aACX,OAED,CACC,SACArF,EAAAA,WAAWsF,OACX,OAED,CACC,QACAtF,EAAAA,WAAWuF,MACX,OAED,CACC,WACAvF,EAAAA,WAAWwF,SACX,OAED,CACC,iBACAxF,EAAAA,WAAWyF,SACX,OAED,CACC,yBACAzF,EAAAA,WAAW0F,QACX,MAED,CACC,mBACA1F,EAAAA,WAAW2F,QACX,OAED,CACC,eACA3F,EAAAA,WAAW4F,MACX,MAED,CACC,YACA5F,EAAAA,WAAW6F,UACX,MAED,CACC,kBACA7F,EAAAA,WAAW8F,KACX,MAED,CACC,mBACA9F,EAAAA,WAAW+F,KACX,OAED,CACC,UACA/F,EAAAA,WAAWgG,QACX,OAED,CACC,cACAhG,EAAAA,WAAWiG,UACX,KACA,EACA,CAAC,OAEF,CACC,oBACAjG,EAAAA,WAAWkG,OACX,OAED,CACC,iBACAlG,EAAAA,WAAWmG,MACX,KACA,GAED,CACC,UACA,KACA,IACA,EACA,CACC,QAGF,CACC,aACAnG,EAAAA,WAAWoG,MACX,MAED,CACC,SACApG,EAAAA,WAAWqG,OACX,KACA,EACA,CAAC,OAEF,CACC,qBACArG,EAAAA,WAAWsG,OACX,OAED,CACC,yBACAtG,EAAAA,WAAWuG,WACX,IACA,GAED,CACC,QACAvG,EAAAA,WAAWwG,MACX,OAED,CACC,WACAxG,EAAAA,WAAWyG,SACX,OAED,CACC,SACAzG,EAAAA,WAAW0G,OACX,OAED,CACC,qBACA1G,EAAAA,WAAW2G,OACX,OAED,CACC,0BACA3G,EAAAA,WAAW4G,WACX,OAED,CACC,aACA5G,EAAAA,WAAW6G,KACX,OAED,CACC,mBACA7G,EAAAA,WAAW8G,OACX,OAED,CACC,qBACA9G,EAAAA,WAAW+G,QACX,OAED,CACC,UACA/G,EAAAA,WAAWgH,QACX,OAED,CACC,UACAhH,EAAAA,WAAWiH,QACX,OAED,CACC,mBACAjH,EAAAA,WAAWkH,MACX,OAED,CACC,gBACAlH,EAAAA,WAAWmH,cACX,OAED,CACC,sBACAnH,EAAAA,WAAWoH,UACX,OAED,CACC,aACApH,EAAAA,WAAWqH,WACX,OAED,CACC,aACArH,EAAAA,WAAWsH,MACX,OAED,CACC,iCACAtH,EAAAA,WAAWuH,UACX,OAED,CACC,4BACAvH,EAAAA,WAAWwH,WACX,OAED,CACC,SACAxH,EAAAA,WAAWyH,OACX,OAED,CACC,WACAzH,EAAAA,WAAW0H,SACX,MAED,CACC,WACA1H,EAAAA,WAAW2H,SACX,OAED,CACC,OACA3H,EAAAA,WAAW4H,KACX,OAED,CACC,QACA5H,EAAAA,WAAW6H,MACX,OAED,CACC,mBACA7H,EAAAA,WAAW8H,gBACX,OAED,CACC,aACA9H,EAAAA,WAAW+H,WACX,OAED,CACC,4BACA/H,EAAAA,WAAWgI,WACX,OAED,CACC,oBACAhI,EAAAA,WAAWiI,UACX,OAED,CACC,UACAjI,EAAAA,WAAWkI,QACX,MACA,GAED,CACC,kBACAlI,EAAAA,WAAWmI,OACX,MAED,CACC,aACAnI,EAAAA,WAAWoI,WACX,OAED,CACC,8BACApI,EAAAA,WAAWqI,QACX,OAED,CACC,SACArI,EAAAA,WAAWsI,OACX,OAED,CACC,oBACAtI,EAAAA,WAAWuI,SACX,OAED,CACC,yBACAvI,EAAAA,WAAWwI,WACX,OAED,CACC,aACA,KACA,IACA,EACA,CACC,QAGF,CACC,sBACAxI,EAAAA,WAAWyI,QACX,MACA,GAED,CACC,0BACAzI,EAAAA,WAAW0I,WACX,OAED,CACC,2BACA1I,EAAAA,WAAW2I,QACX,MAED,CACC,oBACA3I,EAAAA,WAAW4I,QACX,OAED,CACC,QACA5I,EAAAA,WAAW6I,MACX,OAED,CACC,gBACA7I,EAAAA,WAAW8I,MACX,OAED,CACC,0BACA9I,EAAAA,WAAW+I,YACX,MAED,CACC,qCACA/I,EAAAA,WAAWgJ,aACX,OAED,CACC,cACAhJ,EAAAA,WAAWiJ,WACX,MAED,CACC,YACAjJ,EAAAA,WAAWkJ,UACX,OAED,CACC,gBACAlJ,EAAAA,WAAWmJ,MACX,OAED,CACC,UACAnJ,EAAAA,WAAWoJ,QACX,OAED,CACC,OACApJ,EAAAA,WAAWqJ,KACX,OAED,CACC,iBACArJ,EAAAA,WAAWsJ,cACX,OAED,CACC,+BACAtJ,EAAAA,WAAWuJ,WACX,OAED,CACC,2BACAvJ,EAAAA,WAAWwJ,uBACX,QAED,CACC,iBACAxJ,EAAAA,WAAWyJ,OACX,KACA,GAED,CACC,kBACAzJ,EAAAA,WAAW0J,KACX,OAED,CACC,wBACA1J,EAAAA,WAAW2J,SACX,MAED,CACC,QACA3J,EAAAA,WAAW4J,MACX,OAED,CACC,wBACA5J,EAAAA,WAAW6J,UACX,OAED,CACC,kBACA7J,EAAAA,WAAW8J,OACX,OAED,CACC,mBACA9J,EAAAA,WAAW+J,eACX,OAED,CACC,WACA/J,EAAAA,WAAWgK,SACX,OAED,CACC,cACAhK,EAAAA,WAAWiK,KACX,MAED,CACC,cACAjK,EAAAA,WAAWkK,YACX,MAED,CACC,kBACAlK,EAAAA,WAAWmK,OACX,MAED,CACC,WACAnK,EAAAA,WAAWoK,SACX,OAED,CACC,cACApK,EAAAA,WAAWqK,WACX,IACA,EACA,CAAC,MAAO,QAET,CACC,iBACArK,EAAAA,WAAWsK,MACX,OAED,CACC,uBACAtK,EAAAA,WAAWuK,QACX,MACA,GAED,CACC,oBACAvK,EAAAA,WAAWwK,QACX,MAED,CACC,kBACAxK,EAAAA,WAAWyK,OACX,IACA,GAED,CACC,SACAzK,EAAAA,WAAW0K,OACX,OAED,CACC,sCACA1K,EAAAA,WAAW2K,gBACX,MACA,GAED,CACC,eACA3K,EAAAA,WAAW4K,YACX,OAED,CACC,wBACA5K,EAAAA,WAAW6K,mBACX,QAED,CACC,cACA,KACA,IACA,EACA,CACC,QAGF,CACC,iDACA7K,EAAAA,WAAW8K,YACX,MACA,GAED,CACC,uDACA9K,EAAAA,WAAW+K,uBACX,OAED,CACC,mCACA,KACA,IACA,EACA,CACC,QAGF,CACC,QACA/K,EAAAA,WAAWgL,MACX,OAED,CACC,aACAhL,EAAAA,WAAWiL,UACX,OAED,CACC,8CACAjL,EAAAA,WAAWkL,mBACX,OAED,CACC,6CACAlL,EAAAA,WAAWmL,YACX,OAED,CACC,oBACAnL,EAAAA,WAAWoL,QACX,OAED,CACC,kBACApL,EAAAA,WAAWqL,OACX,OAED,CACC,aACArL,EAAAA,WAAWsL,WACX,OAED,CACC,eACAtL,EAAAA,WAAWuL,YACX,OAED,CACC,YACAvL,EAAAA,WAAWwL,UACX,MAED,CACC,eACA,KACA,IACA,EACA,CACC,QAGF,CACC,uBACAxL,EAAAA,WAAWyL,SACX,OAED,CACC,uBACAzL,EAAAA,WAAW0L,SACX,OAED,CACC,kBACA1L,EAAAA,WAAW2L,eACX,OAED,CACC,uBACA3L,EAAAA,WAAW4L,QACX,OAED,CACC,eACA5L,EAAAA,WAAW6L,YACX,MAED,CACC,qBACA7L,EAAAA,WAAW8L,WACX,MAED,CACC,gCACA9L,EAAAA,WAAW+L,WACX,OAED,CACC,iBACA/L,EAAAA,WAAWgM,MACX,MAED,CACC,0BACAhM,EAAAA,WAAWiM,SACX,MAED,CACC,qBACAjM,EAAAA,WAAWkM,MACX,OAED,CACC,WACAlM,EAAAA,WAAWmM,SACX,OAED,CACC,yBACAnM,EAAAA,WAAWoM,oBACX,KACA,GAED,CACC,YACApM,EAAAA,WAAWqM,UACX,OAED,CACC,mBACArM,EAAAA,WAAWsM,OACX,MAED,CACC,wBACAtM,EAAAA,WAAWuM,YACX,MAED,CACC,mBACAvM,EAAAA,WAAWwM,MACX,OAED,CACC,cACAxM,EAAAA,WAAWyM,OACX,OAED,CACC,aACAzM,EAAAA,WAAW0M,WACX,OAED,CACC,WACA1M,EAAAA,WAAW2M,SACX,OAED,CACC,iBACA3M,EAAAA,WAAW4M,SACX,MAED,CACC,cACA5M,EAAAA,WAAW6M,WACX,OAED,CACC,OACA7M,EAAAA,WAAW8M,KACX,OAED,CACC,UACA9M,EAAAA,WAAW+M,QACX,OAED,CACC,QACA/M,EAAAA,WAAWgN,MACX,OAED,CACC,sBACA,KACA,IACA,EACA,CACC,QAGF,CACC,oBACAhN,EAAAA,WAAWiN,QACX,OAED,CACC,mBACAjN,EAAAA,WAAWkN,OACX,MAED,CACC,eACAlN,EAAAA,WAAWmN,aACX,OAED,CACC,2BACAnN,EAAAA,WAAWoN,sBACX,QAED,CACC,SACApN,EAAAA,WAAWqN,OACX,OAED,CACC,sBACA,KACA,IACA,EACA,CACC,QAGF,CACC,SACArN,EAAAA,WAAWsN,OACX,OAED,CACC,oBACAtN,EAAAA,WAAWuN,QACX,OAED,CACC,qDACAvN,EAAAA,WAAWwN,mBACX,OAED,CACC,iBACAxN,EAAAA,WAAWyN,cACX,KACA,GAED,CACC,gBACAzN,EAAAA,WAAW0N,aACX,IACA,GAED,CACC,UACA1N,EAAAA,WAAW2N,QACX,OAED,CACC,2BACA3N,EAAAA,WAAW4N,WACX,OAED,CACC,UACA5N,EAAAA,WAAW6N,QACX,OAED,CACC,oCACA7N,EAAAA,WAAW8N,YACX,KACA,GAED,CACC,YACA9N,EAAAA,WAAW+N,UACX,MAED,CACC,qBACA/N,EAAAA,WAAWgO,QACX,MAED,CACC,oBACAhO,EAAAA,WAAWiO,gBACX,OAED,CACC,sCACAjO,EAAAA,WAAWkO,cACX,MACA,GAED,CACC,mBACAlO,EAAAA,WAAWmO,MACX,OAED,CACC,SACAnO,EAAAA,WAAWoO,OACX,OAED,CACC,WACApO,EAAAA,WAAWqO,SACX,OAED,CACC,gBACArO,EAAAA,WAAWsO,aACX,MACA,yBAvyCFC,EAAAA,aDHWtO,EAAAA,wBAAAA,GAAAA,EAAAA,EAAAA,qBAAAA,EAAAA,mBAAkB,KAC7B,SAAA,WACAA,EAAA,KAAA,OACAA,EAAA,KAAA,OACAA,EAAA,IA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","sourcesContent":["export enum CountryISO {\n\tAfghanistan = 'af',\n\tAlbania = 'al',\n\tAlgeria = 'dz',\n\tAmericanSamoa = 'as',\n\tAndorra = 'ad',\n\tAngola = 'ao',\n\tAnguilla = 'ai',\n\tAntiguaAndBarbuda = 'ag',\n\tArgentina = 'ar',\n\tArmenia = 'am',\n\tAruba = 'aw',\n\tAustralia = 'au',\n\tAustria = 'at',\n\tAzerbaijan = 'az',\n\tBahamas = 'bs',\n\tBahrain = 'bh',\n\tBangladesh = 'bd',\n\tBarbados = 'bb',\n\tBelarus = 'by',\n\tBelgium = 'be',\n\tBelize = 'bz',\n\tBenin = 'bj',\n\tBermuda = 'bm',\n\tBhutan = 'bt',\n\tBolivia = 'bo',\n\tBosniaAndHerzegovina = 'ba',\n\tBotswana = 'bw',\n\tBrazil = 'br',\n\tBritishIndianOceanTerritory = 'io',\n\tBritishVirginIslands = 'vg',\n\tBrunei = 'bn',\n\tBulgaria = 'bg',\n\tBurkinaFaso = 'bf',\n\tBurundi = 'bi',\n\tCambodia = 'kh',\n\tCameroon = 'cm',\n\tCanada = 'ca',\n\tCapeVerde = 'cv',\n\tCaribbeanNetherlands = 'bq',\n\tCaymanIslands = 'ky',\n\tCentralAfricanRepublic = 'cf',\n\tChad = 'td',\n\tChile = 'cl',\n\tChina = 'cn',\n\tChristmasIsland = 'cx',\n\tCocos = 'cc',\n\tColombia = 'co',\n\tComoros = 'km',\n\tCongoDRCJamhuriYaKidemokrasiaYaKongo = 'cd',\n\tCongoRepublicCongoBrazzaville = 'cg',\n\tCookIslands = 'ck',\n\tCostaRica = 'cr',\n\tCôteDIvoire = 'ci',\n\tCroatia = 'hr',\n\tCuba = 'cu',\n\tCuraçao = 'cw',\n\tCyprus = 'cy',\n\tCzechRepublic = 'cz',\n\tDenmark = 'dk',\n\tDjibouti = 'dj',\n\tDominica = 'dm',\n\tDominicanRepublic = 'do',\n\tEcuador = 'ec',\n\tEgypt = 'eg',\n\tElSalvador = 'sv',\n\tEquatorialGuinea = 'gq',\n\tEritrea = 'er',\n\tEstonia = 'ee',\n\tEthiopia = 'et',\n\tFalklandIslands = 'fk',\n\tFaroeIslands = 'fo',\n\tFiji = 'fj',\n\tFinland = 'fi',\n\tFrance = 'fr',\n\tFrenchGuiana = 'gf',\n\tFrenchPolynesia = 'pf',\n\tGabon = 'ga',\n\tGambia = 'gm',\n\tGeorgia = 'ge',\n\tGermany = 'de',\n\tGhana = 'gh',\n\tGibraltar = 'gi',\n\tGreece = 'gr',\n\tGreenland = 'gl',\n\tGrenada = 'gd',\n\tGuadeloupe = 'gp',\n\tGuam = 'gu',\n\tGuatemala = 'gt',\n\tGuernsey = 'gg',\n\tGuinea = 'gn',\n\tGuineaBissau = 'gw',\n\tGuyana = 'gy',\n\tHaiti = 'ht',\n\tHonduras = 'hn',\n\tHongKong = 'hk',\n\tHungary = 'hu',\n\tIceland = 'is',\n\tIndia = 'in',\n\tIndonesia = 'id',\n\tIran = 'ir',\n\tIraq = 'iq',\n\tIreland = 'ie',\n\tIsleOfMan = 'im',\n\tIsrael = 'il',\n\tItaly = 'it',\n\tJamaica = 'jm',\n\tJapan = 'jp',\n\tJersey = 'je',\n\tJordan = 'jo',\n\tKazakhstan = 'kz',\n\tKenya = 'ke',\n\tKiribati = 'ki',\n\tKosovo = 'xk',\n\tKuwait = 'kw',\n\tKyrgyzstan = 'kg',\n\tLaos = 'la',\n\tLatvia = 'lv',\n\tLebanon = 'lb',\n\tLesotho = 'ls',\n\tLiberia = 'lr',\n\tLibya = 'ly',\n\tLiechtenstein = 'li',\n\tLithuania = 'lt',\n\tLuxembourg = 'lu',\n\tMacau = 'mo',\n\tMacedonia = 'mk',\n\tMadagascar = 'mg',\n\tMalawi = 'mw',\n\tMalaysia = 'my',\n\tMaldives = 'mv',\n\tMali = 'ml',\n\tMalta = 'mt',\n\tMarshallIslands = 'mh',\n\tMartinique = 'mq',\n\tMauritania = 'mr',\n\tMauritius = 'mu',\n\tMayotte = 'yt',\n\tMexico = 'mx',\n\tMicronesia = 'fm',\n\tMoldova = 'md',\n\tMonaco = 'mc',\n\tMongolia = 'mn',\n\tMontenegro = 'me',\n\tMontserrat = 'ms',\n\tMorocco = 'ma',\n\tMozambique = 'mz',\n\tMyanmar = 'mm',\n\tNamibia = 'na',\n\tNauru = 'nr',\n\tNepal = 'np',\n\tNetherlands = 'nl',\n\tNewCaledonia = 'nc',\n\tNewZealand = 'nz',\n\tNicaragua = 'ni',\n\tNiger = 'ne',\n\tNigeria = 'ng',\n\tNiue = 'nu',\n\tNorfolkIsland = 'nf',\n\tNorthKorea = 'kp',\n\tNorthernMarianaIslands = 'mp',\n\tNorway = 'no',\n\tOman = 'om',\n\tPakistan = 'pk',\n\tPalau = 'pw',\n\tPalestine = 'ps',\n\tPanama = 'pa',\n\tPapuaNewGuinea = 'pg',\n\tParaguay = 'py',\n\tPeru = 'pe',\n\tPhilippines = 'ph',\n\tPoland = 'pl',\n\tPortugal = 'pt',\n\tPuertoRico = 'pr',\n\tQatar = 'qa',\n\tRéunion = 're',\n\tRomania = 'ro',\n\tRussia = 'ru',\n\tRwanda = 'rw',\n\tSaintBarthélemy = 'bl',\n\tSaintHelena = 'sh',\n\tSaintKittsAndNevis = 'kn',\n\tSaintLucia = 'lc',\n\tSaintMartin = 'mf',\n\tSaintPierreAndMiquelon = 'pm',\n\tSaintVincentAndTheGrenadines = 'vc',\n\tSamoa = 'ws',\n\tSanMarino = 'sm',\n\tSãoToméAndPríncipe = 'st',\n\tSaudiArabia = 'sa',\n\tSenegal = 'sn',\n\tSerbia = 'rs',\n\tSeychelles = 'sc',\n\tSierraLeone = 'sl',\n\tSingapore = 'sg',\n\tSintMaarten = 'sx',\n\tSlovakia = 'sk',\n\tSlovenia = 'si',\n\tSolomonIslands = 'sb',\n\tSomalia = 'so',\n\tSouthAfrica = 'za',\n\tSouthKorea = 'kr',\n\tSouthSudan = 'ss',\n\tSpain = 'es',\n\tSriLanka = 'lk',\n\tSudan = 'sd',\n\tSuriname = 'sr',\n\tSvalbardAndJanMayen = 'sj',\n\tSwaziland = 'sz',\n\tSweden = 'se',\n\tSwitzerland = 'ch',\n\tSyria = 'sy',\n\tTaiwan = 'tw',\n\tTajikistan = 'tj',\n\tTanzania = 'tz',\n\tThailand = 'th',\n\tTimorLeste = 'tl',\n\tTogo = 'tg',\n\tTokelau = 'tk',\n\tTonga = 'to',\n\tTrinidadAndTobago = 'tt',\n\tTunisia = 'tn',\n\tTurkey = 'tr',\n\tTurkmenistan = 'tm',\n\tTurksAndCaicosIslands = 'tc',\n\tTuvalu = 'tv',\n\tUSVirginIslands = 'vi',\n\tUganda = 'ug',\n\tUkraine = 'ua',\n\tUnitedArabEmirates = 'ae',\n\tUnitedKingdom = 'gb',\n\tUnitedStates = 'us',\n\tUruguay = 'uy',\n\tUzbekistan = 'uz',\n\tVanuatu = 'vu',\n\tVaticanCity = 'va',\n\tVenezuela = 've',\n\tVietnam = 'vn',\n\tWallisAndFutuna = 'wf',\n\tWesternSahara = 'eh',\n\tYemen = 'ye',\n\tZambia = 'zm',\n\tZimbabwe = 'zw',\n\tÅlandIslands = 'ax',\n}\n","export enum SearchCountryField {\n\tDialCode = 'dialCode',\n\tIso2 = 'iso2',\n\tName = 'name',\n\tAll = 'all'\n}\n","import { Injectable } from \"@angular/core\";\nimport { CountryISO } from '../enums/country-iso.enum';\n\n@Injectable()\nexport class CountryCode {\n\tpublic allCountries = [\n\t\t[\n\t\t\t'Afghanistan (‫افغانستان‬‎)',\n\t\t\tCountryISO.Afghanistan,\n\t\t\t'93'\n\t\t],\n\t\t[\n\t\t\t'Albania (Shqipëri)',\n\t\t\tCountryISO.Albania,\n\t\t\t'355'\n\t\t],\n\t\t[\n\t\t\t'Algeria (‫الجزائر‬‎)',\n\t\t\tCountryISO.Algeria,\n\t\t\t'213'\n\t\t],\n\t\t[\n\t\t\t'American Samoa',\n\t\t\t'as',\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'684',\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Andorra',\n\t\t\tCountryISO.Andorra,\n\t\t\t'376'\n\t\t],\n\t\t[\n\t\t\t'Angola',\n\t\t\tCountryISO.Angola,\n\t\t\t'244'\n\t\t],\n\t\t[\n\t\t\t'Anguilla',\n\t\t\t'ai',\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'264',\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Antigua and Barbuda',\n\t\t\t'ag',\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'268',\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Argentina',\n\t\t\tCountryISO.Argentina,\n\t\t\t'54'\n\t\t],\n\t\t[\n\t\t\t'Armenia (Հայաստան)',\n\t\t\tCountryISO.Armenia,\n\t\t\t'374'\n\t\t],\n\t\t[\n\t\t\t'Aruba',\n\t\t\tCountryISO.Aruba,\n\t\t\t'297'\n\t\t],\n\t\t[\n\t\t\t'Australia',\n\t\t\tCountryISO.Australia,\n\t\t\t'61',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Austria (Österreich)',\n\t\t\tCountryISO.Austria,\n\t\t\t'43'\n\t\t],\n\t\t[\n\t\t\t'Azerbaijan (Azərbaycan)',\n\t\t\tCountryISO.Azerbaijan,\n\t\t\t'994'\n\t\t],\n\t\t[\n\t\t\t'Bahamas',\n\t\t\t'bs',\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'242',\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Bahrain (‫البحرين‬‎)',\n\t\t\tCountryISO.Bahrain,\n\t\t\t'973'\n\t\t],\n\t\t[\n\t\t\t'Bangladesh (বাংলাদেশ)',\n\t\t\tCountryISO.Bangladesh,\n\t\t\t'880'\n\t\t],\n\t\t[\n\t\t\t'Barbados',\n\t\t\t'bb',\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'246',\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Belarus (Беларусь)',\n\t\t\tCountryISO.Belarus,\n\t\t\t'375'\n\t\t],\n\t\t[\n\t\t\t'Belgium (België)',\n\t\t\tCountryISO.Belgium,\n\t\t\t'32'\n\t\t],\n\t\t[\n\t\t\t'Belize',\n\t\t\tCountryISO.Belize,\n\t\t\t'501'\n\t\t],\n\t\t[\n\t\t\t'Benin (Bénin)',\n\t\t\tCountryISO.Benin,\n\t\t\t'229'\n\t\t],\n\t\t[\n\t\t\t'Bermuda',\n\t\t\t'bm',\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'441',\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Bhutan (འབྲུག)',\n\t\t\tCountryISO.Bhutan,\n\t\t\t'975'\n\t\t],\n\t\t[\n\t\t\t'Bolivia',\n\t\t\tCountryISO.Bolivia,\n\t\t\t'591'\n\t\t],\n\t\t[\n\t\t\t'Bosnia and Herzegovina (Босна и Херцеговина)',\n\t\t\tCountryISO.BosniaAndHerzegovina,\n\t\t\t'387'\n\t\t],\n\t\t[\n\t\t\t'Botswana',\n\t\t\tCountryISO.Botswana,\n\t\t\t'267'\n\t\t],\n\t\t[\n\t\t\t'Brazil (Brasil)',\n\t\t\tCountryISO.Brazil,\n\t\t\t'55'\n\t\t],\n\t\t[\n\t\t\t'British Indian Ocean Territory',\n\t\t\tCountryISO.BritishIndianOceanTerritory,\n\t\t\t'246'\n\t\t],\n\t\t[\n\t\t\t'British Virgin Islands',\n\t\t\t'vg',\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'284',\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Brunei',\n\t\t\tCountryISO.Brunei,\n\t\t\t'673'\n\t\t],\n\t\t[\n\t\t\t'Bulgaria (България)',\n\t\t\tCountryISO.Bulgaria,\n\t\t\t'359'\n\t\t],\n\t\t[\n\t\t\t'Burkina Faso',\n\t\t\tCountryISO.BurkinaFaso,\n\t\t\t'226'\n\t\t],\n\t\t[\n\t\t\t'Burundi (Uburundi)',\n\t\t\tCountryISO.Burundi,\n\t\t\t'257'\n\t\t],\n\t\t[\n\t\t\t'Cambodia (កម្ពុជា)',\n\t\t\tCountryISO.Cambodia,\n\t\t\t'855'\n\t\t],\n\t\t[\n\t\t\t'Cameroon (Cameroun)',\n\t\t\tCountryISO.Cameroon,\n\t\t\t'237'\n\t\t],\n\t\t[\n\t\t\t'Canada',\n\t\t\tCountryISO.Canada,\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'204', '226', '236', '249', '250', '289', '306', '343', '365', '387', '403', '416',\n\t\t\t\t'418', '431', '437', '438', '450', '506', '514', '519', '548', '579', '581', '587',\n\t\t\t\t'604', '613', '639', '647', '672', '705', '709', '742', '778', '780', '782', '807',\n\t\t\t\t'819', '825', '867', '873', '902', '905'\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Cape Verde (Kabu Verdi)',\n\t\t\tCountryISO.CapeVerde,\n\t\t\t'238'\n\t\t],\n\t\t[\n\t\t\t'Caribbean Netherlands',\n\t\t\tCountryISO.CaribbeanNetherlands,\n\t\t\t'599',\n\t\t\t1\n\t\t],\n\t\t[\n\t\t\t'Cayman Islands',\n\t\t\t'ky',\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'345',\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Central African Republic (République centrafricaine)',\n\t\t\tCountryISO.CentralAfricanRepublic,\n\t\t\t'236'\n\t\t],\n\t\t[\n\t\t\t'Chad (Tchad)',\n\t\t\tCountryISO.Chad,\n\t\t\t'235'\n\t\t],\n\t\t[\n\t\t\t'Chile',\n\t\t\tCountryISO.Chile,\n\t\t\t'56'\n\t\t],\n\t\t[\n\t\t\t'China (中国)',\n\t\t\tCountryISO.China,\n\t\t\t'86'\n\t\t],\n\t\t[\n\t\t\t'Christmas Island',\n\t\t\tCountryISO.ChristmasIsland,\n\t\t\t'61',\n\t\t\t2\n\t\t],\n\t\t[\n\t\t\t'Cocos (Keeling) Islands',\n\t\t\tCountryISO.Cocos,\n\t\t\t'61',\n\t\t\t1\n\t\t],\n\t\t[\n\t\t\t'Colombia',\n\t\t\tCountryISO.Colombia,\n\t\t\t'57'\n\t\t],\n\t\t[\n\t\t\t'Comoros (‫جزر القمر‬‎)',\n\t\t\tCountryISO.Comoros,\n\t\t\t'269'\n\t\t],\n\t\t[\n\t\t\t'Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)',\n\t\t\tCountryISO.CongoDRCJamhuriYaKidemokrasiaYaKongo,\n\t\t\t'243'\n\t\t],\n\t\t[\n\t\t\t'Congo (Republic) (Congo-Brazzaville)',\n\t\t\tCountryISO.CongoRepublicCongoBrazzaville,\n\t\t\t'242'\n\t\t],\n\t\t[\n\t\t\t'Cook Islands',\n\t\t\tCountryISO.CookIslands,\n\t\t\t'682'\n\t\t],\n\t\t[\n\t\t\t'Costa Rica',\n\t\t\tCountryISO.CostaRica,\n\t\t\t'506'\n\t\t],\n\t\t[\n\t\t\t'Côte d’Ivoire',\n\t\t\tCountryISO.CôteDIvoire,\n\t\t\t'225'\n\t\t],\n\t\t[\n\t\t\t'Croatia (Hrvatska)',\n\t\t\tCountryISO.Croatia,\n\t\t\t'385'\n\t\t],\n\t\t[\n\t\t\t'Cuba',\n\t\t\tCountryISO.Cuba,\n\t\t\t'53'\n\t\t],\n\t\t[\n\t\t\t'Curaçao',\n\t\t\tCountryISO.Curaçao,\n\t\t\t'599',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Cyprus (Κύπρος)',\n\t\t\tCountryISO.Cyprus,\n\t\t\t'357'\n\t\t],\n\t\t[\n\t\t\t'Czech Republic (Česká republika)',\n\t\t\tCountryISO.CzechRepublic,\n\t\t\t'420'\n\t\t],\n\t\t[\n\t\t\t'Denmark (Danmark)',\n\t\t\tCountryISO.Denmark,\n\t\t\t'45'\n\t\t],\n\t\t[\n\t\t\t'Djibouti',\n\t\t\tCountryISO.Djibouti,\n\t\t\t'253'\n\t\t],\n\t\t[\n\t\t\t'Dominica',\n\t\t\tCountryISO.Dominica,\n\t\t\t'1767'\n\t\t],\n\t\t[\n\t\t\t'Dominican Republic (República Dominicana)',\n\t\t\tCountryISO.DominicanRepublic,\n\t\t\t'1',\n\t\t\t2,\n\t\t\t['809', '829', '849']\n\t\t],\n\t\t[\n\t\t\t'Ecuador',\n\t\t\tCountryISO.Ecuador,\n\t\t\t'593'\n\t\t],\n\t\t[\n\t\t\t'Egypt (‫مصر‬‎)',\n\t\t\tCountryISO.Egypt,\n\t\t\t'20'\n\t\t],\n\t\t[\n\t\t\t'El Salvador',\n\t\t\tCountryISO.ElSalvador,\n\t\t\t'503'\n\t\t],\n\t\t[\n\t\t\t'Equatorial Guinea (Guinea Ecuatorial)',\n\t\t\tCountryISO.EquatorialGuinea,\n\t\t\t'240'\n\t\t],\n\t\t[\n\t\t\t'Eritrea',\n\t\t\tCountryISO.Eritrea,\n\t\t\t'291'\n\t\t],\n\t\t[\n\t\t\t'Estonia (Eesti)',\n\t\t\tCountryISO.Estonia,\n\t\t\t'372'\n\t\t],\n\t\t[\n\t\t\t'Ethiopia',\n\t\t\tCountryISO.Ethiopia,\n\t\t\t'251'\n\t\t],\n\t\t[\n\t\t\t'Falkland Islands (Islas Malvinas)',\n\t\t\tCountryISO.FalklandIslands,\n\t\t\t'500'\n\t\t],\n\t\t[\n\t\t\t'Faroe Islands (Føroyar)',\n\t\t\tCountryISO.FaroeIslands,\n\t\t\t'298'\n\t\t],\n\t\t[\n\t\t\t'Fiji',\n\t\t\tCountryISO.Fiji,\n\t\t\t'679'\n\t\t],\n\t\t[\n\t\t\t'Finland (Suomi)',\n\t\t\tCountryISO.Finland,\n\t\t\t'358',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'France',\n\t\t\tCountryISO.France,\n\t\t\t'33'\n\t\t],\n\t\t[\n\t\t\t'French Guiana (Guyane française)',\n\t\t\tCountryISO.FrenchGuiana,\n\t\t\t'594'\n\t\t],\n\t\t[\n\t\t\t'French Polynesia (Polynésie française)',\n\t\t\tCountryISO.FrenchPolynesia,\n\t\t\t'689'\n\t\t],\n\t\t[\n\t\t\t'Gabon',\n\t\t\tCountryISO.Gabon,\n\t\t\t'241'\n\t\t],\n\t\t[\n\t\t\t'Gambia',\n\t\t\tCountryISO.Gambia,\n\t\t\t'220'\n\t\t],\n\t\t[\n\t\t\t'Georgia (საქართველო)',\n\t\t\tCountryISO.Georgia,\n\t\t\t'995'\n\t\t],\n\t\t[\n\t\t\t'Germany (Deutschland)',\n\t\t\tCountryISO.Germany,\n\t\t\t'49'\n\t\t],\n\t\t[\n\t\t\t'Ghana (Gaana)',\n\t\t\tCountryISO.Ghana,\n\t\t\t'233'\n\t\t],\n\t\t[\n\t\t\t'Gibraltar',\n\t\t\tCountryISO.Gibraltar,\n\t\t\t'350'\n\t\t],\n\t\t[\n\t\t\t'Greece (Ελλάδα)',\n\t\t\tCountryISO.Greece,\n\t\t\t'30'\n\t\t],\n\t\t[\n\t\t\t'Greenland (Kalaallit Nunaat)',\n\t\t\tCountryISO.Greenland,\n\t\t\t'299'\n\t\t],\n\t\t[\n\t\t\t'Grenada',\n\t\t\tCountryISO.Grenada,\n\t\t\t'1473'\n\t\t],\n\t\t[\n\t\t\t'Guadeloupe',\n\t\t\tCountryISO.Guadeloupe,\n\t\t\t'590',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Guam',\n\t\t\t'gu',\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'671',\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Guatemala',\n\t\t\tCountryISO.Guatemala,\n\t\t\t'502'\n\t\t],\n\t\t[\n\t\t\t'Guernsey',\n\t\t\tCountryISO.Guernsey,\n\t\t\t'44',\n\t\t\t1,\n\t\t\t[1481]\n\t\t],\n\t\t[\n\t\t\t'Guinea (Guinée)',\n\t\t\tCountryISO.Guinea,\n\t\t\t'224'\n\t\t],\n\t\t[\n\t\t\t'Guinea-Bissau (Guiné Bissau)',\n\t\t\tCountryISO.GuineaBissau,\n\t\t\t'245'\n\t\t],\n\t\t[\n\t\t\t'Guyana',\n\t\t\tCountryISO.Guyana,\n\t\t\t'592'\n\t\t],\n\t\t[\n\t\t\t'Haiti',\n\t\t\tCountryISO.Haiti,\n\t\t\t'509'\n\t\t],\n\t\t[\n\t\t\t'Honduras',\n\t\t\tCountryISO.Honduras,\n\t\t\t'504'\n\t\t],\n\t\t[\n\t\t\t'Hong Kong (香港)',\n\t\t\tCountryISO.HongKong,\n\t\t\t'852'\n\t\t],\n\t\t[\n\t\t\t'Hungary (Magyarország)',\n\t\t\tCountryISO.Hungary,\n\t\t\t'36'\n\t\t],\n\t\t[\n\t\t\t'Iceland (Ísland)',\n\t\t\tCountryISO.Iceland,\n\t\t\t'354'\n\t\t],\n\t\t[\n\t\t\t'India (भारत)',\n\t\t\tCountryISO.India,\n\t\t\t'91'\n\t\t],\n\t\t[\n\t\t\t'Indonesia',\n\t\t\tCountryISO.Indonesia,\n\t\t\t'62'\n\t\t],\n\t\t[\n\t\t\t'Iran (‫ایران‬‎)',\n\t\t\tCountryISO.Iran,\n\t\t\t'98'\n\t\t],\n\t\t[\n\t\t\t'Iraq (‫العراق‬‎)',\n\t\t\tCountryISO.Iraq,\n\t\t\t'964'\n\t\t],\n\t\t[\n\t\t\t'Ireland',\n\t\t\tCountryISO.Ireland,\n\t\t\t'353'\n\t\t],\n\t\t[\n\t\t\t'Isle of Man',\n\t\t\tCountryISO.IsleOfMan,\n\t\t\t'44',\n\t\t\t2,\n\t\t\t[1624]\n\t\t],\n\t\t[\n\t\t\t'Israel (‫ישראל‬‎)',\n\t\t\tCountryISO.Israel,\n\t\t\t'972'\n\t\t],\n\t\t[\n\t\t\t'Italy (Italia)',\n\t\t\tCountryISO.Italy,\n\t\t\t'39',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Jamaica',\n\t\t\t'jm',\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'876',\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Japan (日本)',\n\t\t\tCountryISO.Japan,\n\t\t\t'81'\n\t\t],\n\t\t[\n\t\t\t'Jersey',\n\t\t\tCountryISO.Jersey,\n\t\t\t'44',\n\t\t\t3,\n\t\t\t[1534]\n\t\t],\n\t\t[\n\t\t\t'Jordan (‫الأردن‬‎)',\n\t\t\tCountryISO.Jordan,\n\t\t\t'962'\n\t\t],\n\t\t[\n\t\t\t'Kazakhstan (Казахстан)',\n\t\t\tCountryISO.Kazakhstan,\n\t\t\t'7',\n\t\t\t1\n\t\t],\n\t\t[\n\t\t\t'Kenya',\n\t\t\tCountryISO.Kenya,\n\t\t\t'254'\n\t\t],\n\t\t[\n\t\t\t'Kiribati',\n\t\t\tCountryISO.Kiribati,\n\t\t\t'686'\n\t\t],\n\t\t[\n\t\t\t'Kosovo',\n\t\t\tCountryISO.Kosovo,\n\t\t\t'383'\n\t\t],\n\t\t[\n\t\t\t'Kuwait (‫الكويت‬‎)',\n\t\t\tCountryISO.Kuwait,\n\t\t\t'965'\n\t\t],\n\t\t[\n\t\t\t'Kyrgyzstan (Кыргызстан)',\n\t\t\tCountryISO.Kyrgyzstan,\n\t\t\t'996'\n\t\t],\n\t\t[\n\t\t\t'Laos (ລາວ)',\n\t\t\tCountryISO.Laos,\n\t\t\t'856'\n\t\t],\n\t\t[\n\t\t\t'Latvia (Latvija)',\n\t\t\tCountryISO.Latvia,\n\t\t\t'371'\n\t\t],\n\t\t[\n\t\t\t'Lebanon (‫لبنان‬‎)',\n\t\t\tCountryISO.Lebanon,\n\t\t\t'961'\n\t\t],\n\t\t[\n\t\t\t'Lesotho',\n\t\t\tCountryISO.Lesotho,\n\t\t\t'266'\n\t\t],\n\t\t[\n\t\t\t'Liberia',\n\t\t\tCountryISO.Liberia,\n\t\t\t'231'\n\t\t],\n\t\t[\n\t\t\t'Libya (‫ليبيا‬‎)',\n\t\t\tCountryISO.Libya,\n\t\t\t'218'\n\t\t],\n\t\t[\n\t\t\t'Liechtenstein',\n\t\t\tCountryISO.Liechtenstein,\n\t\t\t'423'\n\t\t],\n\t\t[\n\t\t\t'Lithuania (Lietuva)',\n\t\t\tCountryISO.Lithuania,\n\t\t\t'370'\n\t\t],\n\t\t[\n\t\t\t'Luxembourg',\n\t\t\tCountryISO.Luxembourg,\n\t\t\t'352'\n\t\t],\n\t\t[\n\t\t\t'Macau (澳門)',\n\t\t\tCountryISO.Macau,\n\t\t\t'853'\n\t\t],\n\t\t[\n\t\t\t'Macedonia (FYROM) (Македонија)',\n\t\t\tCountryISO.Macedonia,\n\t\t\t'389'\n\t\t],\n\t\t[\n\t\t\t'Madagascar (Madagasikara)',\n\t\t\tCountryISO.Madagascar,\n\t\t\t'261'\n\t\t],\n\t\t[\n\t\t\t'Malawi',\n\t\t\tCountryISO.Malawi,\n\t\t\t'265'\n\t\t],\n\t\t[\n\t\t\t'Malaysia',\n\t\t\tCountryISO.Malaysia,\n\t\t\t'60'\n\t\t],\n\t\t[\n\t\t\t'Maldives',\n\t\t\tCountryISO.Maldives,\n\t\t\t'960'\n\t\t],\n\t\t[\n\t\t\t'Mali',\n\t\t\tCountryISO.Mali,\n\t\t\t'223'\n\t\t],\n\t\t[\n\t\t\t'Malta',\n\t\t\tCountryISO.Malta,\n\t\t\t'356'\n\t\t],\n\t\t[\n\t\t\t'Marshall Islands',\n\t\t\tCountryISO.MarshallIslands,\n\t\t\t'692'\n\t\t],\n\t\t[\n\t\t\t'Martinique',\n\t\t\tCountryISO.Martinique,\n\t\t\t'596'\n\t\t],\n\t\t[\n\t\t\t'Mauritania (‫موريتانيا‬‎)',\n\t\t\tCountryISO.Mauritania,\n\t\t\t'222'\n\t\t],\n\t\t[\n\t\t\t'Mauritius (Moris)',\n\t\t\tCountryISO.Mauritius,\n\t\t\t'230'\n\t\t],\n\t\t[\n\t\t\t'Mayotte',\n\t\t\tCountryISO.Mayotte,\n\t\t\t'262',\n\t\t\t1\n\t\t],\n\t\t[\n\t\t\t'Mexico (México)',\n\t\t\tCountryISO.Mexico,\n\t\t\t'52'\n\t\t],\n\t\t[\n\t\t\t'Micronesia',\n\t\t\tCountryISO.Micronesia,\n\t\t\t'691'\n\t\t],\n\t\t[\n\t\t\t'Moldova (Republica Moldova)',\n\t\t\tCountryISO.Moldova,\n\t\t\t'373'\n\t\t],\n\t\t[\n\t\t\t'Monaco',\n\t\t\tCountryISO.Monaco,\n\t\t\t'377'\n\t\t],\n\t\t[\n\t\t\t'Mongolia (Монгол)',\n\t\t\tCountryISO.Mongolia,\n\t\t\t'976'\n\t\t],\n\t\t[\n\t\t\t'Montenegro (Crna Gora)',\n\t\t\tCountryISO.Montenegro,\n\t\t\t'382'\n\t\t],\n\t\t[\n\t\t\t'Montserrat',\n\t\t\t'ms',\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'664',\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Morocco (‫المغرب‬‎)',\n\t\t\tCountryISO.Morocco,\n\t\t\t'212',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Mozambique (Moçambique)',\n\t\t\tCountryISO.Mozambique,\n\t\t\t'258'\n\t\t],\n\t\t[\n\t\t\t'Myanmar (Burma) (မြန်မာ)',\n\t\t\tCountryISO.Myanmar,\n\t\t\t'95'\n\t\t],\n\t\t[\n\t\t\t'Namibia (Namibië)',\n\t\t\tCountryISO.Namibia,\n\t\t\t'264'\n\t\t],\n\t\t[\n\t\t\t'Nauru',\n\t\t\tCountryISO.Nauru,\n\t\t\t'674'\n\t\t],\n\t\t[\n\t\t\t'Nepal (नेपाल)',\n\t\t\tCountryISO.Nepal,\n\t\t\t'977'\n\t\t],\n\t\t[\n\t\t\t'Netherlands (Nederland)',\n\t\t\tCountryISO.Netherlands,\n\t\t\t'31'\n\t\t],\n\t\t[\n\t\t\t'New Caledonia (Nouvelle-Calédonie)',\n\t\t\tCountryISO.NewCaledonia,\n\t\t\t'687'\n\t\t],\n\t\t[\n\t\t\t'New Zealand',\n\t\t\tCountryISO.NewZealand,\n\t\t\t'64'\n\t\t],\n\t\t[\n\t\t\t'Nicaragua',\n\t\t\tCountryISO.Nicaragua,\n\t\t\t'505'\n\t\t],\n\t\t[\n\t\t\t'Niger (Nijar)',\n\t\t\tCountryISO.Niger,\n\t\t\t'227'\n\t\t],\n\t\t[\n\t\t\t'Nigeria',\n\t\t\tCountryISO.Nigeria,\n\t\t\t'234'\n\t\t],\n\t\t[\n\t\t\t'Niue',\n\t\t\tCountryISO.Niue,\n\t\t\t'683'\n\t\t],\n\t\t[\n\t\t\t'Norfolk Island',\n\t\t\tCountryISO.NorfolkIsland,\n\t\t\t'672'\n\t\t],\n\t\t[\n\t\t\t'North Korea (조선 민주주의 인민 공화국)',\n\t\t\tCountryISO.NorthKorea,\n\t\t\t'850'\n\t\t],\n\t\t[\n\t\t\t'Northern Mariana Islands',\n\t\t\tCountryISO.NorthernMarianaIslands,\n\t\t\t'1670'\n\t\t],\n\t\t[\n\t\t\t'Norway (Norge)',\n\t\t\tCountryISO.Norway,\n\t\t\t'47',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Oman (‫عُمان‬‎)',\n\t\t\tCountryISO.Oman,\n\t\t\t'968'\n\t\t],\n\t\t[\n\t\t\t'Pakistan (‫پاکستان‬‎)',\n\t\t\tCountryISO.Pakistan,\n\t\t\t'92'\n\t\t],\n\t\t[\n\t\t\t'Palau',\n\t\t\tCountryISO.Palau,\n\t\t\t'680'\n\t\t],\n\t\t[\n\t\t\t'Palestine (‫فلسطين‬‎)',\n\t\t\tCountryISO.Palestine,\n\t\t\t'970'\n\t\t],\n\t\t[\n\t\t\t'Panama (Panamá)',\n\t\t\tCountryISO.Panama,\n\t\t\t'507'\n\t\t],\n\t\t[\n\t\t\t'Papua New Guinea',\n\t\t\tCountryISO.PapuaNewGuinea,\n\t\t\t'675'\n\t\t],\n\t\t[\n\t\t\t'Paraguay',\n\t\t\tCountryISO.Paraguay,\n\t\t\t'595'\n\t\t],\n\t\t[\n\t\t\t'Peru (Perú)',\n\t\t\tCountryISO.Peru,\n\t\t\t'51'\n\t\t],\n\t\t[\n\t\t\t'Philippines',\n\t\t\tCountryISO.Philippines,\n\t\t\t'63'\n\t\t],\n\t\t[\n\t\t\t'Poland (Polska)',\n\t\t\tCountryISO.Poland,\n\t\t\t'48'\n\t\t],\n\t\t[\n\t\t\t'Portugal',\n\t\t\tCountryISO.Portugal,\n\t\t\t'351'\n\t\t],\n\t\t[\n\t\t\t'Puerto Rico',\n\t\t\tCountryISO.PuertoRico,\n\t\t\t'1',\n\t\t\t3,\n\t\t\t['787', '939']\n\t\t],\n\t\t[\n\t\t\t'Qatar (‫قطر‬‎)',\n\t\t\tCountryISO.Qatar,\n\t\t\t'974'\n\t\t],\n\t\t[\n\t\t\t'Réunion (La Réunion)',\n\t\t\tCountryISO.Réunion,\n\t\t\t'262',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Romania (România)',\n\t\t\tCountryISO.Romania,\n\t\t\t'40'\n\t\t],\n\t\t[\n\t\t\t'Russia (Россия)',\n\t\t\tCountryISO.Russia,\n\t\t\t'7',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Rwanda',\n\t\t\tCountryISO.Rwanda,\n\t\t\t'250'\n\t\t],\n\t\t[\n\t\t\t'Saint Barthélemy (Saint-Barthélemy)',\n\t\t\tCountryISO.SaintBarthélemy,\n\t\t\t'590',\n\t\t\t1\n\t\t],\n\t\t[\n\t\t\t'Saint Helena',\n\t\t\tCountryISO.SaintHelena,\n\t\t\t'290'\n\t\t],\n\t\t[\n\t\t\t'Saint Kitts and Nevis',\n\t\t\tCountryISO.SaintKittsAndNevis,\n\t\t\t'1869'\n\t\t],\n\t\t[\n\t\t\t'Saint Lucia',\n\t\t\t'lc',\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'758',\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Saint Martin (Saint-Martin (partie française))',\n\t\t\tCountryISO.SaintMartin,\n\t\t\t'590',\n\t\t\t2\n\t\t],\n\t\t[\n\t\t\t'Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)',\n\t\t\tCountryISO.SaintPierreAndMiquelon,\n\t\t\t'508'\n\t\t],\n\t\t[\n\t\t\t'Saint Vincent and the Grenadines',\n\t\t\t'vc',\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'784',\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Samoa',\n\t\t\tCountryISO.Samoa,\n\t\t\t'685'\n\t\t],\n\t\t[\n\t\t\t'San Marino',\n\t\t\tCountryISO.SanMarino,\n\t\t\t'378'\n\t\t],\n\t\t[\n\t\t\t'São Tomé and Príncipe (São Tomé e Príncipe)',\n\t\t\tCountryISO.SãoToméAndPríncipe,\n\t\t\t'239'\n\t\t],\n\t\t[\n\t\t\t'Saudi Arabia (‫المملكة العربية السعودية‬‎)',\n\t\t\tCountryISO.SaudiArabia,\n\t\t\t'966'\n\t\t],\n\t\t[\n\t\t\t'Senegal (Sénégal)',\n\t\t\tCountryISO.Senegal,\n\t\t\t'221'\n\t\t],\n\t\t[\n\t\t\t'Serbia (Србија)',\n\t\t\tCountryISO.Serbia,\n\t\t\t'381'\n\t\t],\n\t\t[\n\t\t\t'Seychelles',\n\t\t\tCountryISO.Seychelles,\n\t\t\t'248'\n\t\t],\n\t\t[\n\t\t\t'Sierra Leone',\n\t\t\tCountryISO.SierraLeone,\n\t\t\t'232'\n\t\t],\n\t\t[\n\t\t\t'Singapore',\n\t\t\tCountryISO.Singapore,\n\t\t\t'65'\n\t\t],\n\t\t[\n\t\t\t'Sint Maarten',\n\t\t\t'sx',\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'721',\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Slovakia (Slovensko)',\n\t\t\tCountryISO.Slovakia,\n\t\t\t'421'\n\t\t],\n\t\t[\n\t\t\t'Slovenia (Slovenija)',\n\t\t\tCountryISO.Slovenia,\n\t\t\t'386'\n\t\t],\n\t\t[\n\t\t\t'Solomon Islands',\n\t\t\tCountryISO.SolomonIslands,\n\t\t\t'677'\n\t\t],\n\t\t[\n\t\t\t'Somalia (Soomaaliya)',\n\t\t\tCountryISO.Somalia,\n\t\t\t'252'\n\t\t],\n\t\t[\n\t\t\t'South Africa',\n\t\t\tCountryISO.SouthAfrica,\n\t\t\t'27'\n\t\t],\n\t\t[\n\t\t\t'South Korea (대한민국)',\n\t\t\tCountryISO.SouthKorea,\n\t\t\t'82'\n\t\t],\n\t\t[\n\t\t\t'South Sudan (‫جنوب السودان‬‎)',\n\t\t\tCountryISO.SouthSudan,\n\t\t\t'211'\n\t\t],\n\t\t[\n\t\t\t'Spain (España)',\n\t\t\tCountryISO.Spain,\n\t\t\t'34'\n\t\t],\n\t\t[\n\t\t\t'Sri Lanka (ශ්‍රී ලංකාව)',\n\t\t\tCountryISO.SriLanka,\n\t\t\t'94'\n\t\t],\n\t\t[\n\t\t\t'Sudan (‫السودان‬‎)',\n\t\t\tCountryISO.Sudan,\n\t\t\t'249'\n\t\t],\n\t\t[\n\t\t\t'Suriname',\n\t\t\tCountryISO.Suriname,\n\t\t\t'597'\n\t\t],\n\t\t[\n\t\t\t'Svalbard and Jan Mayen',\n\t\t\tCountryISO.SvalbardAndJanMayen,\n\t\t\t'47',\n\t\t\t1\n\t\t],\n\t\t[\n\t\t\t'Swaziland',\n\t\t\tCountryISO.Swaziland,\n\t\t\t'268'\n\t\t],\n\t\t[\n\t\t\t'Sweden (Sverige)',\n\t\t\tCountryISO.Sweden,\n\t\t\t'46'\n\t\t],\n\t\t[\n\t\t\t'Switzerland (Schweiz)',\n\t\t\tCountryISO.Switzerland,\n\t\t\t'41'\n\t\t],\n\t\t[\n\t\t\t'Syria (‫سوريا‬‎)',\n\t\t\tCountryISO.Syria,\n\t\t\t'963'\n\t\t],\n\t\t[\n\t\t\t'Taiwan (台灣)',\n\t\t\tCountryISO.Taiwan,\n\t\t\t'886'\n\t\t],\n\t\t[\n\t\t\t'Tajikistan',\n\t\t\tCountryISO.Tajikistan,\n\t\t\t'992'\n\t\t],\n\t\t[\n\t\t\t'Tanzania',\n\t\t\tCountryISO.Tanzania,\n\t\t\t'255'\n\t\t],\n\t\t[\n\t\t\t'Thailand (ไทย)',\n\t\t\tCountryISO.Thailand,\n\t\t\t'66'\n\t\t],\n\t\t[\n\t\t\t'Timor-Leste',\n\t\t\tCountryISO.TimorLeste,\n\t\t\t'670'\n\t\t],\n\t\t[\n\t\t\t'Togo',\n\t\t\tCountryISO.Togo,\n\t\t\t'228'\n\t\t],\n\t\t[\n\t\t\t'Tokelau',\n\t\t\tCountryISO.Tokelau,\n\t\t\t'690'\n\t\t],\n\t\t[\n\t\t\t'Tonga',\n\t\t\tCountryISO.Tonga,\n\t\t\t'676'\n\t\t],\n\t\t[\n\t\t\t'Trinidad and Tobago',\n\t\t\t'tt',\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'868',\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Tunisia (‫تونس‬‎)',\n\t\t\tCountryISO.Tunisia,\n\t\t\t'216'\n\t\t],\n\t\t[\n\t\t\t'Turkey (Türkiye)',\n\t\t\tCountryISO.Turkey,\n\t\t\t'90'\n\t\t],\n\t\t[\n\t\t\t'Turkmenistan',\n\t\t\tCountryISO.Turkmenistan,\n\t\t\t'993'\n\t\t],\n\t\t[\n\t\t\t'Turks and Caicos Islands',\n\t\t\tCountryISO.TurksAndCaicosIslands,\n\t\t\t'1649'\n\t\t],\n\t\t[\n\t\t\t'Tuvalu',\n\t\t\tCountryISO.Tuvalu,\n\t\t\t'688'\n\t\t],\n\t\t[\n\t\t\t'U.S. Virgin Islands',\n\t\t\t'vi',\n\t\t\t'1',\n\t\t\t1,\n\t\t\t[\n\t\t\t\t'340',\n\t\t\t]\n\t\t],\n\t\t[\n\t\t\t'Uganda',\n\t\t\tCountryISO.Uganda,\n\t\t\t'256'\n\t\t],\n\t\t[\n\t\t\t'Ukraine (Україна)',\n\t\t\tCountryISO.Ukraine,\n\t\t\t'380'\n\t\t],\n\t\t[\n\t\t\t'United Arab Emirates (‫الإمارات العربية المتحدة‬‎)',\n\t\t\tCountryISO.UnitedArabEmirates,\n\t\t\t'971'\n\t\t],\n\t\t[\n\t\t\t'United Kingdom',\n\t\t\tCountryISO.UnitedKingdom,\n\t\t\t'44',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'United States',\n\t\t\tCountryISO.UnitedStates,\n\t\t\t'1',\n\t\t\t0\n\t\t],\n\t\t[\n\t\t\t'Uruguay',\n\t\t\tCountryISO.Uruguay,\n\t\t\t'598'\n\t\t],\n\t\t[\n\t\t\t'Uzbekistan (Oʻzbekiston)',\n\t\t\tCountryISO.Uzbekistan,\n\t\t\t'998'\n\t\t],\n\t\t[\n\t\t\t'Vanuatu',\n\t\t\tCountryISO.Vanuatu,\n\t\t\t'678'\n\t\t],\n\t\t[\n\t\t\t'Vatican City (Città del Vaticano)',\n\t\t\tCountryISO.VaticanCity,\n\t\t\t'39',\n\t\t\t1\n\t\t],\n\t\t[\n\t\t\t'Venezuela',\n\t\t\tCountryISO.Venezuela,\n\t\t\t'58'\n\t\t],\n\t\t[\n\t\t\t'Vietnam (Việt Nam)',\n\t\t\tCountryISO.Vietnam,\n\t\t\t'84'\n\t\t],\n\t\t[\n\t\t\t'Wallis and Futuna',\n\t\t\tCountryISO.WallisAndFutuna,\n\t\t\t'681'\n\t\t],\n\t\t[\n\t\t\t'Western Sahara (‫الصحراء الغربية‬‎)',\n\t\t\tCountryISO.WesternSahara,\n\t\t\t'212',\n\t\t\t1\n\t\t],\n\t\t[\n\t\t\t'Yemen (‫اليمن‬‎)',\n\t\t\tCountryISO.Yemen,\n\t\t\t'967'\n\t\t],\n\t\t[\n\t\t\t'Zambia',\n\t\t\tCountryISO.Zambia,\n\t\t\t'260'\n\t\t],\n\t\t[\n\t\t\t'Zimbabwe',\n\t\t\tCountryISO.Zimbabwe,\n\t\t\t'263'\n\t\t],\n\t\t[\n\t\t\t'Åland Islands',\n\t\t\tCountryISO.ÅlandIslands,\n\t\t\t'358',\n\t\t\t1\n\t\t]\n\t];\n}","export enum PhoneNumberFormat {\n\tInternational = 'INTERNATIONAL',\n\tNational = 'NATIONAL',\n}\n","import * as lpn from 'google-libphonenumber';\n\n/*\nWe use \"control: any\" instead of \"control: FormControl\" to silence:\n\"Property 'nativeElement' does not exist on type 'FormControl'\".\nThis happens because I've expanded control with nativeElement via\n'NativeElementInjectorDirective' to get an access to the element.\nMore about this approach and reasons for this:\nhttps://github.com/angular/angular/issues/18025\nhttps://stackoverflow.com/a/54075119/1617590\n*/\nexport const phoneNumberValidator = (control: any) => {\n\tif (!control.value) {\n\t\treturn;\n\t}\n\t// Find <input> inside injected nativeElement and get its \"id\".\n\tconst el: HTMLElement = control.nativeElement as HTMLElement;\n\tconst inputBox: HTMLInputElement = el\n\t\t? el.querySelector('input[type=\"tel\"]')\n\t\t: undefined;\n\tif (inputBox) {\n\t\tconst id = inputBox.id;\n\t\tconst isCheckValidation = inputBox.getAttribute('validation');\n\t\tif (isCheckValidation === 'true') {\n\t\t\tconst isRequired = control.errors && control.errors.required === true;\n\t\t\tconst error = { validatePhoneNumber: { valid: false } };\n\n\t\t\tinputBox.setCustomValidity('Invalid field.');\n\n\t\t\tlet number: lpn.PhoneNumber;\n\n\t\t\ttry {\n\t\t\t\tnumber = lpn.PhoneNumberUtil.getInstance().parse(\n\t\t\t\t\tcontrol.value.number,\n\t\t\t\t\tcontrol.value.countryCode\n\t\t\t\t);\n\t\t\t} catch (e) {\n\t\t\t\tif (isRequired === true) {\n\t\t\t\t\treturn error;\n\t\t\t\t} else {\n\t\t\t\t\tinputBox.setCustomValidity('');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (control.value) {\n\t\t\t\tif (!number) {\n\t\t\t\t\treturn error;\n\t\t\t\t} else {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!lpn.PhoneNumberUtil.getInstance().isValidNumberForRegion(\n\t\t\t\t\t\t\tnumber,\n\t\t\t\t\t\t\tcontrol.value.countryCode\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn error;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinputBox.setCustomValidity('');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isCheckValidation === 'false') {\n\t\t\tinputBox.setCustomValidity('');\n\n\t\t\tcontrol.clearValidators();\n\t\t}\n\t}\n\treturn;\n};\n","import * as lpn from 'google-libphonenumber';\n\nimport {\n\tComponent,\n\tElementRef,\n\tEventEmitter,\n\tforwardRef,\n\tInput,\n\tOnChanges,\n\tOnInit,\n\tOutput,\n\tSimpleChanges,\n\tViewChild,\n} from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { setTheme } from 'ngx-bootstrap/utils';\n\nimport { CountryCode } from './data/country-code';\nimport { CountryISO } from './enums/country-iso.enum';\nimport { SearchCountryField } from './enums/search-country-field.enum';\nimport type { ChangeData } from './interfaces/change-data';\nimport type { Country } from './model/country.model';\nimport { phoneNumberValidator } from './ngx-intl-tel-input.validator';\nimport { PhoneNumberFormat } from './enums/phone-number-format.enum';\n\n@Component({\n\t// tslint:disable-next-line: component-selector\n\tselector: 'ngx-intl-tel-input',\n\ttemplateUrl: './ngx-intl-tel-input.component.html',\n\tstyleUrls: ['./bootstrap-dropdown.css', './ngx-intl-tel-input.component.css'],\n\tproviders: [\n\t\tCountryCode,\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\t// tslint:disable-next-line:no-forward-ref\n\t\t\tuseExisting: forwardRef(() => NgxIntlTelInputComponent),\n\t\t\tmulti: true,\n\t\t},\n\t\t{\n\t\t\tprovide: NG_VALIDATORS,\n\t\t\tuseValue: phoneNumberValidator,\n\t\t\tmulti: true,\n\t\t},\n\t],\n})\nexport class NgxIntlTelInputComponent implements OnInit, OnChanges {\n\t@Input() value = '';\n\t@Input() preferredCountries: Array<string> = [];\n\t@Input() enablePlaceholder = true;\n\t@Input() customPlaceholder: string;\n\t@Input() numberFormat: PhoneNumberFormat = PhoneNumberFormat.International;\n\t@Input() cssClass = 'form-control';\n\t@Input() onlyCountries: Array<string> = [];\n\t@Input() enableAutoCountrySelect = true;\n\t@Input() searchCountryFlag = false;\n\t@Input() searchCountryField: SearchCountryField[] = [SearchCountryField.All];\n\t@Input() searchCountryPlaceholder = 'Search Country';\n\t@Input() maxLength = '';\n\t@Input() selectFirstCountry = true;\n\t@Input() selectedCountryISO: CountryISO;\n\t@Input() phoneValidation = true;\n\t@Input() inputId = 'phone';\n\t@Input() separateDialCode = false;\n\tseparateDialCodeClass: string;\n\n\t@Output() readonly countryChange = new EventEmitter<Country>();\n\n\tselectedCountry: Country = {\n\t\tareaCodes: undefined,\n\t\tdialCode: '',\n\t\thtmlId: '',\n\t\tflagClass: '',\n\t\tiso2: '',\n\t\tname: '',\n\t\tplaceHolder: '',\n\t\tpriority: 0,\n\t};\n\n\tphoneNumber = '';\n\tallCountries: Array<Country> = [];\n\tpreferredCountriesInDropDown: Array<Country> = [];\n\t// Has to be 'any' to prevent a need to install @types/google-libphonenumber by the package user...\n\tphoneUtil: any = lpn.PhoneNumberUtil.getInstance();\n\tdisabled = false;\n\terrors: Array<any> = ['Phone number is required.'];\n\tcountrySearchText = '';\n\n\t@ViewChild('countryList') countryList: ElementRef;\n\n\tonTouched = () => {};\n\tpropagateChange = (_: ChangeData) => {};\n\n\tconstructor(private countryCodeData: CountryCode) {\n\t\t// If this is not set, ngx-bootstrap will try to use the bs3 CSS (which is not what we've embedded) and will\n\t\t// Add the wrong classes and such\n\t\tsetTheme('bs4');\n\t}\n\n\tngOnInit() {\n\t\tthis.init();\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tconst selectedISO = changes['selectedCountryISO'];\n\t\tif (\n\t\t\tthis.allCountries &&\n\t\t\tselectedISO &&\n\t\t\tselectedISO.currentValue !== selectedISO.previousValue\n\t\t) {\n\t\t\tthis.updateSelectedCountry();\n\t\t}\n\t\tif (changes.preferredCountries) {\n\t\t\tthis.updatePreferredCountries();\n\t\t}\n\t\tthis.checkSeparateDialCodeStyle();\n\t}\n\n\t/*\n\t\tThis is a wrapper method to avoid calling this.ngOnInit() in writeValue().\n\t\tRef: http://codelyzer.com/rules/no-life-cycle-call/\n\t*/\n\tinit() {\n\t\tthis.fetchCountryData();\n\t\tif (this.preferredCountries.length) {\n\t\t\tthis.updatePreferredCountries();\n\t\t}\n\t\tif (this.onlyCountries.length) {\n\t\t\tthis.allCountries = this.allCountries.filter((c) =>\n\t\t\t\tthis.onlyCountries.includes(c.iso2)\n\t\t\t);\n\t\t}\n\t\tif (this.selectFirstCountry) {\n\t\t\tif (this.preferredCountriesInDropDown.length) {\n\t\t\t\tthis.setSelectedCountry(this.preferredCountriesInDropDown[0]);\n\t\t\t} else {\n\t\t\t\tthis.setSelectedCountry(this.allCountries[0]);\n\t\t\t}\n\t\t}\n\t\tthis.updateSelectedCountry();\n\t\tthis.checkSeparateDialCodeStyle();\n\t}\n\n\tsetSelectedCountry(country: Country) {\n\t\tthis.selectedCountry = country;\n\t\tthis.countryChange.emit(country);\n\t}\n\n\t/**\n\t * Search country based on country name, iso2, dialCode or all of them.\n\t */\n\tpublic searchCountry() {\n\t\tif (!this.countrySearchText) {\n\t\t\tthis.countryList.nativeElement\n\t\t\t\t.querySelector('.iti__country-list li')\n\t\t\t\t.scrollIntoView({\n\t\t\t\t\tbehavior: 'smooth',\n\t\t\t\t\tblock: 'nearest',\n\t\t\t\t\tinline: 'nearest',\n\t\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tconst countrySearchTextLower = this.countrySearchText.toLowerCase();\n\t\tconst country = this.allCountries.filter((c) => {\n\t\t\tif (this.searchCountryField.indexOf(SearchCountryField.All) > -1) {\n\t\t\t\t// Search in all fields\n\t\t\t\tif (c.iso2.toLowerCase().startsWith(countrySearchTextLower)) {\n\t\t\t\t\treturn c;\n\t\t\t\t}\n\t\t\t\tif (c.name.toLowerCase().startsWith(countrySearchTextLower)) {\n\t\t\t\t\treturn c;\n\t\t\t\t}\n\t\t\t\tif (c.dialCode.startsWith(this.countrySearchText)) {\n\t\t\t\t\treturn c;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Or search by specific SearchCountryField(s)\n\t\t\t\tif (this.searchCountryField.indexOf(SearchCountryField.Iso2) > -1) {\n\t\t\t\t\tif (c.iso2.toLowerCase().startsWith(countrySearchTextLower)) {\n\t\t\t\t\t\treturn c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.searchCountryField.indexOf(SearchCountryField.Name) > -1) {\n\t\t\t\t\tif (c.name.toLowerCase().startsWith(countrySearchTextLower)) {\n\t\t\t\t\t\treturn c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.searchCountryField.indexOf(SearchCountryField.DialCode) > -1) {\n\t\t\t\t\tif (c.dialCode.startsWith(this.countrySearchText)) {\n\t\t\t\t\t\treturn c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (country.length > 0) {\n\t\t\tconst el = this.countryList.nativeElement.querySelector(\n\t\t\t\t'#' + country[0].htmlId\n\t\t\t);\n\t\t\tif (el) {\n\t\t\t\tel.scrollIntoView({\n\t\t\t\t\tbehavior: 'smooth',\n\t\t\t\t\tblock: 'nearest',\n\t\t\t\t\tinline: 'nearest',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.checkSeparateDialCodeStyle();\n\t}\n\n\tpublic onPhoneNumberChange(): void {\n\t\tlet countryCode: string | undefined;\n\t\t// Handle the case where the user sets the value programatically based on a persisted ChangeData obj.\n\t\tif (this.phoneNumber && typeof this.phoneNumber === 'object') {\n\t\t\tconst numberObj: ChangeData = this.phoneNumber;\n\t\t\tthis.phoneNumber = numberObj.number;\n\t\t\tcountryCode = numberObj.countryCode;\n\t\t}\n\n\t\tthis.value = this.phoneNumber;\n\t\tcountryCode = countryCode || this.selectedCountry.iso2;\n\t\tconst number = this.getParsedNumber(this.phoneNumber, countryCode);\n\n\t\t// auto select country based on the extension (and areaCode if needed) (e.g select Canada if number starts with +1 416)\n\t\tif (this.enableAutoCountrySelect) {\n\t\t\tcountryCode =\n\t\t\t\tnumber && number.getCountryCode()\n\t\t\t\t\t? this.getCountryIsoCode(number.getCountryCode(), number)\n\t\t\t\t\t: this.selectedCountry.iso2;\n\t\t\tif (countryCode && countryCode !== this.selectedCountry.iso2) {\n\t\t\t\tconst newCountry = this.allCountries\n\t\t\t\t\t.sort((a, b) => {\n\t\t\t\t\t\treturn a.priority - b.priority;\n\t\t\t\t\t})\n\t\t\t\t\t.find((c) => c.iso2 === countryCode);\n\t\t\t\tif (newCountry) {\n\t\t\t\t\tthis.selectedCountry = newCountry;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcountryCode = countryCode ? countryCode : this.selectedCountry.iso2;\n\n\t\tthis.checkSeparateDialCodeStyle();\n\n\t\tif (!this.value) {\n\t\t\t// Reason: avoid https://stackoverflow.com/a/54358133/1617590\n\t\t\t// tslint:disable-next-line: no-null-keyword\n\t\t\tthis.propagateChange(null);\n\t\t} else {\n\t\t\tconst intlNo = number\n\t\t\t\t? this.phoneUtil.format(number, lpn.PhoneNumberFormat.INTERNATIONAL)\n\t\t\t\t: '';\n\n\t\t\t// parse phoneNumber if separate dial code is needed\n\t\t\tif (this.separateDialCode && intlNo) {\n\t\t\t\tthis.value = this.removeDialCode(intlNo);\n\t\t\t}\n\n\t\t\tthis.propagateChange({\n\t\t\t\tnumber: this.value,\n\t\t\t\tinternationalNumber: intlNo,\n\t\t\t\tnationalNumber: number\n\t\t\t\t\t? this.phoneUtil.format(number, lpn.PhoneNumberFormat.NATIONAL)\n\t\t\t\t\t: '',\n\t\t\t\te164Number: number\n\t\t\t\t\t? this.phoneUtil.format(number, lpn.PhoneNumberFormat.E164)\n\t\t\t\t\t: '',\n\t\t\t\tcountryCode: countryCode.toUpperCase(),\n\t\t\t\tdialCode: '+' + this.selectedCountry.dialCode,\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic onCountrySelect(country: Country, el): void {\n\t\tthis.setSelectedCountry(country);\n\n\t\tthis.checkSeparateDialCodeStyle();\n\n\t\tif (this.phoneNumber && this.phoneNumber.length > 0) {\n\t\t\tthis.value = this.phoneNumber;\n\t\t\tconst number = this.getParsedNumber(\n\t\t\t\tthis.phoneNumber,\n\t\t\t\tthis.selectedCountry.iso2\n\t\t\t);\n\t\t\tconst intlNo = number\n\t\t\t\t? this.phoneUtil.format(number, lpn.PhoneNumberFormat.INTERNATIONAL)\n\t\t\t\t: '';\n\t\t\t// parse phoneNumber if separate dial code is needed\n\t\t\tif (this.separateDialCode && intlNo) {\n\t\t\t\tthis.value = this.removeDialCode(intlNo);\n\t\t\t}\n\n\t\t\tthis.propagateChange({\n\t\t\t\tnumber: this.value,\n\t\t\t\tinternationalNumber: intlNo,\n\t\t\t\tnationalNumber: number\n\t\t\t\t\t? this.phoneUtil.format(number, lpn.PhoneNumberFormat.NATIONAL)\n\t\t\t\t\t: '',\n\t\t\t\te164Number: number\n\t\t\t\t\t? this.phoneUtil.format(number, lpn.PhoneNumberFormat.E164)\n\t\t\t\t\t: '',\n\t\t\t\tcountryCode: this.selectedCountry.iso2.toUpperCase(),\n\t\t\t\tdialCode: '+' + this.selectedCountry.dialCode,\n\t\t\t});\n\t\t} else {\n\t\t\t// Reason: avoid https://stackoverflow.com/a/54358133/1617590\n\t\t\t// tslint:disable-next-line: no-null-keyword\n\t\t\tthis.propagateChange(null);\n\t\t}\n\n\t\tel.focus();\n\t}\n\n\tpublic onInputKeyPress(event: KeyboardEvent): void {\n\t\tconst allowedChars = /[0-9\\+\\-\\(\\)\\ ]/;\n\t\tconst allowedCtrlChars = /[axcv]/; // Allows copy-pasting\n\t\tconst allowedOtherKeys = [\n\t\t\t'ArrowLeft',\n\t\t\t'ArrowUp',\n\t\t\t'ArrowRight',\n\t\t\t'ArrowDown',\n\t\t\t'Home',\n\t\t\t'End',\n\t\t\t'Insert',\n\t\t\t'Delete',\n\t\t\t'Backspace',\n\t\t];\n\n\t\tif (\n\t\t\t!allowedChars.test(event.key) &&\n\t\t\t!(event.ctrlKey && allowedCtrlChars.test(event.key)) &&\n\t\t\t!allowedOtherKeys.includes(event.key)\n\t\t) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\tregisterOnChange(fn: any): void {\n\t\tthis.propagateChange = fn;\n\t}\n\n\tregisterOnTouched(fn: any) {\n\t\tthis.onTouched = fn;\n\t}\n\n\tsetDisabledState(isDisabled: boolean): void {\n\t\tthis.disabled = isDisabled;\n\t}\n\n\twriteValue(obj: any): void {\n\t\tif (obj === undefined) {\n\t\t\tthis.init();\n\t\t}\n\t\tthis.phoneNumber = obj;\n\t\tsetTimeout(() => {\n\t\t\tthis.onPhoneNumberChange();\n\t\t}, 1);\n\t}\n\n\tresolvePlaceholder(): string {\n\t\tlet placeholder = '';\n\t\tif (this.customPlaceholder) {\n\t\t\tplaceholder = this.customPlaceholder;\n\t\t} else if (this.selectedCountry.placeHolder) {\n\t\t\tplaceholder = this.selectedCountry.placeHolder;\n\t\t\tif (this.separateDialCode) {\n\t\t\t\tplaceholder = this.removeDialCode(placeholder);\n\t\t\t}\n\t\t}\n\t\treturn placeholder;\n\t}\n\n\t/* --------------------------------- Helpers -------------------------------- */\n\t/**\n\t * Returns parse PhoneNumber object.\n\t * @param phoneNumber string\n\t * @param countryCode string\n\t */\n\tprivate getParsedNumber(\n\t\tphoneNumber: string,\n\t\tcountryCode: string\n\t): lpn.PhoneNumber {\n\t\tlet number: lpn.PhoneNumber;\n\t\ttry {\n\t\t\tnumber = this.phoneUtil.parse(phoneNumber, countryCode.toUpperCase());\n\t\t} catch (e) {}\n\t\treturn number;\n\t}\n\n\t/**\n\t * Adjusts input alignment based on the dial code presentation style.\n\t */\n\tprivate checkSeparateDialCodeStyle() {\n\t\tif (this.separateDialCode && this.selectedCountry) {\n\t\t\tconst cntryCd = this.selectedCountry.dialCode;\n\t\t\tthis.separateDialCodeClass =\n\t\t\t\t'separate-dial-code iti-sdc-' + (cntryCd.length + 1);\n\t\t} else {\n\t\t\tthis.separateDialCodeClass = '';\n\t\t}\n\t}\n\n\t/**\n\t * Cleans dialcode from phone number string.\n\t * @param phoneNumber string\n\t */\n\tprivate removeDialCode(phoneNumber: string): string {\n\t\tconst number = this.getParsedNumber(phoneNumber, this.selectedCountry.iso2);\n\t\tphoneNumber = this.phoneUtil.format(\n\t\t\tnumber,\n\t\t\tlpn.PhoneNumberFormat[this.numberFormat]\n\t\t);\n\t\tif (phoneNumber.startsWith('+') && this.separateDialCode) {\n\t\t\tphoneNumber = phoneNumber.substr(phoneNumber.indexOf(' ') + 1);\n\t\t}\n\t\treturn phoneNumber;\n\t}\n\n\t/**\n\t * Sifts through all countries and returns iso code of the primary country\n\t * based on the number provided.\n\t * @param countryCode country code in number format\n\t * @param number PhoneNumber object\n\t */\n\tprivate getCountryIsoCode(\n\t\tcountryCode: number,\n\t\tnumber: lpn.PhoneNumber\n\t): string | undefined {\n\t\t// Will use this to match area code from the first numbers\n\t\tconst rawNumber = number['values_']['2'].toString();\n\t\t// List of all countries with countryCode (can be more than one. e.x. US, CA, DO, PR all have +1 countryCode)\n\t\tconst countries = this.allCountries.filter(\n\t\t\t(c) => c.dialCode === countryCode.toString()\n\t\t);\n\t\t// Main country is the country, which has no areaCodes specified in country-code.ts file.\n\t\tconst mainCountry = countries.find((c) => c.areaCodes === undefined);\n\t\t// Secondary countries are all countries, which have areaCodes specified in country-code.ts file.\n\t\tconst secondaryCountries = countries.filter(\n\t\t\t(c) => c.areaCodes !== undefined\n\t\t);\n\t\tlet matchedCountry = mainCountry ? mainCountry.iso2 : undefined;\n\n\t\t/*\n\t\t\tIterate over each secondary country and check if nationalNumber starts with any of areaCodes available.\n\t\t\tIf no matches found, fallback to the main country.\n\t\t*/\n\t\tsecondaryCountries.forEach((country) => {\n\t\t\tcountry.areaCodes.forEach((areaCode) => {\n\t\t\t\tif (rawNumber.startsWith(areaCode)) {\n\t\t\t\t\tmatchedCountry = country.iso2;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn matchedCountry;\n\t}\n\n\t/**\n\t * Gets formatted example phone number from phoneUtil.\n\t * @param countryCode string\n\t */\n\tprotected getPhoneNumberPlaceHolder(countryCode: string): string {\n\t\ttry {\n\t\t\treturn this.phoneUtil.format(\n\t\t\t\tthis.phoneUtil.getExampleNumber(countryCode),\n\t\t\t\tlpn.PhoneNumberFormat[this.numberFormat]\n\t\t\t);\n\t\t} catch (e) {\n\t\t\treturn e;\n\t\t}\n\t}\n\n\t/**\n\t * Clearing the list to avoid duplicates (https://github.com/webcat12345/ngx-intl-tel-input/issues/248)\n\t */\n\tprotected fetchCountryData(): void {\n\t\tthis.allCountries = [];\n\n\t\tthis.countryCodeData.allCountries.forEach((c) => {\n\t\t\tconst country: Country = {\n\t\t\t\tname: c[0].toString(),\n\t\t\t\tiso2: c[1].toString(),\n\t\t\t\tdialCode: c[2].toString(),\n\t\t\t\tpriority: +c[3] || 0,\n\t\t\t\tareaCodes: (c[4] as string[]) || undefined,\n\t\t\t\thtmlId: `iti-0__item-${c[1].toString()}`,\n\t\t\t\tflagClass: `iti__${c[1].toString().toLocaleLowerCase()}`,\n\t\t\t\tplaceHolder: '',\n\t\t\t};\n\n\t\t\tif (this.enablePlaceholder) {\n\t\t\t\tcountry.placeHolder = this.getPhoneNumberPlaceHolder(\n\t\t\t\t\tcountry.iso2.toUpperCase()\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.allCountries.push(country);\n\t\t});\n\t}\n\n\t/**\n\t * Populates preferredCountriesInDropDown with prefferred countries.\n\t */\n\tprivate updatePreferredCountries() {\n\t\tif (this.preferredCountries.length) {\n\t\t\tthis.preferredCountriesInDropDown = [];\n\t\t\tthis.preferredCountries.forEach((iso2) => {\n\t\t\t\tconst preferredCountry = this.allCountries.filter((c) => {\n\t\t\t\t\treturn c.iso2 === iso2;\n\t\t\t\t});\n\n\t\t\t\tthis.preferredCountriesInDropDown.push(preferredCountry[0]);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Updates selectedCountry.\n\t */\n\tprivate updateSelectedCountry() {\n\t\tif (this.selectedCountryISO) {\n\t\t\tthis.selectedCountry = this.allCountries.find((c) => {\n\t\t\t\treturn c.iso2.toLowerCase() === this.selectedCountryISO.toLowerCase();\n\t\t\t});\n\t\t\tif (this.selectedCountry) {\n\t\t\t\tif (this.phoneNumber) {\n\t\t\t\t\tthis.onPhoneNumberChange();\n\t\t\t\t} else {\n\t\t\t\t\t// Reason: avoid https://stackoverflow.com/a/54358133/1617590\n\t\t\t\t\t// tslint:disable-next-line: no-null-keyword\n\t\t\t\t\tthis.propagateChange(null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\n/*\n\"Property 'nativeElement' does not exist on type 'FormControl'\".\n'NativeElementInjectorDirective' injects nativeElement to each control,\nso we can access it from inside validator for example.\nMore about this approach and reasons for this:\nhttps://github.com/angular/angular/issues/18025\nhttps://stackoverflow.com/a/54075119/1617590\n*/\n@Directive({\n\t// tslint:disable-next-line: directive-selector\n\tselector: '[ngModel], [formControl], [formControlName]',\n})\nexport class NativeElementInjectorDirective implements OnInit {\n\tconstructor(\n\t\tprivate controlDir: NgControl,\n\t\tprivate host: ElementRef<HTMLFormElement>\n\t) {}\n\tngOnInit() {\n\t\tif (this.controlDir.control) {\n\t\t\tthis.controlDir.control['nativeElement'] = this.host.nativeElement;\n\t\t}\n\t}\n}\n","import { BsDropdownModule } from 'ngx-bootstrap/dropdown';\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { NativeElementInjectorDirective } from './directives/native-element-injector.directive';\nimport { NgxIntlTelInputComponent } from './ngx-intl-tel-input.component';\n\nexport const dropdownModuleForRoot: ModuleWithProviders<BsDropdownModule> = BsDropdownModule.forRoot();\n\n@NgModule({\n\tdeclarations: [NgxIntlTelInputComponent, NativeElementInjectorDirective],\n\timports: [\n\t\tCommonModule,\n\t\tFormsModule,\n\t\tReactiveFormsModule,\n\t\tdropdownModuleForRoot,\n  ],\n\texports: [NgxIntlTelInputComponent, NativeElementInjectorDirective],\n})\nexport class NgxIntlTelInputModule {\n\n}\n"]}