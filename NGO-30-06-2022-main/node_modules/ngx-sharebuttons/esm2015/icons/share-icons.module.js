import { NgModule } from '@angular/core';
import { faFacebookF, faFacebookMessenger, faLine, faLinkedinIn, faMix, faPinterestP, faRedditAlien, faTelegramPlane, faTumblr, faTwitter, faViber, faVk, faWhatsapp, faXing } from '@fortawesome/free-brands-svg-icons';
import { faCheck, faEllipsisH, faEnvelope, faExclamation, faLink, faMinus, faPrint, faSms } from '@fortawesome/free-solid-svg-icons';
import { FaIconLibrary, FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@fortawesome/angular-fontawesome';
const shareIcons = [
    faFacebookF, faTwitter, faLinkedinIn, faPinterestP, faRedditAlien, faTumblr,
    faWhatsapp, faViber, faVk, faFacebookMessenger, faTelegramPlane, faMix, faXing, faSms,
    faEnvelope, faCheck, faPrint, faExclamation, faLink, faEllipsisH, faMinus, faLine
];
export class ShareIconsModule {
    constructor(iconLibrary) {
        iconLibrary.addIcons(...shareIcons);
    }
}
ShareIconsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ShareIconsModule });
ShareIconsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ShareIconsModule_Factory(t) { return new (t || ShareIconsModule)(ɵngcc0.ɵɵinject(ɵngcc1.FaIconLibrary)); }, imports: [[
            FontAwesomeModule,
        ]] });
ShareIconsModule.ctorParameters = () => [
    { type: FaIconLibrary }
];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ShareIconsModule, { imports: function () { return [FontAwesomeModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShareIconsModule, [{
        type: NgModule,
        args: [{
                imports: [
                    FontAwesomeModule,
                ]
            }]
    }], function () { return [{ type: ɵngcc1.FaIconLibrary }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtaWNvbnMubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2hhcmVidXR0b25zL2ljb25zL3NyYy9zaGFyZS1pY29ucy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQ0wsV0FBVyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFDM0UsYUFBYSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFDdkYsTUFBTSxvQ0FBb0MsQ0FBQztBQUM1QyxPQUFPLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRXJJLE9BQU8sRUFBRSxhQUFhLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7O0FBR3BGLE1BQU0sVUFBVSxHQUFxQjtBQUNyQyxJQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsUUFBUTtBQUM3RSxJQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUs7QUFDdkYsSUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsTUFBTTtBQUNuRixDQUFDLENBQUM7QUFPRixNQUFNLE9BQU8sZ0JBQWdCO0FBQzdCLElBQUUsWUFBWSxXQUEwQjtBQUN4QyxRQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQztBQUN4QyxJQUFFLENBQUM7QUFDSDs0Q0FUQyxRQUFRLFNBQUM7RUFDUixPQUFPLEVBQUUsc0JBQ1AsaUJBQWlCLG1CQUNsQixjQUNGOztjQUNJO0FBQUM7QUFDVSxZQWZQLGFBQWE7QUFBRzs7Ozs7Ozs7OzhFQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgZmFGYWNlYm9va0YsIGZhRmFjZWJvb2tNZXNzZW5nZXIsIGZhTGluZSwgZmFMaW5rZWRpbkluLCBmYU1peCwgZmFQaW50ZXJlc3RQLFxuICBmYVJlZGRpdEFsaWVuLCBmYVRlbGVncmFtUGxhbmUsIGZhVHVtYmxyLCBmYVR3aXR0ZXIsIGZhVmliZXIsIGZhVmssIGZhV2hhdHNhcHAsIGZhWGluZ1xufSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1icmFuZHMtc3ZnLWljb25zJztcbmltcG9ydCB7IGZhQ2hlY2ssIGZhRWxsaXBzaXNILCBmYUVudmVsb3BlLCBmYUV4Y2xhbWF0aW9uLCBmYUxpbmssIGZhTWludXMsIGZhUHJpbnQsIGZhU21zIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zJztcblxuaW1wb3J0IHsgRmFJY29uTGlicmFyeSwgRm9udEF3ZXNvbWVNb2R1bGUgfSBmcm9tICdAZm9ydGF3ZXNvbWUvYW5ndWxhci1mb250YXdlc29tZSc7XG5pbXBvcnQgeyBJY29uRGVmaW5pdGlvbiB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1zdmctY29yZSc7XG5cbmNvbnN0IHNoYXJlSWNvbnM6IEljb25EZWZpbml0aW9uW10gPSBbXG4gIGZhRmFjZWJvb2tGLCBmYVR3aXR0ZXIsIGZhTGlua2VkaW5JbiwgZmFQaW50ZXJlc3RQLCBmYVJlZGRpdEFsaWVuLCBmYVR1bWJscixcbiAgZmFXaGF0c2FwcCwgZmFWaWJlciwgZmFWaywgZmFGYWNlYm9va01lc3NlbmdlciwgZmFUZWxlZ3JhbVBsYW5lLCBmYU1peCwgZmFYaW5nLCBmYVNtcyxcbiAgZmFFbnZlbG9wZSwgZmFDaGVjaywgZmFQcmludCwgZmFFeGNsYW1hdGlvbiwgZmFMaW5rLCBmYUVsbGlwc2lzSCwgZmFNaW51cywgZmFMaW5lXG5dO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgRm9udEF3ZXNvbWVNb2R1bGUsXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgU2hhcmVJY29uc01vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKGljb25MaWJyYXJ5OiBGYUljb25MaWJyYXJ5KSB7XG4gICAgaWNvbkxpYnJhcnkuYWRkSWNvbnMoLi4uc2hhcmVJY29ucyk7XG4gIH1cbn1cbiJdfQ==