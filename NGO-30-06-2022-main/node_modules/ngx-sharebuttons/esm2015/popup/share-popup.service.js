import { Injectable, Injector } from '@angular/core';
import { Overlay } from '@angular/cdk/overlay';
import { ComponentPortal, PortalInjector } from '@angular/cdk/portal';
import { ShareButtonsPopup } from './share-buttons-popup';
import { SHARE_POPUP_OPTIONS } from './share-buttons-popup.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/overlay';
export class SharePopupService {
    constructor(_overlay, _injector) {
        this._overlay = _overlay;
        this._injector = _injector;
    }
    open(config) {
        if (!this._overlayRef || !this._overlayRef.hasAttached()) {
            this._overlayRef = this._overlay.create({
                backdropClass: 'sb-backdrop',
                hasBackdrop: true,
                panelClass: '',
                positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),
                scrollStrategy: this._overlay.scrollStrategies.block(),
                disposeOnNavigation: true
            });
            const popupComponentPortal = new ComponentPortal(ShareButtonsPopup, null, this.createInjector(config));
            const sharePopupRef = this._overlayRef.attach(popupComponentPortal);
            sharePopupRef.instance.overlayRef = this._overlayRef;
            if (config.hasBackdrop) {
                this._overlayRef.backdropClick().subscribe(() => this.close());
            }
        }
    }
    /**
     * Close Share Popup Overlay
     */
    close() {
        if (this._overlayRef.hasAttached()) {
            this._overlayRef.detach();
        }
    }
    createInjector(dataToPass) {
        const injectorTokens = new WeakMap();
        injectorTokens.set(SHARE_POPUP_OPTIONS, dataToPass);
        return new PortalInjector(this._injector, injectorTokens);
    }
}
SharePopupService.ɵfac = function SharePopupService_Factory(t) { return new (t || SharePopupService)(ɵngcc0.ɵɵinject(ɵngcc1.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
SharePopupService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SharePopupService, factory: SharePopupService.ɵfac });
SharePopupService.ctorParameters = () => [
    { type: Overlay },
    { type: Injector }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SharePopupService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.Injector }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtcG9wdXAuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXNoYXJlYnV0dG9ucy9wb3B1cC9zcmMvc2hhcmUtcG9wdXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWdCLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLHNCQUFzQixDQUFDO0FBQzNELE9BQU8sRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLG1CQUFtQixFQUFxQixNQUFNLDZCQUE2QixDQUFDOzs7QUFHckYsTUFBTSxPQUFPLGlCQUFpQjtBQUM5QixJQUdFLFlBQW9CLFFBQWlCLEVBQVUsU0FBbUI7QUFDcEUsUUFEc0IsYUFBUSxHQUFSLFFBQVEsQ0FBUztBQUFDLFFBQVMsY0FBUyxHQUFULFNBQVMsQ0FBVTtBQUFDLElBQ25FLENBQUM7QUFDSCxJQUNFLElBQUksQ0FBQyxNQUEwQjtBQUNqQyxRQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsRUFBRTtBQUM5RCxZQUFNLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7QUFDOUMsZ0JBQVEsYUFBYSxFQUFFLGFBQWE7QUFDcEMsZ0JBQVEsV0FBVyxFQUFFLElBQUk7QUFDekIsZ0JBQVEsVUFBVSxFQUFFLEVBQUU7QUFDdEIsZ0JBQVEsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLGdCQUFnQixFQUFFO0FBQ25HLGdCQUFRLGNBQWMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRTtBQUM5RCxnQkFBUSxtQkFBbUIsRUFBRSxJQUFJO0FBQ2pDLGFBQU8sQ0FBQyxDQUFDO0FBQ1QsWUFBTSxNQUFNLG9CQUFvQixHQUFHLElBQUksZUFBZSxDQUFDLGlCQUFpQixFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDN0csWUFBTSxNQUFNLGFBQWEsR0FBb0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUMzRyxZQUFNLGFBQWEsQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDM0QsWUFDTSxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUU7QUFDOUIsZ0JBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDdkUsYUFBTztBQUNQLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRSxPQUFHO0FBQ0wsSUFBRSxLQUFLO0FBQ1AsUUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLEVBQUU7QUFDeEMsWUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ2hDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNVLGNBQWMsQ0FBQyxVQUE2QjtBQUFJLFFBQ3RELE1BQU0sY0FBYyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFDekMsUUFBSSxjQUFjLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3hELFFBQUksT0FBTyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQzlELElBQUUsQ0FBQztBQUNIOzZDQTFDQyxVQUFVO21IQUNUO0FBQUM7QUFFUyxZQVJILE9BQU87QUFBSSxZQURlLFFBQVE7QUFBRzs7O21HQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRSZWYsIEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPdmVybGF5LCBPdmVybGF5UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tcG9uZW50UG9ydGFsLCBQb3J0YWxJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wb3J0YWwnO1xuaW1wb3J0IHsgU2hhcmVCdXR0b25zUG9wdXAgfSBmcm9tICcuL3NoYXJlLWJ1dHRvbnMtcG9wdXAnO1xuaW1wb3J0IHsgU0hBUkVfUE9QVVBfT1BUSU9OUywgU2hhcmVQb3B1cE9wdGlvbnMgfSBmcm9tICcuL3NoYXJlLWJ1dHRvbnMtcG9wdXAubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2hhcmVQb3B1cFNlcnZpY2Uge1xuXG4gIHByaXZhdGUgX292ZXJsYXlSZWY6IE92ZXJsYXlSZWY7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfb3ZlcmxheTogT3ZlcmxheSwgcHJpdmF0ZSBfaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gIH1cblxuICBvcGVuKGNvbmZpZz86IFNoYXJlUG9wdXBPcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLl9vdmVybGF5UmVmIHx8ICF0aGlzLl9vdmVybGF5UmVmLmhhc0F0dGFjaGVkKCkpIHtcbiAgICAgIHRoaXMuX292ZXJsYXlSZWYgPSB0aGlzLl9vdmVybGF5LmNyZWF0ZSh7XG4gICAgICAgIGJhY2tkcm9wQ2xhc3M6ICdzYi1iYWNrZHJvcCcsXG4gICAgICAgIGhhc0JhY2tkcm9wOiB0cnVlLFxuICAgICAgICBwYW5lbENsYXNzOiAnJyxcbiAgICAgICAgcG9zaXRpb25TdHJhdGVneTogdGhpcy5fb3ZlcmxheS5wb3NpdGlvbigpLmdsb2JhbCgpLmNlbnRlckhvcml6b250YWxseSgpLmNlbnRlclZlcnRpY2FsbHkoKSxcbiAgICAgICAgc2Nyb2xsU3RyYXRlZ3k6IHRoaXMuX292ZXJsYXkuc2Nyb2xsU3RyYXRlZ2llcy5ibG9jaygpLFxuICAgICAgICBkaXNwb3NlT25OYXZpZ2F0aW9uOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHBvcHVwQ29tcG9uZW50UG9ydGFsID0gbmV3IENvbXBvbmVudFBvcnRhbChTaGFyZUJ1dHRvbnNQb3B1cCwgbnVsbCwgdGhpcy5jcmVhdGVJbmplY3Rvcihjb25maWcpKTtcbiAgICAgIGNvbnN0IHNoYXJlUG9wdXBSZWY6IENvbXBvbmVudFJlZjxTaGFyZUJ1dHRvbnNQb3B1cD4gPSB0aGlzLl9vdmVybGF5UmVmLmF0dGFjaChwb3B1cENvbXBvbmVudFBvcnRhbCk7XG4gICAgICBzaGFyZVBvcHVwUmVmLmluc3RhbmNlLm92ZXJsYXlSZWYgPSB0aGlzLl9vdmVybGF5UmVmO1xuXG4gICAgICBpZiAoY29uZmlnLmhhc0JhY2tkcm9wKSB7XG4gICAgICAgIHRoaXMuX292ZXJsYXlSZWYuYmFja2Ryb3BDbGljaygpLnN1YnNjcmliZSgoKSA9PiB0aGlzLmNsb3NlKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZSBTaGFyZSBQb3B1cCBPdmVybGF5XG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICBpZiAodGhpcy5fb3ZlcmxheVJlZi5oYXNBdHRhY2hlZCgpKSB7XG4gICAgICB0aGlzLl9vdmVybGF5UmVmLmRldGFjaCgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlSW5qZWN0b3IoZGF0YVRvUGFzczogU2hhcmVQb3B1cE9wdGlvbnMpOiBQb3J0YWxJbmplY3RvciB7XG4gICAgY29uc3QgaW5qZWN0b3JUb2tlbnMgPSBuZXcgV2Vha01hcCgpO1xuICAgIGluamVjdG9yVG9rZW5zLnNldChTSEFSRV9QT1BVUF9PUFRJT05TLCBkYXRhVG9QYXNzKTtcbiAgICByZXR1cm4gbmV3IFBvcnRhbEluamVjdG9yKHRoaXMuX2luamVjdG9yLCBpbmplY3RvclRva2Vucyk7XG4gIH1cblxufVxuIl19