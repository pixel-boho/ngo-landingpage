import { Component, ChangeDetectionStrategy, Inject, Optional, ElementRef } from '@angular/core';
import { FocusTrapFactory } from '@angular/cdk/a11y';
import { DOCUMENT } from '@angular/common';
import { SHARE_POPUP_OPTIONS } from './share-buttons-popup.model';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/a11y';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'ngx-sharebuttons/buttons';
import * as ɵngcc4 from '@fortawesome/angular-fontawesome';
import * as ɵngcc5 from 'ngx-sharebuttons';

function ShareButtonsPopup_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5, 6);
    ɵngcc0.ɵɵelementStart(2, "span");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r1 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(_r1 == null ? null : _r1.url);
} }
export class ShareButtonsPopup {
    constructor(_document, options, _focusTrapFactory, _elementRef) {
        this._document = _document;
        this.options = options;
        this._focusTrapFactory = _focusTrapFactory;
        this._elementRef = _elementRef;
        this._savePreviouslyFocusedElement();
    }
    get isBtnCopy() {
        return this.options.exclude && this.options.exclude.filter((btn) => btn === 'copy').length > 0;
    }
    ngAfterViewInit() {
        this._trapFocus();
    }
    /** Callback, invoked whenever an animation on the host completes. */
    ngOnDestroy() {
        this.overlayRef.dispose();
        this._restoreFocus();
    }
    /** Moves the focus inside the focus trap. */
    _trapFocus() {
        if (!this._focusTrap) {
            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);
        }
        // If were to attempt to focus immediately, then the content of the lightbox would not yet be
        // ready in instances where change detection has to run first. To deal with this, we simply
        // wait for the microtask queue to be empty.
        this._focusTrap.focusInitialElementWhenReady();
    }
    /** Saves a reference to the element that was focused before the lightbox was opened. */
    _savePreviouslyFocusedElement() {
        if (this._document) {
            this._elementFocusedBeforeDialogWasOpened = this._document.activeElement;
            // Note that there is no focus method when rendering on the server.
            if (this._elementRef.nativeElement.focus) {
                // Move focus onto the lightbox immediately in order to prevent the user from accidentally
                // opening multiple dialogs at the same time. Needs to be async, because the element
                // may not be focusable immediately.
                Promise.resolve().then(() => this._elementRef.nativeElement.focus());
            }
        }
    }
    /** Restores focus to the element that was focused before the lightbox opened. */
    _restoreFocus() {
        const toFocus = this._elementFocusedBeforeDialogWasOpened;
        // We need the extra check, because IE can set the `activeElement` to null in some cases.
        if (toFocus && typeof toFocus.focus === 'function') {
            toFocus.focus();
        }
        if (this._focusTrap) {
            this._focusTrap.destroy();
        }
    }
}
ShareButtonsPopup.ɵfac = function ShareButtonsPopup_Factory(t) { return new (t || ShareButtonsPopup)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(SHARE_POPUP_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ShareButtonsPopup.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ShareButtonsPopup, selectors: [["share-buttons-popup"]], hostAttrs: ["tabindex", "-1", "aria-modal", "true"], hostVars: 4, hostBindings: function ShareButtonsPopup_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role)("aria-labelledby", ctx.ariaLabel ? null : ctx.ariaLabelledBy)("aria-label", ctx.ariaLabel)("aria-describedby", ctx.ariaDescribedBy || null);
    } }, decls: 7, vars: 16, consts: [[1, "sb-overlay"], ["shareButton", "copy", "class", "sb-copy-url", 4, "ngIf"], [3, "include", "exclude", "theme", "url", "title", "description", "image", "tags", "autoSetMeta", "show", "showIcon", "showText", "size", "disabled", "opened", "closed"], [1, "sb-close-overlay", 3, "click"], [3, "icon"], ["shareButton", "copy", 1, "sb-copy-url"], ["shareButton", "shareButton"]], template: function ShareButtonsPopup_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "h3");
        ɵngcc0.ɵɵtext(2, "Share");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, ShareButtonsPopup_div_3_Template, 4, 1, "div", 1);
        ɵngcc0.ɵɵelementStart(4, "share-buttons", 2);
        ɵngcc0.ɵɵlistener("opened", function ShareButtonsPopup_Template_share_buttons_opened_4_listener($event) { return ctx.options == null ? null : ctx.options.opened == null ? null : ctx.options.opened.emit($event); })("closed", function ShareButtonsPopup_Template_share_buttons_closed_4_listener($event) { return ctx.options == null ? null : ctx.options.closed == null ? null : ctx.options.closed.emit($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵlistener("click", function ShareButtonsPopup_Template_div_click_5_listener() { return ctx.options.closeClick.emit(); });
        ɵngcc0.ɵɵelement(6, "fa-icon", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isBtnCopy);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("include", ctx.options == null ? null : ctx.options.include)("exclude", ctx.options == null ? null : ctx.options.exclude)("theme", ctx.options == null ? null : ctx.options.theme)("url", ctx.options == null ? null : ctx.options.url)("title", ctx.options == null ? null : ctx.options.title)("description", ctx.options == null ? null : ctx.options.description)("image", ctx.options == null ? null : ctx.options.image)("tags", ctx.options == null ? null : ctx.options.tags)("autoSetMeta", ctx.options == null ? null : ctx.options.autoSetMeta)("show", ctx.options == null ? null : ctx.options.show)("showIcon", ctx.options == null ? null : ctx.options.showIcon)("showText", ctx.options == null ? null : ctx.options.showText)("size", ctx.options == null ? null : ctx.options.size)("disabled", ctx.options == null ? null : ctx.options.disabled);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("icon", ctx.options.closeIcon);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.ShareButtons, ɵngcc4.FaIconComponent, ɵngcc5.ShareDirective], styles: [".sb-close-overlay[_ngcontent-%COMP%], [_nghost-%COMP%]{align-items:center;display:flex;justify-content:center}h3[_ngcontent-%COMP%]{margin:5px;position:absolute;top:5px}.sb-overlay[_ngcontent-%COMP%]{display:flex;flex-direction:column;max-height:100%;max-width:100%;padding:1em;position:relative;width:300px}  share-buttons-popup{background:#fff;border-radius:16px;box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12);display:block;max-height:90vh;max-width:94vw;position:relative}  share-buttons-popup:focus{outline:none}  share-buttons-popup share-buttons{display:block;height:100%;margin-top:30px;width:100%}  .sb-backdrop{background-color:rgba(0,0,0,.32)}  .fullscreen{width:100%}  .fullscreen   share-buttons-popup{border-radius:0;bottom:0;height:100%;left:0;max-height:unset;max-width:unset;position:fixed;right:0;top:0;width:100%}  .sb-overlay{margin:auto}@media only screen and (max-width:480px){  .sb-overlay{width:100%}  .sb-overlay   share-buttons-popup{border-radius:0;bottom:0;height:100%;left:0;max-height:unset;max-width:unset;position:fixed;right:0;top:0;width:100%}}  .sb-overlay .sb-button{flex:1}  .sb-overlay .sb-wrapper{width:100%}  .sb-overlay .sb-wrapper .sb-icon{flex:1}  .sb-overlay .sb-wrapper .sb-text{flex:2}  .sb-close-overlay{color:#2e4057;cursor:pointer;font-size:20px;height:40px;margin:5px;position:absolute;right:0;top:0;width:40px;z-index:60}@media only screen and (max-width:480px){  .sb-close-overlay{margin:2px}}"], changeDetection: 0 });
ShareButtonsPopup.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SHARE_POPUP_OPTIONS,] }] },
    { type: FocusTrapFactory },
    { type: ElementRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShareButtonsPopup, [{
        type: Component,
        args: [{
                selector: 'share-buttons-popup',
                template: "<div class=\"sb-overlay\">\n  <h3>Share</h3>\n  <div *ngIf=\"isBtnCopy\" #shareButton=\"shareButton\" shareButton=\"copy\" class=\"sb-copy-url\">\n    <span>{{ shareButton?.url }}</span>\n  </div>\n\n  <share-buttons [include]=\"options?.include\"\n                 [exclude]=\"options?.exclude\"\n                 [theme]=\"options?.theme\"\n                 [url]=\"options?.url\"\n                 [title]=\"options?.title\"\n                 [description]=\"options?.description\"\n                 [image]=\"options?.image\"\n                 [tags]=\"options?.tags\"\n                 [autoSetMeta]=\"options?.autoSetMeta\"\n                 [show]=\"options?.show\"\n                 [showIcon]=\"options?.showIcon\"\n                 [showText]=\"options?.showText\"\n                 [size]=\"options?.size\"\n                 (opened)=\"options?.opened?.emit($event)\"\n                 (closed)=\"options?.closed?.emit($event)\"\n                 [disabled]=\"options?.disabled\">\n  </share-buttons>\n\n  <div class=\"sb-close-overlay\" (click)=\"options.closeClick.emit()\">\n    <fa-icon [icon]=\"options.closeIcon\"></fa-icon>\n  </div>\n\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    'tabindex': '-1',
                    'aria-modal': 'true',
                    '[attr.role]': 'role',
                    '[attr.aria-labelledby]': 'ariaLabel ? null : ariaLabelledBy',
                    '[attr.aria-label]': 'ariaLabel',
                    '[attr.aria-describedby]': 'ariaDescribedBy || null'
                },
                styles: [".sb-close-overlay,:host{align-items:center;display:flex;justify-content:center}h3{margin:5px;position:absolute;top:5px}.sb-overlay{display:flex;flex-direction:column;max-height:100%;max-width:100%;padding:1em;position:relative;width:300px}::ng-deep share-buttons-popup{background:#fff;border-radius:16px;box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12);display:block;max-height:90vh;max-width:94vw;position:relative}::ng-deep share-buttons-popup:focus{outline:none}::ng-deep share-buttons-popup share-buttons{display:block;height:100%;margin-top:30px;width:100%}::ng-deep .sb-backdrop{background-color:rgba(0,0,0,.32)}::ng-deep .fullscreen{width:100%}::ng-deep .fullscreen ::ng-deep share-buttons-popup{border-radius:0;bottom:0;height:100%;left:0;max-height:unset;max-width:unset;position:fixed;right:0;top:0;width:100%}::ng-deep .sb-overlay{margin:auto}@media only screen and (max-width:480px){::ng-deep .sb-overlay{width:100%}::ng-deep .sb-overlay ::ng-deep share-buttons-popup{border-radius:0;bottom:0;height:100%;left:0;max-height:unset;max-width:unset;position:fixed;right:0;top:0;width:100%}}::ng-deep .sb-overlay .sb-button{flex:1}::ng-deep .sb-overlay .sb-wrapper{width:100%}::ng-deep .sb-overlay .sb-wrapper .sb-icon{flex:1}::ng-deep .sb-overlay .sb-wrapper .sb-text{flex:2}::ng-deep .sb-close-overlay{color:#2e4057;cursor:pointer;font-size:20px;height:40px;margin:5px;position:absolute;right:0;top:0;width:40px;z-index:60}@media only screen and (max-width:480px){::ng-deep .sb-close-overlay{margin:2px}}"]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [SHARE_POPUP_OPTIONS]
            }] }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ElementRef }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,