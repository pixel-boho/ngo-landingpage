import { Inject, Injectable, Optional } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { BehaviorSubject } from 'rxjs';
import { SHARE_BUTTONS_CONFIG, SharerMethod } from './share.models';
import { SHARE_BUTTONS } from './share.defaults';
import { mergeDeep } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "./share.models";
import * as i2 from "@angular/common";
import * as ɵngcc0 from '@angular/core';
export class ShareService {
    constructor(config, _document) {
        this._document = _document;
        /** Global config that applies on all share buttons in the app */
        this.config = {
            sharerMethod: SharerMethod.Anchor,
            sharerTarget: '_blank',
            windowObj: this._document.defaultView,
            windowFuncName: 'open',
            prop: SHARE_BUTTONS,
            theme: 'default',
            include: [],
            exclude: [],
            size: 0,
            autoSetMeta: true,
            windowWidth: 800,
            windowHeight: 500,
            moreButtonIcon: 'ellipsis-h',
            lessButtonIcon: 'minus'
        };
        /** Stream that emits when config changes */
        this.config$ = new BehaviorSubject(this.config);
        if (config) {
            this.setConfig(config);
        }
    }
    /**
     * Share buttons properties, used to get the text, color and icon of each button.
     */
    get prop() {
        return this.config.prop;
    }
    get windowSize() {
        return `width=${this.config.windowWidth}, height=${this.config.windowHeight}`;
    }
    setConfig(config) {
        this.config = mergeDeep(this.config, config);
        this.config$.next(this.config);
    }
    addButton(name, props) {
        this.setConfig({
            prop: {
                [name]: props
            }
        });
    }
}
ShareService.ɵfac = function ShareService_Factory(t) { return new (t || ShareService)(ɵngcc0.ɵɵinject(SHARE_BUTTONS_CONFIG, 8), ɵngcc0.ɵɵinject(DOCUMENT)); };
ShareService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ShareService_Factory() { return new ShareService(i0.ɵɵinject(i1.SHARE_BUTTONS_CONFIG, 8), i0.ɵɵinject(i2.DOCUMENT)); }, token: ShareService, providedIn: "root" });
ShareService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SHARE_BUTTONS_CONFIG,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShareService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [SHARE_BUTTONS_CONFIG]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJvamVjdHMvbmd4LXNoYXJlYnV0dG9ucy9zcmMvbGliL3NoYXJlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZDLE9BQU8sRUFBZ0Isb0JBQW9CLEVBQXNCLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RHLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDO0FBR0M7QUFHTTs7QUFGUCxNQUFNLE9BQU8sWUFBWTtBQUN6QixJQXNCRSxZQUFzRCxNQUEwQixFQUE0QixTQUFjO0FBQzVILFFBRDhHLGNBQVMsR0FBVCxTQUFTLENBQUs7QUFBQyxRQXJCM0gsaUVBQWlFO0FBQ25FLFFBQUUsV0FBTSxHQUF1QjtBQUMvQixZQUFJLFlBQVksRUFBRSxZQUFZLENBQUMsTUFBTTtBQUNyQyxZQUFJLFlBQVksRUFBRSxRQUFRO0FBQzFCLFlBQUksU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVztBQUN6QyxZQUFJLGNBQWMsRUFBRSxNQUFNO0FBQzFCLFlBQUksSUFBSSxFQUFFLGFBQWE7QUFDdkIsWUFBSSxLQUFLLEVBQUUsU0FBUztBQUNwQixZQUFJLE9BQU8sRUFBRSxFQUFFO0FBQ2YsWUFBSSxPQUFPLEVBQUUsRUFBRTtBQUNmLFlBQUksSUFBSSxFQUFFLENBQUM7QUFDWCxZQUFJLFdBQVcsRUFBRSxJQUFJO0FBQ3JCLFlBQUksV0FBVyxFQUFFLEdBQUc7QUFDcEIsWUFBSSxZQUFZLEVBQUUsR0FBRztBQUNyQixZQUFJLGNBQWMsRUFBRSxZQUFZO0FBQ2hDLFlBQUksY0FBYyxFQUFFLE9BQU87QUFDM0IsU0FBRyxDQUFDO0FBQ0osUUFDRSw0Q0FBNEM7QUFDOUMsUUFBRSxZQUFPLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdDLFFBRUksSUFBSSxNQUFNLEVBQUU7QUFDaEIsWUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRSxPQUFHO0FBQ0wsSUFBRSxJQUFJLElBQUk7QUFDVixRQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDNUIsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFJLFVBQVU7QUFDaEIsUUFBSSxPQUFPLFNBQVUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFZLFlBQWEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFhLEVBQUUsQ0FBQztBQUN0RixJQUFFLENBQUM7QUFDSCxJQUNFLFNBQVMsQ0FBQyxNQUEwQjtBQUN0QyxRQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDakQsUUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbkMsSUFBRSxDQUFDO0FBQ0gsSUFDRSxTQUFTLENBQUMsSUFBWSxFQUFFLEtBQW1CO0FBQzdDLFFBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQztBQUNuQixZQUFNLElBQUksRUFBRTtBQUNaLGdCQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSztBQUNyQixhQUFPO0FBQ1AsU0FBSyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDSDs4SkFDQTtBQUFDLGtPQXJESTtBQUFDO0VBSEwsVUFBVSxTQUFDLGtCQUNWLFVBQVUsRUFBRSxNQUFNLGNBQ25CLHZFQUdjLDRDQXFCQSxRQUFRLFlBQUksTUFBTSxTQUFDLG9CQUFvQjtBQUFTLDRDQUFzQixNQUFNLFNBQUMsUUFBUTtBQUFROzs7Ozs7Ozs7Ozs7OztrQ0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJU2hhcmVCdXR0b24sIFNIQVJFX0JVVFRPTlNfQ09ORklHLCBTaGFyZUJ1dHRvbnNDb25maWcsIFNoYXJlck1ldGhvZCB9IGZyb20gJy4vc2hhcmUubW9kZWxzJztcbmltcG9ydCB7IFNIQVJFX0JVVFRPTlMgfSBmcm9tICcuL3NoYXJlLmRlZmF1bHRzJztcbmltcG9ydCB7IG1lcmdlRGVlcCB9IGZyb20gJy4vdXRpbHMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBTaGFyZVNlcnZpY2Uge1xuXG4gIC8qKiBHbG9iYWwgY29uZmlnIHRoYXQgYXBwbGllcyBvbiBhbGwgc2hhcmUgYnV0dG9ucyBpbiB0aGUgYXBwICovXG4gIGNvbmZpZzogU2hhcmVCdXR0b25zQ29uZmlnID0ge1xuICAgIHNoYXJlck1ldGhvZDogU2hhcmVyTWV0aG9kLkFuY2hvcixcbiAgICBzaGFyZXJUYXJnZXQ6ICdfYmxhbmsnLFxuICAgIHdpbmRvd09iajogdGhpcy5fZG9jdW1lbnQuZGVmYXVsdFZpZXcsXG4gICAgd2luZG93RnVuY05hbWU6ICdvcGVuJyxcbiAgICBwcm9wOiBTSEFSRV9CVVRUT05TLFxuICAgIHRoZW1lOiAnZGVmYXVsdCcsXG4gICAgaW5jbHVkZTogW10sXG4gICAgZXhjbHVkZTogW10sXG4gICAgc2l6ZTogMCxcbiAgICBhdXRvU2V0TWV0YTogdHJ1ZSxcbiAgICB3aW5kb3dXaWR0aDogODAwLFxuICAgIHdpbmRvd0hlaWdodDogNTAwLFxuICAgIG1vcmVCdXR0b25JY29uOiAnZWxsaXBzaXMtaCcsXG4gICAgbGVzc0J1dHRvbkljb246ICdtaW51cydcbiAgfTtcblxuICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBjb25maWcgY2hhbmdlcyAqL1xuICBjb25maWckID0gbmV3IEJlaGF2aW9yU3ViamVjdCh0aGlzLmNvbmZpZyk7XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChTSEFSRV9CVVRUT05TX0NPTkZJRykgY29uZmlnOiBTaGFyZUJ1dHRvbnNDb25maWcsIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgX2RvY3VtZW50OiBhbnkpIHtcbiAgICBpZiAoY29uZmlnKSB7XG4gICAgICB0aGlzLnNldENvbmZpZyhjb25maWcpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTaGFyZSBidXR0b25zIHByb3BlcnRpZXMsIHVzZWQgdG8gZ2V0IHRoZSB0ZXh0LCBjb2xvciBhbmQgaWNvbiBvZiBlYWNoIGJ1dHRvbi5cbiAgICovXG4gIGdldCBwcm9wKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5wcm9wO1xuICB9XG5cbiAgZ2V0IHdpbmRvd1NpemUoKSB7XG4gICAgcmV0dXJuIGB3aWR0aD0keyB0aGlzLmNvbmZpZy53aW5kb3dXaWR0aCB9LCBoZWlnaHQ9JHsgdGhpcy5jb25maWcud2luZG93SGVpZ2h0IH1gO1xuICB9XG5cbiAgc2V0Q29uZmlnKGNvbmZpZzogU2hhcmVCdXR0b25zQ29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcgPSBtZXJnZURlZXAodGhpcy5jb25maWcsIGNvbmZpZyk7XG4gICAgdGhpcy5jb25maWckLm5leHQodGhpcy5jb25maWcpO1xuICB9XG5cbiAgYWRkQnV0dG9uKG5hbWU6IHN0cmluZywgcHJvcHM6IElTaGFyZUJ1dHRvbikge1xuICAgIHRoaXMuc2V0Q29uZmlnKHtcbiAgICAgIHByb3A6IHtcbiAgICAgICAgW25hbWVdOiBwcm9wc1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==