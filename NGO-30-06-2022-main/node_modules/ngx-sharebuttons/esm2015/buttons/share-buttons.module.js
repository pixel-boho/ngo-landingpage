import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
// import { ShareButtonsConfig, SHARE_BUTTONS_CONFIG } from '../../src/public-api';
// import { ShareButtonModule } from '../../button/src/public_api';
// Uncomment the following in development mode
import { SHARE_BUTTONS_CONFIG } from 'ngx-sharebuttons';
import { ShareButtonModule } from 'ngx-sharebuttons/button';
import { ShareButtons } from './share-buttons';
import { ExpandButton } from './expand-button';
import * as ɵngcc0 from '@angular/core';
export class ShareButtonsModule {
    static withConfig(config) {
        return {
            ngModule: ShareButtonsModule,
            providers: [{ provide: SHARE_BUTTONS_CONFIG, useValue: config }]
        };
    }
}
ShareButtonsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ShareButtonsModule });
ShareButtonsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ShareButtonsModule_Factory(t) { return new (t || ShareButtonsModule)(); }, imports: [[
            ShareButtonModule,
            CommonModule
        ], ShareButtonModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ShareButtonsModule, { declarations: function () { return [ShareButtons,
        ExpandButton]; }, imports: function () { return [ShareButtonModule,
        CommonModule]; }, exports: function () { return [ShareButtonModule,
        ShareButtons]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShareButtonsModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ShareButtons,
                    ExpandButton
                ],
                imports: [
                    ShareButtonModule,
                    CommonModule
                ],
                exports: [
                    ShareButtonModule,
                    ShareButtons
                ]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtYnV0dG9ucy5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zaGFyZWJ1dHRvbnMvYnV0dG9ucy9zcmMvc2hhcmUtYnV0dG9ucy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLG1GQUFtRjtBQUNuRixtRUFBbUU7QUFDbkUsOENBQThDO0FBQzlDLE9BQU8sRUFBc0Isb0JBQW9CLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM1RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUU1RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQWdCL0MsTUFBTSxPQUFPLGtCQUFrQjtBQUMvQixJQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBMkI7QUFBSSxRQUMvQyxPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUsa0JBQWtCO0FBQ2xDLFlBQU0sU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBQyxDQUFDO0FBQ3BFLFNBQUssQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIOzhDQXJCQyxRQUFRLFNBQUM7QUFDUixZQUFZLEVBQUUsc0JBQ1osWUFBWSxzQkFDWixZQUFZLGtCQUNiLGtCQUNELE9BQU8sRUFBRSxzQkFDUDtTQUFpQjtBQUNqQixZQUFZO0tBQ2Isa0JBQ0QsT0FBTyxFQUFFO29CQUNQLGlCQUFpQixzQkFDakIsWUFBWSxrQkFDYixjQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbi8vIGltcG9ydCB7IFNoYXJlQnV0dG9uc0NvbmZpZywgU0hBUkVfQlVUVE9OU19DT05GSUcgfSBmcm9tICcuLi8uLi9zcmMvcHVibGljLWFwaSc7XG4vLyBpbXBvcnQgeyBTaGFyZUJ1dHRvbk1vZHVsZSB9IGZyb20gJy4uLy4uL2J1dHRvbi9zcmMvcHVibGljX2FwaSc7XG4vLyBVbmNvbW1lbnQgdGhlIGZvbGxvd2luZyBpbiBkZXZlbG9wbWVudCBtb2RlXG5pbXBvcnQgeyBTaGFyZUJ1dHRvbnNDb25maWcsIFNIQVJFX0JVVFRPTlNfQ09ORklHIH0gZnJvbSAnbmd4LXNoYXJlYnV0dG9ucyc7XG5pbXBvcnQgeyBTaGFyZUJ1dHRvbk1vZHVsZSB9IGZyb20gJ25neC1zaGFyZWJ1dHRvbnMvYnV0dG9uJztcblxuaW1wb3J0IHsgU2hhcmVCdXR0b25zIH0gZnJvbSAnLi9zaGFyZS1idXR0b25zJztcbmltcG9ydCB7IEV4cGFuZEJ1dHRvbiB9IGZyb20gJy4vZXhwYW5kLWJ1dHRvbic7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFNoYXJlQnV0dG9ucyxcbiAgICBFeHBhbmRCdXR0b25cbiAgXSxcbiAgaW1wb3J0czogW1xuICAgIFNoYXJlQnV0dG9uTW9kdWxlLFxuICAgIENvbW1vbk1vZHVsZVxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgU2hhcmVCdXR0b25Nb2R1bGUsXG4gICAgU2hhcmVCdXR0b25zXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgU2hhcmVCdXR0b25zTW9kdWxlIHtcbiAgc3RhdGljIHdpdGhDb25maWcoY29uZmlnPzogU2hhcmVCdXR0b25zQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVyczxTaGFyZUJ1dHRvbnNNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFNoYXJlQnV0dG9uc01vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW3twcm92aWRlOiBTSEFSRV9CVVRUT05TX0NPTkZJRywgdXNlVmFsdWU6IGNvbmZpZ31dXG4gICAgfTtcbiAgfVxufVxuIl19