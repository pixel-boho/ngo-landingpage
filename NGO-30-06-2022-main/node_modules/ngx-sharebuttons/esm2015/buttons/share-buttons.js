import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { BehaviorSubject, Subscription } from 'rxjs';
import { map } from 'rxjs/operators';
import { ShareService, SHARE_BUTTONS } from 'ngx-sharebuttons';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-sharebuttons';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'ngx-sharebuttons/button';
import * as ɵngcc4 from './expand-button';

function ShareButtons_div_0_share_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "share-button", 3);
    ɵngcc0.ɵɵlistener("opened", function ShareButtons_div_0_share_button_1_Template_share_button_opened_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.opened.emit($event); })("closed", function ShareButtons_div_0_share_button_1_Template_share_button_closed_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.closed.emit($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const button_r4 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("button", button_r4)("theme", ctx_r2.theme)("url", ctx_r2.url)("title", ctx_r2.title)("description", ctx_r2.description)("image", ctx_r2.image)("tags", ctx_r2.tags)("autoSetMeta", ctx_r2.autoSetMeta)("showIcon", ctx_r2.showIcon)("showText", ctx_r2.showText)("size", ctx_r2.size)("disabled", ctx_r2.disabled);
} }
function ShareButtons_div_0_expand_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "expand-button", 4);
    ɵngcc0.ɵɵlistener("toggle", function ShareButtons_div_0_expand_button_2_Template_expand_button_toggle_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.updateState({ expanded: $event }); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const state_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMapInterpolate1("sb-button sb-", ctx_r3.theme, "");
    ɵngcc0.ɵɵproperty("expanded", state_r1.expanded)("moreIcon", state_r1.moreIcon)("lessIcon", state_r1.lessIcon)("size", (1 + ctx_r3.size / 20) * 14);
} }
function ShareButtons_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, ShareButtons_div_0_share_button_1_Template, 1, 12, "share-button", 1);
    ɵngcc0.ɵɵtemplate(2, ShareButtons_div_0_expand_button_2_Template, 1, 7, "expand-button", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const state_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMapInterpolate1("sb-group sb-", ctx_r0.theme, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", state_r1.selectedButtons);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", state_r1.shownCount < state_r1.userButtons.length);
} }
export class ShareButtons {
    constructor(_share) {
        this._share = _share;
        this._state$ = new BehaviorSubject({
            includedButtons: [],
            excludedButtons: [],
            userButtons: [],
            selectedButtons: [],
            expanded: true,
            shownCount: Object.keys(SHARE_BUTTONS).length
        });
        this._configSub$ = Subscription.EMPTY;
        this.theme = this._share.config.theme;
        /** Show buttons icons */
        this.showIcon = true;
        /** Show buttons text */
        this.showText = false;
        /** Buttons size */
        this.size = 0;
        /** Share dialog opened event */
        this.opened = new EventEmitter();
        /** Share dialog closed event */
        this.closed = new EventEmitter();
    }
    ngOnInit() {
        this.state$ = this._state$.pipe(map((state) => {
            // Use component include buttons, otherwise fallback to global include buttons
            const includedButtons = state.includedButtons && state.includedButtons.length ? state.includedButtons : state.userButtons;
            const userButtons = state.excludedButtons ? includedButtons.filter((btn) => state.excludedButtons.indexOf(btn) < 0) : includedButtons;
            const selectedButtons = userButtons.slice(0, state.expanded ? userButtons.length : state.shownCount);
            return {
                userButtons,
                selectedButtons,
                expanded: state.expanded,
                shownCount: state.shownCount,
                moreIcon: state.moreIcon,
                lessIcon: state.lessIcon
            };
        }));
        // Subscribe to share buttons config changes, This updates the component whenever a new button is added
        this._configSub$ = this._share.config$.subscribe((config) => {
            // Use global include buttons, otherwise fallback to all buttons
            const includedButtons = config.include.length ? config.include : Object.keys(SHARE_BUTTONS);
            const userButtons = includedButtons.filter((btn) => config.exclude.indexOf(btn) < 0);
            this.updateState({
                userButtons,
                expanded: false,
                moreIcon: config.moreButtonIcon,
                lessIcon: config.lessButtonIcon
            });
        });
    }
    ngOnChanges(changes) {
        const shouldUpdate = (changes['include'] && changes['include'].currentValue !== changes['include'].previousValue) ||
            (changes['exclude'] && changes['exclude'].currentValue !== changes['exclude'].previousValue) ||
            (changes['show'] && changes['show'].currentValue !== changes['show'].previousValue);
        if (shouldUpdate) {
            this.updateState({
                includedButtons: this.include,
                excludedButtons: this.exclude,
                shownCount: this.show
            });
        }
    }
    ngOnDestroy() {
        this._configSub$.unsubscribe();
        this._state$.complete();
    }
    updateState(state) {
        this._state$.next(Object.assign(Object.assign({}, this._state$.value), state));
    }
}
ShareButtons.ɵfac = function ShareButtons_Factory(t) { return new (t || ShareButtons)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ShareService)); };
ShareButtons.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ShareButtons, selectors: [["share-buttons"]], inputs: { theme: "theme", showIcon: "showIcon", showText: "showText", size: "size", include: "include", exclude: "exclude", show: "show", url: "url", title: "title", description: "description", image: "image", tags: "tags", autoSetMeta: "autoSetMeta", disabled: "disabled" }, outputs: { opened: "opened", closed: "closed" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 3, consts: [[3, "class", 4, "ngIf"], [3, "button", "theme", "url", "title", "description", "image", "tags", "autoSetMeta", "showIcon", "showText", "size", "disabled", "opened", "closed", 4, "ngFor", "ngForOf"], [3, "class", "expanded", "moreIcon", "lessIcon", "size", "toggle", 4, "ngIf"], [3, "button", "theme", "url", "title", "description", "image", "tags", "autoSetMeta", "showIcon", "showText", "size", "disabled", "opened", "closed"], [3, "expanded", "moreIcon", "lessIcon", "size", "toggle"]], template: function ShareButtons_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ShareButtons_div_0_Template, 3, 5, "div", 0);
        ɵngcc0.ɵɵpipe(1, "async");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.state$));
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgForOf, ɵngcc3.ShareButton, ɵngcc4.ExpandButton], pipes: [ɵngcc2.AsyncPipe], styles: ["[_nghost-%COMP%]{--sb-margin:0.3125em;display:inherit}"], changeDetection: 0 });
ShareButtons.ctorParameters = () => [
    { type: ShareService }
];
ShareButtons.propDecorators = {
    theme: [{ type: Input }],
    include: [{ type: Input }],
    exclude: [{ type: Input }],
    show: [{ type: Input }],
    url: [{ type: Input }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    image: [{ type: Input }],
    tags: [{ type: Input }],
    autoSetMeta: [{ type: Input }],
    showIcon: [{ type: Input }],
    showText: [{ type: Input }],
    size: [{ type: Input }],
    disabled: [{ type: Input }],
    opened: [{ type: Output }],
    closed: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShareButtons, [{
        type: Component,
        args: [{
                selector: 'share-buttons',
                template: "<div *ngIf=\"state$ | async; let state\" class=\"sb-group sb-{{theme}}\">\n  <share-button *ngFor=\"let button of state.selectedButtons\"\n                [button]=\"button\"\n                [theme]=\"theme\"\n                [url]=\"url\"\n                [title]=\"title\"\n                [description]=\"description\"\n                [image]=\"image\"\n                [tags]=\"tags\"\n                [autoSetMeta]=\"autoSetMeta\"\n                [showIcon]=\"showIcon\"\n                [showText]=\"showText\"\n                [size]=\"size\"\n                (opened)=\"opened.emit($event)\"\n                (closed)=\"closed.emit($event)\"\n                [disabled]=\"disabled\">\n  </share-button>\n  <expand-button *ngIf=\"state.shownCount < state.userButtons.length\"\n                 class=\"sb-button sb-{{theme}}\"\n                 [expanded]=\"state.expanded\"\n                 [moreIcon]=\"state.moreIcon\"\n                 [lessIcon]=\"state.lessIcon\"\n                 [size]=\"(1 + size/20) * 14\"\n                 (toggle)=\"updateState({expanded: $event})\">\n  </expand-button>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{--sb-margin:0.3125em;display:inherit}"]
            }]
    }], function () { return [{ type: ɵngcc1.ShareService }]; }, { theme: [{
            type: Input
        }], showIcon: [{
            type: Input
        }], showText: [{
            type: Input
        }], size: [{
            type: Input
        }], opened: [{
            type: Output
        }], closed: [{
            type: Output
        }], include: [{
            type: Input
        }], exclude: [{
            type: Input
        }], show: [{
            type: Input
        }], url: [{
            type: Input
        }], title: [{
            type: Input
        }], description: [{
            type: Input
        }], image: [{
            type: Input
        }], tags: [{
            type: Input
        }], autoSetMeta: [{
            type: Input
        }], disabled: [{
            type: Input
        }] }); })();
/**
 * Explanation of the above code:
 * ------------------------------
 Include buttons: includes only wanted buttons and excludes the rest
 Exclude buttons: excludes only the unwanted buttons
 User buttons = Include buttons - exclude buttons
 Selected Buttons = User buttons [shown number]
 */

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtYnV0dG9ucy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXNoYXJlYnV0dG9ucy9idXR0b25zL3NyYy9zaGFyZS1idXR0b25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFJTixZQUFZLEVBRVosdUJBQXVCLEVBQ3hCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBYyxlQUFlLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsWUFBWSxFQUFzQixhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUJuRixNQUFNLE9BQU8sWUFBWTtBQUFHLElBNkQxQixZQUFvQixNQUFvQjtBQUMxQyxRQURzQixXQUFNLEdBQU4sTUFBTSxDQUFjO0FBQUMsUUExRGpDLFlBQU8sR0FBRyxJQUFJLGVBQWUsQ0FBZTtBQUN0RCxZQUFJLGVBQWUsRUFBRSxFQUFFO0FBQ3ZCLFlBQUksZUFBZSxFQUFFLEVBQUU7QUFDdkIsWUFBSSxXQUFXLEVBQUUsRUFBRTtBQUNuQixZQUFJLGVBQWUsRUFBRSxFQUFFO0FBQ3ZCLFlBQUksUUFBUSxFQUFFLElBQUk7QUFDbEIsWUFBSSxVQUFVLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNO0FBQ2pELFNBQUcsQ0FBQyxDQUFDO0FBQ0wsUUFDVSxnQkFBVyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUM7QUFDM0MsUUFDVyxVQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQzVDLFFBNEJFLHlCQUF5QjtBQUMzQixRQUFXLGFBQVEsR0FBRyxJQUFJLENBQUM7QUFDM0Is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QUFBSyxrQkFHVixLQUFLO0FBQUssb0JBR1YsS0FBSztBQUFLLDBCQUdWLEtBQUs7QUFBSyxvQkFHVixLQUFLO0FBQUssbUJBR1YsS0FBSztBQUFLLDBCQUdWLEtBQUs7QUFBSyx1QkFHVixLQUFLO0FBQUssdUJBR1YsS0FBSztBQUFLLG1CQUdWLEtBQUs7QUFBSyx1QkFHVixLQUFLO0FBQUsscUJBR1YsTUFBTTtBQUFLLHFCQUdYLE1BQU07QUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUErRGY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIE9uSW5pdCxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIEV2ZW50RW1pdHRlcixcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3lcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBTaGFyZVNlcnZpY2UsIFNoYXJlQnV0dG9uc0NvbmZpZywgU0hBUkVfQlVUVE9OUyB9IGZyb20gJ25neC1zaGFyZWJ1dHRvbnMnO1xuLy8gVW5jb21tZW50IHRoZSBmb2xsb3dpbmcgbGluZSBpbiBkZXZlbG9wbWVudCBtb2RlXG4vLyBpbXBvcnQgeyBTaGFyZVNlcnZpY2UsIFNoYXJlQnV0dG9uc0NvbmZpZywgU0hBUkVfQlVUVE9OUyB9IGZyb20gJy4uLy4uL3NyYy9wdWJsaWMtYXBpJztcblxuaW50ZXJmYWNlIEJ1dHRvbnNTdGF0ZSB7XG4gIGluY2x1ZGVkQnV0dG9ucz86IHN0cmluZ1tdO1xuICBleGNsdWRlZEJ1dHRvbnM/OiBzdHJpbmdbXTtcbiAgdXNlckJ1dHRvbnM/OiBzdHJpbmdbXTtcbiAgc2VsZWN0ZWRCdXR0b25zPzogc3RyaW5nW107XG4gIGV4cGFuZGVkPzogYm9vbGVhbjtcbiAgc2hvd25Db3VudD86IG51bWJlcjtcbiAgbW9yZUljb24/OiBhbnk7XG4gIGxlc3NJY29uPzogYW55O1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzaGFyZS1idXR0b25zJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NoYXJlLWJ1dHRvbnMuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3NoYXJlLWJ1dHRvbnMuc2NzcyddLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBTaGFyZUJ1dHRvbnMgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcblxuICBzdGF0ZSQ6IE9ic2VydmFibGU8QnV0dG9uc1N0YXRlPjtcbiAgcHJpdmF0ZSBfc3RhdGUkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxCdXR0b25zU3RhdGU+KHtcbiAgICBpbmNsdWRlZEJ1dHRvbnM6IFtdLFxuICAgIGV4Y2x1ZGVkQnV0dG9uczogW10sXG4gICAgdXNlckJ1dHRvbnM6IFtdLFxuICAgIHNlbGVjdGVkQnV0dG9uczogW10sXG4gICAgZXhwYW5kZWQ6IHRydWUsXG4gICAgc2hvd25Db3VudDogT2JqZWN0LmtleXMoU0hBUkVfQlVUVE9OUykubGVuZ3RoXG4gIH0pO1xuXG4gIHByaXZhdGUgX2NvbmZpZ1N1YiQgPSBTdWJzY3JpcHRpb24uRU1QVFk7XG5cbiAgQElucHV0KCkgdGhlbWUgPSB0aGlzLl9zaGFyZS5jb25maWcudGhlbWU7XG5cbiAgLyoqIEFycmF5IG9mIGluY2x1ZGVkIGJ1dHRvbnMgKi9cbiAgQElucHV0KCkgaW5jbHVkZTogc3RyaW5nW107XG5cbiAgLyoqIEFycmF5IG9mIGV4Y2x1ZGVkIGJ1dHRvbnMgKi9cbiAgQElucHV0KCkgZXhjbHVkZTogc3RyaW5nW107XG5cbiAgLyoqIE51bWJlcnMgb2YgYnV0dG9ucyB0byBzaG93ICovXG4gIEBJbnB1dCgpIHNob3c6IG51bWJlcjtcblxuICAvKiogVGhlIHNoYXJpbmcgbGluayAqL1xuICBASW5wdXQoKSB1cmw6IHN0cmluZztcblxuICAvKiogVGhlIHRpdGxlIHBhcmFtZXRlciAqL1xuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xuXG4gIC8qKiBUaGUgZGVzY3JpcHRpb24gcGFyYW1ldGVyICovXG4gIEBJbnB1dCgpIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG5cbiAgLyoqIFRoZSBpbWFnZSBwYXJhbWV0ZXIgZm9yIHNoYXJpbmcgb24gUGludGVyZXN0ICovXG4gIEBJbnB1dCgpIGltYWdlOiBzdHJpbmc7XG5cbiAgLyoqIFRoZSB0YWdzIHBhcmFtZXRlciBmb3Igc2hhcmluZyBvbiBUd2l0dGVyIGFuZCBUdW1ibHIgKi9cbiAgQElucHV0KCkgdGFnczogc3RyaW5nO1xuXG4gIC8qKiBTZXRzIG1ldGEgdGFncyBmcm9tIGRvY3VtZW50IGhlYWQsIHVzZWZ1bCB3aGVuIFNFTyBpcyBhdmFpbGFibGUgKi9cbiAgQElucHV0KCkgYXV0b1NldE1ldGE6IGJvb2xlYW47XG5cbiAgLyoqIFNob3cgYnV0dG9ucyBpY29ucyAqL1xuICBASW5wdXQoKSBzaG93SWNvbiA9IHRydWU7XG5cbiAgLyoqIFNob3cgYnV0dG9ucyB0ZXh0ICovXG4gIEBJbnB1dCgpIHNob3dUZXh0ID0gZmFsc2U7XG5cbiAgLyoqIEJ1dHRvbnMgc2l6ZSAqL1xuICBASW5wdXQoKSBzaXplID0gMDtcblxuICAvKiogQSBmbGFnIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBidXR0b24ncyBjbGljayBpcyBkaXNhYmxlZCAqL1xuICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbjtcblxuICAvKiogU2hhcmUgZGlhbG9nIG9wZW5lZCBldmVudCAqL1xuICBAT3V0cHV0KCkgb3BlbmVkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgLyoqIFNoYXJlIGRpYWxvZyBjbG9zZWQgZXZlbnQgKi9cbiAgQE91dHB1dCgpIGNsb3NlZCA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3NoYXJlOiBTaGFyZVNlcnZpY2UpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc3RhdGUkID0gdGhpcy5fc3RhdGUkLnBpcGUoXG4gICAgICBtYXAoKHN0YXRlOiBCdXR0b25zU3RhdGUpID0+IHtcbiAgICAgICAgLy8gVXNlIGNvbXBvbmVudCBpbmNsdWRlIGJ1dHRvbnMsIG90aGVyd2lzZSBmYWxsYmFjayB0byBnbG9iYWwgaW5jbHVkZSBidXR0b25zXG4gICAgICAgIGNvbnN0IGluY2x1ZGVkQnV0dG9ucyA9IHN0YXRlLmluY2x1ZGVkQnV0dG9ucyAmJiBzdGF0ZS5pbmNsdWRlZEJ1dHRvbnMubGVuZ3RoID8gc3RhdGUuaW5jbHVkZWRCdXR0b25zIDogc3RhdGUudXNlckJ1dHRvbnM7XG4gICAgICAgIGNvbnN0IHVzZXJCdXR0b25zID0gc3RhdGUuZXhjbHVkZWRCdXR0b25zID8gaW5jbHVkZWRCdXR0b25zLmZpbHRlcigoYnRuKSA9PiBzdGF0ZS5leGNsdWRlZEJ1dHRvbnMuaW5kZXhPZihidG4pIDwgMCkgOiBpbmNsdWRlZEJ1dHRvbnM7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkQnV0dG9ucyA9IHVzZXJCdXR0b25zLnNsaWNlKDAsIHN0YXRlLmV4cGFuZGVkID8gdXNlckJ1dHRvbnMubGVuZ3RoIDogc3RhdGUuc2hvd25Db3VudCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdXNlckJ1dHRvbnMsXG4gICAgICAgICAgc2VsZWN0ZWRCdXR0b25zLFxuICAgICAgICAgIGV4cGFuZGVkOiBzdGF0ZS5leHBhbmRlZCxcbiAgICAgICAgICBzaG93bkNvdW50OiBzdGF0ZS5zaG93bkNvdW50LFxuICAgICAgICAgIG1vcmVJY29uOiBzdGF0ZS5tb3JlSWNvbixcbiAgICAgICAgICBsZXNzSWNvbjogc3RhdGUubGVzc0ljb25cbiAgICAgICAgfTtcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIC8vIFN1YnNjcmliZSB0byBzaGFyZSBidXR0b25zIGNvbmZpZyBjaGFuZ2VzLCBUaGlzIHVwZGF0ZXMgdGhlIGNvbXBvbmVudCB3aGVuZXZlciBhIG5ldyBidXR0b24gaXMgYWRkZWRcbiAgICB0aGlzLl9jb25maWdTdWIkID0gdGhpcy5fc2hhcmUuY29uZmlnJC5zdWJzY3JpYmUoKGNvbmZpZzogU2hhcmVCdXR0b25zQ29uZmlnKSA9PiB7XG4gICAgICAvLyBVc2UgZ2xvYmFsIGluY2x1ZGUgYnV0dG9ucywgb3RoZXJ3aXNlIGZhbGxiYWNrIHRvIGFsbCBidXR0b25zXG4gICAgICBjb25zdCBpbmNsdWRlZEJ1dHRvbnMgPSBjb25maWcuaW5jbHVkZS5sZW5ndGggPyBjb25maWcuaW5jbHVkZSA6IE9iamVjdC5rZXlzKFNIQVJFX0JVVFRPTlMpO1xuICAgICAgY29uc3QgdXNlckJ1dHRvbnMgPSBpbmNsdWRlZEJ1dHRvbnMuZmlsdGVyKChidG4pID0+IGNvbmZpZy5leGNsdWRlLmluZGV4T2YoYnRuKSA8IDApO1xuICAgICAgdGhpcy51cGRhdGVTdGF0ZSh7XG4gICAgICAgIHVzZXJCdXR0b25zLFxuICAgICAgICBleHBhbmRlZDogZmFsc2UsXG4gICAgICAgIG1vcmVJY29uOiBjb25maWcubW9yZUJ1dHRvbkljb24sXG4gICAgICAgIGxlc3NJY29uOiBjb25maWcubGVzc0J1dHRvbkljb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGNvbnN0IHNob3VsZFVwZGF0ZSA9XG4gICAgICAoY2hhbmdlc1snaW5jbHVkZSddICYmIGNoYW5nZXNbJ2luY2x1ZGUnXS5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXNbJ2luY2x1ZGUnXS5wcmV2aW91c1ZhbHVlKSB8fFxuICAgICAgKGNoYW5nZXNbJ2V4Y2x1ZGUnXSAmJiBjaGFuZ2VzWydleGNsdWRlJ10uY3VycmVudFZhbHVlICE9PSBjaGFuZ2VzWydleGNsdWRlJ10ucHJldmlvdXNWYWx1ZSkgfHxcbiAgICAgIChjaGFuZ2VzWydzaG93J10gJiYgY2hhbmdlc1snc2hvdyddLmN1cnJlbnRWYWx1ZSAhPT0gY2hhbmdlc1snc2hvdyddLnByZXZpb3VzVmFsdWUpO1xuXG4gICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgdGhpcy51cGRhdGVTdGF0ZSh7XG4gICAgICAgIGluY2x1ZGVkQnV0dG9uczogdGhpcy5pbmNsdWRlLFxuICAgICAgICBleGNsdWRlZEJ1dHRvbnM6IHRoaXMuZXhjbHVkZSxcbiAgICAgICAgc2hvd25Db3VudDogdGhpcy5zaG93XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9jb25maWdTdWIkLnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5fc3RhdGUkLmNvbXBsZXRlKCk7XG4gIH1cblxuICB1cGRhdGVTdGF0ZShzdGF0ZTogQnV0dG9uc1N0YXRlKSB7XG4gICAgdGhpcy5fc3RhdGUkLm5leHQoey4uLnRoaXMuX3N0YXRlJC52YWx1ZSwgLi4uc3RhdGV9KTtcbiAgfVxuXG59XG5cbi8qKlxuICogRXhwbGFuYXRpb24gb2YgdGhlIGFib3ZlIGNvZGU6XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiBJbmNsdWRlIGJ1dHRvbnM6IGluY2x1ZGVzIG9ubHkgd2FudGVkIGJ1dHRvbnMgYW5kIGV4Y2x1ZGVzIHRoZSByZXN0XG4gRXhjbHVkZSBidXR0b25zOiBleGNsdWRlcyBvbmx5IHRoZSB1bndhbnRlZCBidXR0b25zXG4gVXNlciBidXR0b25zID0gSW5jbHVkZSBidXR0b25zIC0gZXhjbHVkZSBidXR0b25zXG4gU2VsZWN0ZWQgQnV0dG9ucyA9IFVzZXIgYnV0dG9ucyBbc2hvd24gbnVtYmVyXVxuICovXG4iXX0=