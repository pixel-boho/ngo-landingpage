import { InjectionToken, Component, ChangeDetectionStrategy, Optional, Inject, ElementRef, Injectable, Injector, EventEmitter, Directive, Input, Output, HostListener, NgModule } from '@angular/core';
import { DOCUMENT, CommonModule } from '@angular/common';
import { SHARE_BUTTONS, ShareService, SHARE_BUTTONS_CONFIG } from 'ngx-sharebuttons';
import { ShareButtonsModule } from 'ngx-sharebuttons/buttons';
import { FocusTrapFactory } from '@angular/cdk/a11y';
import { Overlay } from '@angular/cdk/overlay';
import { ComponentPortal, PortalInjector } from '@angular/cdk/portal';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/a11y';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'ngx-sharebuttons/buttons';
import * as ɵngcc4 from '@fortawesome/angular-fontawesome';
import * as ɵngcc5 from 'ngx-sharebuttons';
import * as ɵngcc6 from '@angular/cdk/overlay';

function ShareButtonsPopup_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5, 6);
    ɵngcc0.ɵɵelementStart(2, "span");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r1 = ɵngcc0.ɵɵreference(1);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate(_r1 == null ? null : _r1.url);
} }
function SharePopupComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵelement(1, "fa-icon", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("icon", ctx_r0.icon)("fixedWidth", true);
} }
function SharePopupComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.text, " ");
} }
const SHARE_POPUP_OPTIONS = new InjectionToken('SHARE_POPUP_OPTIONS');

class ShareButtonsPopup {
    constructor(_document, options, _focusTrapFactory, _elementRef) {
        this._document = _document;
        this.options = options;
        this._focusTrapFactory = _focusTrapFactory;
        this._elementRef = _elementRef;
        this._savePreviouslyFocusedElement();
    }
    get isBtnCopy() {
        return this.options.exclude && this.options.exclude.filter((btn) => btn === 'copy').length > 0;
    }
    ngAfterViewInit() {
        this._trapFocus();
    }
    /** Callback, invoked whenever an animation on the host completes. */
    ngOnDestroy() {
        this.overlayRef.dispose();
        this._restoreFocus();
    }
    /** Moves the focus inside the focus trap. */
    _trapFocus() {
        if (!this._focusTrap) {
            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);
        }
        // If were to attempt to focus immediately, then the content of the lightbox would not yet be
        // ready in instances where change detection has to run first. To deal with this, we simply
        // wait for the microtask queue to be empty.
        this._focusTrap.focusInitialElementWhenReady();
    }
    /** Saves a reference to the element that was focused before the lightbox was opened. */
    _savePreviouslyFocusedElement() {
        if (this._document) {
            this._elementFocusedBeforeDialogWasOpened = this._document.activeElement;
            // Note that there is no focus method when rendering on the server.
            if (this._elementRef.nativeElement.focus) {
                // Move focus onto the lightbox immediately in order to prevent the user from accidentally
                // opening multiple dialogs at the same time. Needs to be async, because the element
                // may not be focusable immediately.
                Promise.resolve().then(() => this._elementRef.nativeElement.focus());
            }
        }
    }
    /** Restores focus to the element that was focused before the lightbox opened. */
    _restoreFocus() {
        const toFocus = this._elementFocusedBeforeDialogWasOpened;
        // We need the extra check, because IE can set the `activeElement` to null in some cases.
        if (toFocus && typeof toFocus.focus === 'function') {
            toFocus.focus();
        }
        if (this._focusTrap) {
            this._focusTrap.destroy();
        }
    }
}
ShareButtonsPopup.ɵfac = function ShareButtonsPopup_Factory(t) { return new (t || ShareButtonsPopup)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(SHARE_POPUP_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ShareButtonsPopup.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ShareButtonsPopup, selectors: [["share-buttons-popup"]], hostAttrs: ["tabindex", "-1", "aria-modal", "true"], hostVars: 4, hostBindings: function ShareButtonsPopup_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role)("aria-labelledby", ctx.ariaLabel ? null : ctx.ariaLabelledBy)("aria-label", ctx.ariaLabel)("aria-describedby", ctx.ariaDescribedBy || null);
    } }, decls: 7, vars: 16, consts: [[1, "sb-overlay"], ["shareButton", "copy", "class", "sb-copy-url", 4, "ngIf"], [3, "include", "exclude", "theme", "url", "title", "description", "image", "tags", "autoSetMeta", "show", "showIcon", "showText", "size", "disabled", "opened", "closed"], [1, "sb-close-overlay", 3, "click"], [3, "icon"], ["shareButton", "copy", 1, "sb-copy-url"], ["shareButton", "shareButton"]], template: function ShareButtonsPopup_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "h3");
        ɵngcc0.ɵɵtext(2, "Share");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, ShareButtonsPopup_div_3_Template, 4, 1, "div", 1);
        ɵngcc0.ɵɵelementStart(4, "share-buttons", 2);
        ɵngcc0.ɵɵlistener("opened", function ShareButtonsPopup_Template_share_buttons_opened_4_listener($event) { return ctx.options == null ? null : ctx.options.opened == null ? null : ctx.options.opened.emit($event); })("closed", function ShareButtonsPopup_Template_share_buttons_closed_4_listener($event) { return ctx.options == null ? null : ctx.options.closed == null ? null : ctx.options.closed.emit($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵlistener("click", function ShareButtonsPopup_Template_div_click_5_listener() { return ctx.options.closeClick.emit(); });
        ɵngcc0.ɵɵelement(6, "fa-icon", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isBtnCopy);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("include", ctx.options == null ? null : ctx.options.include)("exclude", ctx.options == null ? null : ctx.options.exclude)("theme", ctx.options == null ? null : ctx.options.theme)("url", ctx.options == null ? null : ctx.options.url)("title", ctx.options == null ? null : ctx.options.title)("description", ctx.options == null ? null : ctx.options.description)("image", ctx.options == null ? null : ctx.options.image)("tags", ctx.options == null ? null : ctx.options.tags)("autoSetMeta", ctx.options == null ? null : ctx.options.autoSetMeta)("show", ctx.options == null ? null : ctx.options.show)("showIcon", ctx.options == null ? null : ctx.options.showIcon)("showText", ctx.options == null ? null : ctx.options.showText)("size", ctx.options == null ? null : ctx.options.size)("disabled", ctx.options == null ? null : ctx.options.disabled);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("icon", ctx.options.closeIcon);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.ShareButtons, ɵngcc4.FaIconComponent, ɵngcc5.ShareDirective], styles: [".sb-close-overlay[_ngcontent-%COMP%], [_nghost-%COMP%]{align-items:center;display:flex;justify-content:center}h3[_ngcontent-%COMP%]{margin:5px;position:absolute;top:5px}.sb-overlay[_ngcontent-%COMP%]{display:flex;flex-direction:column;max-height:100%;max-width:100%;padding:1em;position:relative;width:300px}  share-buttons-popup{background:#fff;border-radius:16px;box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12);display:block;max-height:90vh;max-width:94vw;position:relative}  share-buttons-popup:focus{outline:none}  share-buttons-popup share-buttons{display:block;height:100%;margin-top:30px;width:100%}  .sb-backdrop{background-color:rgba(0,0,0,.32)}  .fullscreen{width:100%}  .fullscreen   share-buttons-popup{border-radius:0;bottom:0;height:100%;left:0;max-height:unset;max-width:unset;position:fixed;right:0;top:0;width:100%}  .sb-overlay{margin:auto}@media only screen and (max-width:480px){  .sb-overlay{width:100%}  .sb-overlay   share-buttons-popup{border-radius:0;bottom:0;height:100%;left:0;max-height:unset;max-width:unset;position:fixed;right:0;top:0;width:100%}}  .sb-overlay .sb-button{flex:1}  .sb-overlay .sb-wrapper{width:100%}  .sb-overlay .sb-wrapper .sb-icon{flex:1}  .sb-overlay .sb-wrapper .sb-text{flex:2}  .sb-close-overlay{color:#2e4057;cursor:pointer;font-size:20px;height:40px;margin:5px;position:absolute;right:0;top:0;width:40px;z-index:60}@media only screen and (max-width:480px){  .sb-close-overlay{margin:2px}}"], changeDetection: 0 });
ShareButtonsPopup.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SHARE_POPUP_OPTIONS,] }] },
    { type: FocusTrapFactory },
    { type: ElementRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShareButtonsPopup, [{
        type: Component,
        args: [{
                selector: 'share-buttons-popup',
                template: "<div class=\"sb-overlay\">\n  <h3>Share</h3>\n  <div *ngIf=\"isBtnCopy\" #shareButton=\"shareButton\" shareButton=\"copy\" class=\"sb-copy-url\">\n    <span>{{ shareButton?.url }}</span>\n  </div>\n\n  <share-buttons [include]=\"options?.include\"\n                 [exclude]=\"options?.exclude\"\n                 [theme]=\"options?.theme\"\n                 [url]=\"options?.url\"\n                 [title]=\"options?.title\"\n                 [description]=\"options?.description\"\n                 [image]=\"options?.image\"\n                 [tags]=\"options?.tags\"\n                 [autoSetMeta]=\"options?.autoSetMeta\"\n                 [show]=\"options?.show\"\n                 [showIcon]=\"options?.showIcon\"\n                 [showText]=\"options?.showText\"\n                 [size]=\"options?.size\"\n                 (opened)=\"options?.opened?.emit($event)\"\n                 (closed)=\"options?.closed?.emit($event)\"\n                 [disabled]=\"options?.disabled\">\n  </share-buttons>\n\n  <div class=\"sb-close-overlay\" (click)=\"options.closeClick.emit()\">\n    <fa-icon [icon]=\"options.closeIcon\"></fa-icon>\n  </div>\n\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    'tabindex': '-1',
                    'aria-modal': 'true',
                    '[attr.role]': 'role',
                    '[attr.aria-labelledby]': 'ariaLabel ? null : ariaLabelledBy',
                    '[attr.aria-label]': 'ariaLabel',
                    '[attr.aria-describedby]': 'ariaDescribedBy || null'
                },
                styles: [".sb-close-overlay,:host{align-items:center;display:flex;justify-content:center}h3{margin:5px;position:absolute;top:5px}.sb-overlay{display:flex;flex-direction:column;max-height:100%;max-width:100%;padding:1em;position:relative;width:300px}::ng-deep share-buttons-popup{background:#fff;border-radius:16px;box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12);display:block;max-height:90vh;max-width:94vw;position:relative}::ng-deep share-buttons-popup:focus{outline:none}::ng-deep share-buttons-popup share-buttons{display:block;height:100%;margin-top:30px;width:100%}::ng-deep .sb-backdrop{background-color:rgba(0,0,0,.32)}::ng-deep .fullscreen{width:100%}::ng-deep .fullscreen ::ng-deep share-buttons-popup{border-radius:0;bottom:0;height:100%;left:0;max-height:unset;max-width:unset;position:fixed;right:0;top:0;width:100%}::ng-deep .sb-overlay{margin:auto}@media only screen and (max-width:480px){::ng-deep .sb-overlay{width:100%}::ng-deep .sb-overlay ::ng-deep share-buttons-popup{border-radius:0;bottom:0;height:100%;left:0;max-height:unset;max-width:unset;position:fixed;right:0;top:0;width:100%}}::ng-deep .sb-overlay .sb-button{flex:1}::ng-deep .sb-overlay .sb-wrapper{width:100%}::ng-deep .sb-overlay .sb-wrapper .sb-icon{flex:1}::ng-deep .sb-overlay .sb-wrapper .sb-text{flex:2}::ng-deep .sb-close-overlay{color:#2e4057;cursor:pointer;font-size:20px;height:40px;margin:5px;position:absolute;right:0;top:0;width:40px;z-index:60}@media only screen and (max-width:480px){::ng-deep .sb-close-overlay{margin:2px}}"]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [SHARE_POPUP_OPTIONS]
            }] }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ElementRef }]; }, null); })();

class SharePopupService {
    constructor(_overlay, _injector) {
        this._overlay = _overlay;
        this._injector = _injector;
    }
    open(config) {
        if (!this._overlayRef || !this._overlayRef.hasAttached()) {
            this._overlayRef = this._overlay.create({
                backdropClass: 'sb-backdrop',
                hasBackdrop: true,
                panelClass: '',
                positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),
                scrollStrategy: this._overlay.scrollStrategies.block(),
                disposeOnNavigation: true
            });
            const popupComponentPortal = new ComponentPortal(ShareButtonsPopup, null, this.createInjector(config));
            const sharePopupRef = this._overlayRef.attach(popupComponentPortal);
            sharePopupRef.instance.overlayRef = this._overlayRef;
            if (config.hasBackdrop) {
                this._overlayRef.backdropClick().subscribe(() => this.close());
            }
        }
    }
    /**
     * Close Share Popup Overlay
     */
    close() {
        if (this._overlayRef.hasAttached()) {
            this._overlayRef.detach();
        }
    }
    createInjector(dataToPass) {
        const injectorTokens = new WeakMap();
        injectorTokens.set(SHARE_POPUP_OPTIONS, dataToPass);
        return new PortalInjector(this._injector, injectorTokens);
    }
}
SharePopupService.ɵfac = function SharePopupService_Factory(t) { return new (t || SharePopupService)(ɵngcc0.ɵɵinject(ɵngcc6.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
SharePopupService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SharePopupService, factory: SharePopupService.ɵfac });
SharePopupService.ctorParameters = () => [
    { type: Overlay },
    { type: Injector }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SharePopupService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc6.Overlay }, { type: ɵngcc0.Injector }]; }, null); })();

class SharePopupButtonsDirective {
    constructor(_sharePopup, _share) {
        this._sharePopup = _sharePopup;
        this._share = _share;
        this.theme = this._share.config.theme;
        this.include = Object.keys(SHARE_BUTTONS);
        this.closeIcon = ['fas', 'times-circle'];
        /** Show buttons icons */
        this.showIcon = true;
        /** Show buttons text */
        this.showText = false;
        /** Buttons size */
        this.size = 0;
        this.hasBackdrop = true;
        /** Share dialog opened event */
        this.opened = new EventEmitter();
        /** Share dialog closed event */
        this.closed = new EventEmitter();
        // Stream that emits when the share popup is closed
        this.popupClosed = new EventEmitter();
        this._popupClosed = this.popupClosed.subscribe(() => this.close());
    }
    onClick(e) {
        this._sharePopup.open({
            theme: this.theme,
            include: this.include,
            exclude: this.exclude,
            url: this.url,
            title: this.title,
            description: this.description,
            image: this.image,
            tags: this.tags,
            autoSetMeta: this.autoSetMeta,
            show: this.show,
            showIcon: this.showIcon,
            showText: this.showText,
            size: this.size,
            disabled: this.disabled,
            opened: this.opened,
            closed: this.closed,
            closeIcon: this.closeIcon,
            closeClick: this.popupClosed,
            hasBackdrop: this.hasBackdrop,
            backdropClass: this.backdropClass
        });
    }
    ngOnDestroy() {
        this._popupClosed.unsubscribe();
    }
    close() {
        this._sharePopup.close();
    }
}
SharePopupButtonsDirective.ɵfac = function SharePopupButtonsDirective_Factory(t) { return new (t || SharePopupButtonsDirective)(ɵngcc0.ɵɵdirectiveInject(SharePopupService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ShareService)); };
SharePopupButtonsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SharePopupButtonsDirective, selectors: [["", "shareButtonsPopup", ""]], hostBindings: function SharePopupButtonsDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function SharePopupButtonsDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { theme: "theme", include: "include", closeIcon: "closeIcon", showIcon: "showIcon", showText: "showText", size: "size", hasBackdrop: "hasBackdrop", exclude: "exclude", url: "url", title: "title", description: "description", image: "image", tags: "tags", autoSetMeta: "autoSetMeta", show: "show", disabled: "disabled", backdropClass: "backdropClass" }, outputs: { opened: "opened", closed: "closed", popupClosed: "popupClosed" } });
SharePopupButtonsDirective.ctorParameters = () => [
    { type: SharePopupService },
    { type: ShareService }
];
SharePopupButtonsDirective.propDecorators = {
    theme: [{ type: Input }],
    include: [{ type: Input }],
    exclude: [{ type: Input }],
    closeIcon: [{ type: Input }],
    url: [{ type: Input }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    image: [{ type: Input }],
    tags: [{ type: Input }],
    autoSetMeta: [{ type: Input }],
    show: [{ type: Input }],
    showIcon: [{ type: Input }],
    showText: [{ type: Input }],
    size: [{ type: Input }],
    disabled: [{ type: Input }],
    hasBackdrop: [{ type: Input }],
    backdropClass: [{ type: Input }],
    opened: [{ type: Output }],
    closed: [{ type: Output }],
    popupClosed: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SharePopupButtonsDirective, [{
        type: Directive,
        args: [{
                selector: '[shareButtonsPopup]'
            }]
    }], function () { return [{ type: SharePopupService }, { type: ɵngcc5.ShareService }]; }, { theme: [{
            type: Input
        }], include: [{
            type: Input
        }], closeIcon: [{
            type: Input
        }], showIcon: [{
            type: Input
        }], showText: [{
            type: Input
        }], size: [{
            type: Input
        }], hasBackdrop: [{
            type: Input
        }], opened: [{
            type: Output
        }], closed: [{
            type: Output
        }], popupClosed: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], exclude: [{
            type: Input
        }], url: [{
            type: Input
        }], title: [{
            type: Input
        }], description: [{
            type: Input
        }], image: [{
            type: Input
        }], tags: [{
            type: Input
        }], autoSetMeta: [{
            type: Input
        }], show: [{
            type: Input
        }], disabled: [{
            type: Input
        }], backdropClass: [{
            type: Input
        }] }); })();

class SharePopupComponent {
    constructor(_sharePopup, _share) {
        this._sharePopup = _sharePopup;
        this._share = _share;
        this.theme = this._share.config.theme;
        this.icon = ['fas', 'share'];
        this.text = 'Share';
        this.closeIcon = ['fas', 'times-circle'];
        /** Show buttons icons */
        this.showIcon = true;
        /** Show buttons text */
        this.showText = false;
        /** Buttons size */
        this.size = 0;
        this.hasBackdrop = true;
        /** Share dialog opened event */
        this.opened = new EventEmitter();
        /** Share dialog closed event */
        this.closed = new EventEmitter();
        // Stream that emits when the share popup is closed
        this.popupClosed = new EventEmitter();
    }
}
SharePopupComponent.ɵfac = function SharePopupComponent_Factory(t) { return new (t || SharePopupComponent)(ɵngcc0.ɵɵdirectiveInject(SharePopupService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ShareService)); };
SharePopupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SharePopupComponent, selectors: [["share-popup-button"]], inputs: { theme: "theme", icon: "icon", text: "text", closeIcon: "closeIcon", showIcon: "showIcon", showText: "showText", size: "size", hasBackdrop: "hasBackdrop", include: "include", exclude: "exclude", url: "url", title: "title", description: "description", image: "image", tags: "tags", autoSetMeta: "autoSetMeta", show: "show", disabled: "disabled", backdropClass: "backdropClass" }, outputs: { opened: "opened", closed: "closed", popupClosed: "popupClosed" }, decls: 5, vars: 18, consts: [["shareButtonsPopup", "", 1, "sb-wrapper", 3, "theme", "include", "exclude", "show", "url", "showIcon", "showText", "size", "tags", "autoSetMeta", "title", "description", "image", "closed", "opened"], [1, "sb-content"], ["class", "sb-icon", 4, "ngIf"], ["class", "sb-text", 4, "ngIf"], [1, "sb-icon"], [3, "icon", "fixedWidth"], [1, "sb-text"]], template: function SharePopupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "button", 0);
        ɵngcc0.ɵɵlistener("closed", function SharePopupComponent_Template_button_closed_1_listener($event) { return ctx.closed.emit($event); })("opened", function SharePopupComponent_Template_button_opened_1_listener($event) { return ctx.opened.emit($event); });
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵtemplate(3, SharePopupComponent_div_3_Template, 2, 2, "div", 2);
        ɵngcc0.ɵɵtemplate(4, SharePopupComponent_div_4_Template, 2, 1, "div", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("sb-button sb-", ctx.theme, "");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("theme", ctx.theme)("include", ctx.include)("exclude", ctx.exclude)("show", ctx.show)("url", ctx.url)("showIcon", ctx.showIcon)("showText", ctx.showText)("size", ctx.size)("tags", ctx.tags)("autoSetMeta", ctx.autoSetMeta)("title", ctx.title)("description", ctx.description)("image", ctx.image);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showIcon);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showText);
    } }, directives: [SharePopupButtonsDirective, ɵngcc2.NgIf, ɵngcc4.FaIconComponent], styles: ["[_nghost-%COMP%]{--button-color:#282c34}"], changeDetection: 0 });
SharePopupComponent.ctorParameters = () => [
    { type: SharePopupService },
    { type: ShareService }
];
SharePopupComponent.propDecorators = {
    theme: [{ type: Input }],
    icon: [{ type: Input }],
    text: [{ type: Input }],
    include: [{ type: Input }],
    exclude: [{ type: Input }],
    closeIcon: [{ type: Input }],
    url: [{ type: Input }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    image: [{ type: Input }],
    tags: [{ type: Input }],
    autoSetMeta: [{ type: Input }],
    show: [{ type: Input }],
    showIcon: [{ type: Input }],
    showText: [{ type: Input }],
    size: [{ type: Input }],
    disabled: [{ type: Input }],
    hasBackdrop: [{ type: Input }],
    backdropClass: [{ type: Input }],
    opened: [{ type: Output }],
    closed: [{ type: Output }],
    popupClosed: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SharePopupComponent, [{
        type: Component,
        args: [{
                selector: 'share-popup-button',
                template: `
    <div class="sb-button sb-{{theme}}">
      <button shareButtonsPopup
              class="sb-wrapper"
              [theme]="theme"
              [include]="include"
              [exclude]="exclude"
              [show]="show"
              [url]="url"
              [showIcon]="showIcon"
              [showText]="showText"
              [size]="size"
              [tags]="tags"
              [autoSetMeta]="autoSetMeta"
              [title]="title"
              [description]="description"
              [image]="image"
              (closed)="closed.emit($event)"
              (opened)="opened.emit($event)">
        <div class="sb-content">

          <div *ngIf="showIcon" class="sb-icon">
            <fa-icon [icon]="icon" [fixedWidth]="true"></fa-icon>
          </div>

          <div *ngIf="showText" class="sb-text">
            {{ text }}
          </div>

        </div>
      </button>
    </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{--button-color:#282c34}"]
            }]
    }], function () { return [{ type: SharePopupService }, { type: ɵngcc5.ShareService }]; }, { theme: [{
            type: Input
        }], icon: [{
            type: Input
        }], text: [{
            type: Input
        }], closeIcon: [{
            type: Input
        }], showIcon: [{
            type: Input
        }], showText: [{
            type: Input
        }], size: [{
            type: Input
        }], hasBackdrop: [{
            type: Input
        }], opened: [{
            type: Output
        }], closed: [{
            type: Output
        }], popupClosed: [{
            type: Output
        }], include: [{
            type: Input
        }], exclude: [{
            type: Input
        }], url: [{
            type: Input
        }], title: [{
            type: Input
        }], description: [{
            type: Input
        }], image: [{
            type: Input
        }], tags: [{
            type: Input
        }], autoSetMeta: [{
            type: Input
        }], show: [{
            type: Input
        }], disabled: [{
            type: Input
        }], backdropClass: [{
            type: Input
        }] }); })();

class ShareButtonsPopupModule {
    static withConfig(config) {
        return {
            ngModule: ShareButtonsModule,
            providers: [{ provide: SHARE_BUTTONS_CONFIG, useValue: config }]
        };
    }
}
ShareButtonsPopupModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ShareButtonsPopupModule });
ShareButtonsPopupModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ShareButtonsPopupModule_Factory(t) { return new (t || ShareButtonsPopupModule)(); }, providers: [
        SharePopupService
    ], imports: [[
            CommonModule,
            ShareButtonsModule,
            FontAwesomeModule
        ], ShareButtonsModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ShareButtonsPopupModule, { declarations: function () { return [ShareButtonsPopup, SharePopupButtonsDirective, SharePopupComponent]; }, imports: function () { return [CommonModule,
        ShareButtonsModule,
        FontAwesomeModule]; }, exports: function () { return [ShareButtonsModule, ShareButtonsPopup, SharePopupButtonsDirective, SharePopupComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShareButtonsPopupModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ShareButtonsPopup,
                    SharePopupButtonsDirective,
                    SharePopupComponent
                ],
                imports: [
                    CommonModule,
                    ShareButtonsModule,
                    FontAwesomeModule
                ],
                exports: [
                    ShareButtonsModule,
                    ShareButtonsPopup,
                    SharePopupButtonsDirective,
                    SharePopupComponent
                ],
                providers: [
                    SharePopupService
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ShareButtonsPopup, ShareButtonsPopupModule, SHARE_POPUP_OPTIONS as ɵb, SharePopupButtonsDirective as ɵc, SharePopupService as ɵd, SharePopupComponent as ɵe };

//# sourceMappingURL=ngx-sharebuttons-popup.js.map