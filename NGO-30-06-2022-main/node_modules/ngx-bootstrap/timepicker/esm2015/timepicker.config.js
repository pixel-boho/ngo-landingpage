/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Provides default configuration values for timepicker
 */
import * as ɵngcc0 from '@angular/core';
export class TimepickerConfig {
    constructor() {
        /**
         * hours change step
         */
        this.hourStep = 1;
        /**
         * minutes change step
         */
        this.minuteStep = 5;
        /**
         * seconds changes step
         */
        this.secondsStep = 10;
        /**
         * if true works in 12H mode and displays AM/PM. If false works in 24H mode and hides AM/PM
         */
        this.showMeridian = true;
        /**
         * meridian labels based on locale
         */
        this.meridians = ['AM', 'PM'];
        /**
         * if true hours and minutes fields will be readonly
         */
        this.readonlyInput = false;
        /**
         * if true hours and minutes fields will be disabled
         */
        this.disabled = false;
        /**
         * if true scroll inside hours and minutes inputs will change time
         */
        this.mousewheel = true;
        /**
         * if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard
         */
        this.arrowkeys = true;
        /**
         * if true spinner arrows above and below the inputs will be shown
         */
        this.showSpinners = true;
        /**
         * show seconds in timepicker
         */
        this.showSeconds = false;
        /**
         * show minutes in timepicker
         */
        this.showMinutes = true;
        /**
         * placeholder for hours field in timepicker
         */
        this.hoursPlaceholder = 'HH';
        /**
         * placeholder for minutes field in timepicker
         */
        this.minutesPlaceholder = 'MM';
        /**
         * placeholder for seconds field in timepicker
         */
        this.secondsPlaceholder = 'SS';
        /**
         * hours aria label
         */
        this.ariaLabelHours = 'hours';
        /**
         * minutes aria label
         */
        this.ariaLabelMinutes = 'minutes';
        /**
         * seconds aria label
         */
        this.ariaLabelSeconds = 'seconds';
    }
}
TimepickerConfig.ɵfac = function TimepickerConfig_Factory(t) { return new (t || TimepickerConfig)(); };
/** @nocollapse */ TimepickerConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function TimepickerConfig_Factory() { return new TimepickerConfig(); }, token: TimepickerConfig, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimepickerConfig, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
if (false) {
    /**
     * hours change step
     * @type {?}
     */
    TimepickerConfig.prototype.hourStep;
    /**
     * minutes change step
     * @type {?}
     */
    TimepickerConfig.prototype.minuteStep;
    /**
     * seconds changes step
     * @type {?}
     */
    TimepickerConfig.prototype.secondsStep;
    /**
     * if true works in 12H mode and displays AM/PM. If false works in 24H mode and hides AM/PM
     * @type {?}
     */
    TimepickerConfig.prototype.showMeridian;
    /**
     * meridian labels based on locale
     * @type {?}
     */
    TimepickerConfig.prototype.meridians;
    /**
     * if true hours and minutes fields will be readonly
     * @type {?}
     */
    TimepickerConfig.prototype.readonlyInput;
    /**
     * if true hours and minutes fields will be disabled
     * @type {?}
     */
    TimepickerConfig.prototype.disabled;
    /**
     * if true scroll inside hours and minutes inputs will change time
     * @type {?}
     */
    TimepickerConfig.prototype.mousewheel;
    /**
     * if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard
     * @type {?}
     */
    TimepickerConfig.prototype.arrowkeys;
    /**
     * if true spinner arrows above and below the inputs will be shown
     * @type {?}
     */
    TimepickerConfig.prototype.showSpinners;
    /**
     * show seconds in timepicker
     * @type {?}
     */
    TimepickerConfig.prototype.showSeconds;
    /**
     * show minutes in timepicker
     * @type {?}
     */
    TimepickerConfig.prototype.showMinutes;
    /**
     * minimum time user can select
     * @type {?}
     */
    TimepickerConfig.prototype.min;
    /**
     * maximum time user can select
     * @type {?}
     */
    TimepickerConfig.prototype.max;
    /**
     * placeholder for hours field in timepicker
     * @type {?}
     */
    TimepickerConfig.prototype.hoursPlaceholder;
    /**
     * placeholder for minutes field in timepicker
     * @type {?}
     */
    TimepickerConfig.prototype.minutesPlaceholder;
    /**
     * placeholder for seconds field in timepicker
     * @type {?}
     */
    TimepickerConfig.prototype.secondsPlaceholder;
    /**
     * hours aria label
     * @type {?}
     */
    TimepickerConfig.prototype.ariaLabelHours;
    /**
     * minutes aria label
     * @type {?}
     */
    TimepickerConfig.prototype.ariaLabelMinutes;
    /**
     * seconds aria label
     * @type {?}
     */
    TimepickerConfig.prototype.ariaLabelSeconds;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXBpY2tlci5jb25maWcuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtYm9vdHN0cmFwL3RpbWVwaWNrZXIvdGltZXBpY2tlci5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7QUFDb0M7QUFBSTtBQUd2Qzs7QUFDRCxNQUFNLE9BQU8sZ0JBQWdCO0FBQzdCLElBSkE7QUFDRTtBQUFZO0FBRUs7QUFBWSxRQUU3QixhQUFRLEdBQUcsQ0FBQyxDQUFDO0FBQ2Y7QUFBWTtBQUNFO0FBQ04sUUFETixlQUFVLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCO0FBQVk7QUFDRTtBQUNSLFFBREosZ0JBQVcsR0FBRyxFQUFFLENBQUM7QUFDbkI7QUFBWTtBQUNFO0FBQ1gsUUFERCxpQkFBWSxHQUFHLElBQUksQ0FBQztBQUN0QjtBQUFZO0FBQ0U7QUFBWSxRQUF4QixjQUFTLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDM0I7QUFBWTtBQUNFO0FBQ2IsUUFEQyxrQkFBYSxHQUFHLEtBQUssQ0FBQztBQUN4QjtBQUFZO0FBQ0U7QUFDUixRQURKLGFBQVEsR0FBRyxLQUFLLENBQUM7QUFDbkI7QUFBWTtBQUNFO0FBQ1QsUUFESCxlQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3BCO0FBQVk7QUFDRTtBQUNSLFFBREosY0FBUyxHQUFHLElBQUksQ0FBQztBQUNuQjtBQUFZO0FBQ0U7QUFDWCxRQURELGlCQUFZLEdBQUcsSUFBSSxDQUFDO0FBQ3RCO0FBQVk7QUFDRTtBQUNYLFFBREQsZ0JBQVcsR0FBRyxLQUFLLENBQUM7QUFDdEI7QUFBWTtBQUNFO0FBQ1YsUUFERixnQkFBVyxHQUFHLElBQUksQ0FBQztBQUNyQjtBQUFZO0FBRUU7QUFBWSxRQUd4QixxQkFBZ0IsR0FBRyxJQUFJLENBQUM7QUFDMUI7QUFBWTtBQUNFO0FBQVksUUFBeEIsdUJBQWtCLEdBQUcsSUFBSSxDQUFDO0FBQzVCO0FBQVk7QUFDRTtBQUFZLFFBQXhCLHVCQUFrQixHQUFHLElBQUksQ0FBQztBQUM1QjtBQUFZO0FBQ0U7QUFBWSxRQUF4QixtQkFBYyxHQUFHLE9BQU8sQ0FBQztBQUMzQjtBQUFZO0FBQ0U7QUFBWSxRQUF4QixxQkFBZ0IsR0FBRyxTQUFTLENBQUM7QUFDL0I7QUFBWTtBQUNFO0FBQVksUUFBeEIscUJBQWdCLEdBQUcsU0FBUyxDQUFDO0FBQy9CLEtBQUM7QUFDRDs0Q0E3Q0MsVUFBVSxTQUFDLGtCQUNWLFVBQVUsRUFBRSxNQUFNLElBRWY7U0FESixUQUNLOzs7Ozs7Z0RBT3dCO0FBQUM7QUFBYTtBQUFRO0FBQXlCO0FBQWlCO0FBQzFGLElBTkYsb0NBQWE7QUFDZjtBQUFRO0FBQ0Y7QUFDRDtBQUFRLElBRFgsc0NBQWU7QUFDakI7QUFBUTtBQUNGO0FBQ0g7QUFBUSxJQURULHVDQUFpQjtBQUNuQjtBQUFRO0FBQ0Y7QUFDTjtBQUFRLElBRE4sd0NBQW9CO0FBQ3RCO0FBQVE7QUFDRjtBQUFpQjtBQUNwQixJQURELHFDQUF5QjtBQUMzQjtBQUFRO0FBQ0Y7QUFBaUI7QUFDakIsSUFESix5Q0FBc0I7QUFDeEI7QUFBUTtBQUNGO0FBQ0g7QUFBUSxJQURULG9DQUFpQjtBQUNuQjtBQUFRO0FBQ0Y7QUFDSjtBQUFRLElBRFIsc0NBQWtCO0FBQ3BCO0FBQVE7QUFDRjtBQUNIO0FBQVEsSUFEVCxxQ0FBaUI7QUFDbkI7QUFBUTtBQUNGO0FBQ047QUFBUSxJQUROLHdDQUFvQjtBQUN0QjtBQUFRO0FBQ0Y7QUFDTjtBQUFRLElBRE4sdUNBQW9CO0FBQ3RCO0FBQVE7QUFDRjtBQUNMO0FBQVEsSUFEUCx1Q0FBbUI7QUFDckI7QUFBUTtBQUNGO0FBQ0k7QUFBUSxJQURoQiwrQkFBVTtBQUNaO0FBQVE7QUFDRjtBQUNJO0FBQVEsSUFEaEIsK0JBQVU7QUFDWjtBQUFRO0FBQ0Y7QUFBaUI7QUFDbkIsSUFERiw0Q0FBd0I7QUFDMUI7QUFBUTtBQUNGO0FBQWlCO0FBQ3JCLElBREEsOENBQTBCO0FBQzVCO0FBQVE7QUFDRjtBQUFpQjtBQUNyQixJQURBLDhDQUEwQjtBQUM1QjtBQUFRO0FBQ0Y7QUFBaUI7QUFDcEIsSUFERCwwQ0FBeUI7QUFDM0I7QUFBUTtBQUNGO0FBQWlCO0FBQVEsSUFBN0IsNENBQTZCO0FBQy9CO0FBQVE7QUFDRjtBQUFpQjtBQUFRLElBQTdCLDRDQUE2QjtBQUMvQjtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKiogUHJvdmlkZXMgZGVmYXVsdCBjb25maWd1cmF0aW9uIHZhbHVlcyBmb3IgdGltZXBpY2tlciAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVGltZXBpY2tlckNvbmZpZyB7XG4gIC8qKiBob3VycyBjaGFuZ2Ugc3RlcCAqL1xuICBob3VyU3RlcCA9IDE7XG4gIC8qKiBtaW51dGVzIGNoYW5nZSBzdGVwICovXG4gIG1pbnV0ZVN0ZXAgPSA1O1xuICAvKiogc2Vjb25kcyBjaGFuZ2VzIHN0ZXAgKi9cbiAgc2Vjb25kc1N0ZXAgPSAxMDtcbiAgLyoqIGlmIHRydWUgd29ya3MgaW4gMTJIIG1vZGUgYW5kIGRpc3BsYXlzIEFNL1BNLiBJZiBmYWxzZSB3b3JrcyBpbiAyNEggbW9kZSBhbmQgaGlkZXMgQU0vUE0gKi9cbiAgc2hvd01lcmlkaWFuID0gdHJ1ZTtcbiAgLyoqIG1lcmlkaWFuIGxhYmVscyBiYXNlZCBvbiBsb2NhbGUgKi9cbiAgbWVyaWRpYW5zID0gWydBTScsICdQTSddO1xuICAvKiogaWYgdHJ1ZSBob3VycyBhbmQgbWludXRlcyBmaWVsZHMgd2lsbCBiZSByZWFkb25seSAqL1xuICByZWFkb25seUlucHV0ID0gZmFsc2U7XG4gIC8qKiBpZiB0cnVlIGhvdXJzIGFuZCBtaW51dGVzIGZpZWxkcyB3aWxsIGJlIGRpc2FibGVkICovXG4gIGRpc2FibGVkID0gZmFsc2U7XG4gIC8qKiBpZiB0cnVlIHNjcm9sbCBpbnNpZGUgaG91cnMgYW5kIG1pbnV0ZXMgaW5wdXRzIHdpbGwgY2hhbmdlIHRpbWUgKi9cbiAgbW91c2V3aGVlbCA9IHRydWU7XG4gIC8qKiBpZiB0cnVlIHRoZSB2YWx1ZXMgb2YgaG91cnMgYW5kIG1pbnV0ZXMgY2FuIGJlIGNoYW5nZWQgdXNpbmcgdGhlIHVwL2Rvd24gYXJyb3cga2V5cyBvbiB0aGUga2V5Ym9hcmQgKi9cbiAgYXJyb3drZXlzID0gdHJ1ZTtcbiAgLyoqIGlmIHRydWUgc3Bpbm5lciBhcnJvd3MgYWJvdmUgYW5kIGJlbG93IHRoZSBpbnB1dHMgd2lsbCBiZSBzaG93biAqL1xuICBzaG93U3Bpbm5lcnMgPSB0cnVlO1xuICAvKiogc2hvdyBzZWNvbmRzIGluIHRpbWVwaWNrZXIgKi9cbiAgc2hvd1NlY29uZHMgPSBmYWxzZTtcbiAgLyoqIHNob3cgbWludXRlcyBpbiB0aW1lcGlja2VyICovXG4gIHNob3dNaW51dGVzID0gdHJ1ZTtcbiAgLyoqIG1pbmltdW0gdGltZSB1c2VyIGNhbiBzZWxlY3QgKi9cbiAgbWluOiBEYXRlO1xuICAvKiogbWF4aW11bSB0aW1lIHVzZXIgY2FuIHNlbGVjdCAqL1xuICBtYXg6IERhdGU7XG4gIC8qKiBwbGFjZWhvbGRlciBmb3IgaG91cnMgZmllbGQgaW4gdGltZXBpY2tlciAqL1xuICBob3Vyc1BsYWNlaG9sZGVyID0gJ0hIJztcbiAgLyoqIHBsYWNlaG9sZGVyIGZvciBtaW51dGVzIGZpZWxkIGluIHRpbWVwaWNrZXIgKi9cbiAgbWludXRlc1BsYWNlaG9sZGVyID0gJ01NJztcbiAgLyoqIHBsYWNlaG9sZGVyIGZvciBzZWNvbmRzIGZpZWxkIGluIHRpbWVwaWNrZXIgKi9cbiAgc2Vjb25kc1BsYWNlaG9sZGVyID0gJ1NTJztcbiAgLyoqIGhvdXJzIGFyaWEgbGFiZWwgKi9cbiAgYXJpYUxhYmVsSG91cnMgPSAnaG91cnMnO1xuICAvKiogbWludXRlcyBhcmlhIGxhYmVsICovXG4gIGFyaWFMYWJlbE1pbnV0ZXMgPSAnbWludXRlcyc7XG4gIC8qKiBzZWNvbmRzIGFyaWEgbGFiZWwgKi9cbiAgYXJpYUxhYmVsU2Vjb25kcyA9ICdzZWNvbmRzJztcbn1cbiJdfQ==